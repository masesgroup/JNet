/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing
{
    #region JInternalFrame declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html"/>
    /// </summary>
    public partial class JInternalFrame : Javax.Swing.JComponent
    {
        const string _bridgeClassName = "javax.swing.JInternalFrame";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public JInternalFrame() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public JInternalFrame(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region JDesktopIcon declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html"/>
        /// </summary>
        public partial class JDesktopIcon : Javax.Swing.JComponent
        {
            const string _bridgeClassName = "javax.swing.JInternalFrame$JDesktopIcon";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public JDesktopIcon() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public JDesktopIcon(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region JInternalFrame implementation
    public partial class JInternalFrame
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#%3Cinit%3E(java.lang.String,boolean,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        public JInternalFrame(Java.Lang.String arg0, bool arg1, bool arg2, bool arg3, bool arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#%3Cinit%3E(java.lang.String,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public JInternalFrame(Java.Lang.String arg0, bool arg1, bool arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#%3Cinit%3E(java.lang.String,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public JInternalFrame(Java.Lang.String arg0, bool arg1, bool arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#%3Cinit%3E(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public JInternalFrame(Java.Lang.String arg0, bool arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public JInternalFrame(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Javax.Swing.JInternalFrame"/> to <see cref="Javax.Accessibility.Accessible"/>
        /// </summary>
        public static implicit operator Javax.Accessibility.Accessible(Javax.Swing.JInternalFrame t) => t.Cast<Javax.Accessibility.Accessible>();
        /// <summary>
        /// Converter from <see cref="Javax.Swing.JInternalFrame"/> to <see cref="Javax.Swing.WindowConstants"/>
        /// </summary>
        public static implicit operator Javax.Swing.WindowConstants(Javax.Swing.JInternalFrame t) => t.Cast<Javax.Swing.WindowConstants>();
        /// <summary>
        /// Converter from <see cref="Javax.Swing.JInternalFrame"/> to <see cref="Javax.Swing.RootPaneContainer"/>
        /// </summary>
        public static implicit operator Javax.Swing.RootPaneContainer(Javax.Swing.JInternalFrame t) => t.Cast<Javax.Swing.RootPaneContainer>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#CONTENT_PANE_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String CONTENT_PANE_PROPERTY { get { if (!_CONTENT_PANE_PROPERTYReady) { _CONTENT_PANE_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_PANE_PROPERTY"); _CONTENT_PANE_PROPERTYReady = true; } return _CONTENT_PANE_PROPERTYContent; } }
        private static Java.Lang.String _CONTENT_PANE_PROPERTYContent = default;
        private static bool _CONTENT_PANE_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#FRAME_ICON_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String FRAME_ICON_PROPERTY { get { if (!_FRAME_ICON_PROPERTYReady) { _FRAME_ICON_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FRAME_ICON_PROPERTY"); _FRAME_ICON_PROPERTYReady = true; } return _FRAME_ICON_PROPERTYContent; } }
        private static Java.Lang.String _FRAME_ICON_PROPERTYContent = default;
        private static bool _FRAME_ICON_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#GLASS_PANE_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String GLASS_PANE_PROPERTY { get { if (!_GLASS_PANE_PROPERTYReady) { _GLASS_PANE_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GLASS_PANE_PROPERTY"); _GLASS_PANE_PROPERTYReady = true; } return _GLASS_PANE_PROPERTYContent; } }
        private static Java.Lang.String _GLASS_PANE_PROPERTYContent = default;
        private static bool _GLASS_PANE_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#IS_CLOSED_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String IS_CLOSED_PROPERTY { get { if (!_IS_CLOSED_PROPERTYReady) { _IS_CLOSED_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_CLOSED_PROPERTY"); _IS_CLOSED_PROPERTYReady = true; } return _IS_CLOSED_PROPERTYContent; } }
        private static Java.Lang.String _IS_CLOSED_PROPERTYContent = default;
        private static bool _IS_CLOSED_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#IS_ICON_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String IS_ICON_PROPERTY { get { if (!_IS_ICON_PROPERTYReady) { _IS_ICON_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_ICON_PROPERTY"); _IS_ICON_PROPERTYReady = true; } return _IS_ICON_PROPERTYContent; } }
        private static Java.Lang.String _IS_ICON_PROPERTYContent = default;
        private static bool _IS_ICON_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#IS_MAXIMUM_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String IS_MAXIMUM_PROPERTY { get { if (!_IS_MAXIMUM_PROPERTYReady) { _IS_MAXIMUM_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_MAXIMUM_PROPERTY"); _IS_MAXIMUM_PROPERTYReady = true; } return _IS_MAXIMUM_PROPERTYContent; } }
        private static Java.Lang.String _IS_MAXIMUM_PROPERTYContent = default;
        private static bool _IS_MAXIMUM_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#IS_SELECTED_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String IS_SELECTED_PROPERTY { get { if (!_IS_SELECTED_PROPERTYReady) { _IS_SELECTED_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_SELECTED_PROPERTY"); _IS_SELECTED_PROPERTYReady = true; } return _IS_SELECTED_PROPERTYContent; } }
        private static Java.Lang.String _IS_SELECTED_PROPERTYContent = default;
        private static bool _IS_SELECTED_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#LAYERED_PANE_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String LAYERED_PANE_PROPERTY { get { if (!_LAYERED_PANE_PROPERTYReady) { _LAYERED_PANE_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LAYERED_PANE_PROPERTY"); _LAYERED_PANE_PROPERTYReady = true; } return _LAYERED_PANE_PROPERTYContent; } }
        private static Java.Lang.String _LAYERED_PANE_PROPERTYContent = default;
        private static bool _LAYERED_PANE_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#MENU_BAR_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String MENU_BAR_PROPERTY { get { if (!_MENU_BAR_PROPERTYReady) { _MENU_BAR_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MENU_BAR_PROPERTY"); _MENU_BAR_PROPERTYReady = true; } return _MENU_BAR_PROPERTYContent; } }
        private static Java.Lang.String _MENU_BAR_PROPERTYContent = default;
        private static bool _MENU_BAR_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#ROOT_PANE_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String ROOT_PANE_PROPERTY { get { if (!_ROOT_PANE_PROPERTYReady) { _ROOT_PANE_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROOT_PANE_PROPERTY"); _ROOT_PANE_PROPERTYReady = true; } return _ROOT_PANE_PROPERTYContent; } }
        private static Java.Lang.String _ROOT_PANE_PROPERTYContent = default;
        private static bool _ROOT_PANE_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#TITLE_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String TITLE_PROPERTY { get { if (!_TITLE_PROPERTYReady) { _TITLE_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TITLE_PROPERTY"); _TITLE_PROPERTYReady = true; } return _TITLE_PROPERTYContent; } }
        private static Java.Lang.String _TITLE_PROPERTYContent = default;
        private static bool _TITLE_PROPERTYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getContentPane()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setContentPane(java.awt.Container)"/>
        /// </summary>
        public Java.Awt.Container ContentPane
        {
            get { return IExecuteWithSignature<Java.Awt.Container>("getContentPane", "()Ljava/awt/Container;"); } set { IExecuteWithSignature("setContentPane", "(Ljava/awt/Container;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getDefaultCloseOperation()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setDefaultCloseOperation(int)"/>
        /// </summary>
        public int DefaultCloseOperation
        {
            get { return IExecuteWithSignature<int>("getDefaultCloseOperation", "()I"); } set { IExecuteWithSignature("setDefaultCloseOperation", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getDesktopIcon()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setDesktopIcon(javax.swing.JInternalFrame.JDesktopIcon)"/>
        /// </summary>
        public Javax.Swing.JInternalFrame.JDesktopIcon DesktopIcon
        {
            get { return IExecuteWithSignature<Javax.Swing.JInternalFrame.JDesktopIcon>("getDesktopIcon", "()Ljavax/swing/JInternalFrame$JDesktopIcon;"); } set { IExecuteWithSignature("setDesktopIcon", "(Ljavax/swing/JInternalFrame$JDesktopIcon;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getDesktopPane()"/> 
        /// </summary>
        public Javax.Swing.JDesktopPane DesktopPane
        {
            get { return IExecuteWithSignature<Javax.Swing.JDesktopPane>("getDesktopPane", "()Ljavax/swing/JDesktopPane;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getFocusOwner()"/> 
        /// </summary>
        public Java.Awt.Component FocusOwner
        {
            get { return IExecuteWithSignature<Java.Awt.Component>("getFocusOwner", "()Ljava/awt/Component;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getFrameIcon()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setFrameIcon(javax.swing.Icon)"/>
        /// </summary>
        public Javax.Swing.Icon FrameIcon
        {
            get { return IExecuteWithSignature<Javax.Swing.Icon>("getFrameIcon", "()Ljavax/swing/Icon;"); } set { IExecuteWithSignature("setFrameIcon", "(Ljavax/swing/Icon;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getGlassPane()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setGlassPane(java.awt.Component)"/>
        /// </summary>
        public Java.Awt.Component GlassPane
        {
            get { return IExecuteWithSignature<Java.Awt.Component>("getGlassPane", "()Ljava/awt/Component;"); } set { IExecuteWithSignature("setGlassPane", "(Ljava/awt/Component;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getInternalFrameListeners()"/> 
        /// </summary>
        public Javax.Swing.Event.InternalFrameListener[] InternalFrameListeners
        {
            get { return IExecuteWithSignatureArray<Javax.Swing.Event.InternalFrameListener>("getInternalFrameListeners", "()[Ljavax/swing/event/InternalFrameListener;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getJMenuBar()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setJMenuBar(javax.swing.JMenuBar)"/>
        /// </summary>
        public Javax.Swing.JMenuBar JMenuBar
        {
            get { return IExecuteWithSignature<Javax.Swing.JMenuBar>("getJMenuBar", "()Ljavax/swing/JMenuBar;"); } set { IExecuteWithSignature("setJMenuBar", "(Ljavax/swing/JMenuBar;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getLastCursor()"/> 
        /// </summary>
        public Java.Awt.Cursor LastCursor
        {
            get { return IExecuteWithSignature<Java.Awt.Cursor>("getLastCursor", "()Ljava/awt/Cursor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getLayer()"/> 
        /// </summary>
        public int Layer
        {
            get { return IExecuteWithSignature<int>("getLayer", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getLayeredPane()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setLayeredPane(javax.swing.JLayeredPane)"/>
        /// </summary>
        public Javax.Swing.JLayeredPane LayeredPane
        {
            get { return IExecuteWithSignature<Javax.Swing.JLayeredPane>("getLayeredPane", "()Ljavax/swing/JLayeredPane;"); } set { IExecuteWithSignature("setLayeredPane", "(Ljavax/swing/JLayeredPane;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getMostRecentFocusOwner()"/> 
        /// </summary>
        public Java.Awt.Component MostRecentFocusOwner
        {
            get { return IExecuteWithSignature<Java.Awt.Component>("getMostRecentFocusOwner", "()Ljava/awt/Component;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getNormalBounds()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setNormalBounds(java.awt.Rectangle)"/>
        /// </summary>
        public Java.Awt.Rectangle NormalBounds
        {
            get { return IExecuteWithSignature<Java.Awt.Rectangle>("getNormalBounds", "()Ljava/awt/Rectangle;"); } set { IExecuteWithSignature("setNormalBounds", "(Ljava/awt/Rectangle;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getTitle()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setTitle(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Title
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getTitle", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setTitle", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#getWarningString()"/> 
        /// </summary>
        public Java.Lang.String WarningString
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getWarningString", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isClosable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClosable()
        {
            return IExecuteWithSignature<bool>("isClosable", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isClosed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClosed()
        {
            return IExecuteWithSignature<bool>("isClosed", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isIcon()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsIcon()
        {
            return IExecuteWithSignature<bool>("isIcon", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isIconifiable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsIconifiable()
        {
            return IExecuteWithSignature<bool>("isIconifiable", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isMaximizable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMaximizable()
        {
            return IExecuteWithSignature<bool>("isMaximizable", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isMaximum()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMaximum()
        {
            return IExecuteWithSignature<bool>("isMaximum", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isResizable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsResizable()
        {
            return IExecuteWithSignature<bool>("isResizable", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#isSelected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSelected()
        {
            return IExecuteWithSignature<bool>("isSelected", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#addInternalFrameListener(javax.swing.event.InternalFrameListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Event.InternalFrameListener"/></param>
        public void AddInternalFrameListener(Javax.Swing.Event.InternalFrameListener arg0)
        {
            IExecuteWithSignature("addInternalFrameListener", "(Ljavax/swing/event/InternalFrameListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#dispose()"/>
        /// </summary>
        public new void Dispose()
        {
            IExecuteWithSignature("dispose", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#doDefaultCloseAction()"/>
        /// </summary>
        public void DoDefaultCloseAction()
        {
            IExecuteWithSignature("doDefaultCloseAction", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#moveToBack()"/>
        /// </summary>
        public void MoveToBack()
        {
            IExecuteWithSignature("moveToBack", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#moveToFront()"/>
        /// </summary>
        public void MoveToFront()
        {
            IExecuteWithSignature("moveToFront", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#pack()"/>
        /// </summary>
        public void Pack()
        {
            IExecuteWithSignature("pack", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#removeInternalFrameListener(javax.swing.event.InternalFrameListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Event.InternalFrameListener"/></param>
        public void RemoveInternalFrameListener(Javax.Swing.Event.InternalFrameListener arg0)
        {
            IExecuteWithSignature("removeInternalFrameListener", "(Ljavax/swing/event/InternalFrameListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#restoreSubcomponentFocus()"/>
        /// </summary>
        public void RestoreSubcomponentFocus()
        {
            IExecuteWithSignature("restoreSubcomponentFocus", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setClosable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClosable(bool arg0)
        {
            IExecuteWithSignature("setClosable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setClosed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <exception cref="Java.Beans.PropertyVetoException"/>
        public void SetClosed(bool arg0)
        {
            IExecuteWithSignature("setClosed", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setIcon(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <exception cref="Java.Beans.PropertyVetoException"/>
        public void SetIcon(bool arg0)
        {
            IExecuteWithSignature("setIcon", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setIconifiable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIconifiable(bool arg0)
        {
            IExecuteWithSignature("setIconifiable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setLayer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLayer(int arg0)
        {
            IExecuteWithSignature("setLayer", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setLayer(java.lang.Integer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Integer"/></param>
        public void SetLayer(Java.Lang.Integer arg0)
        {
            IExecuteWithSignature("setLayer", "(Ljava/lang/Integer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setMaximizable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMaximizable(bool arg0)
        {
            IExecuteWithSignature("setMaximizable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setMaximum(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <exception cref="Java.Beans.PropertyVetoException"/>
        public void SetMaximum(bool arg0)
        {
            IExecuteWithSignature("setMaximum", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setResizable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetResizable(bool arg0)
        {
            IExecuteWithSignature("setResizable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setSelected(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <exception cref="Java.Beans.PropertyVetoException"/>
        public void SetSelected(bool arg0)
        {
            IExecuteWithSignature("setSelected", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#setUI(javax.swing.plaf.InternalFrameUI)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Plaf.InternalFrameUI"/></param>
        public void SetUI(Javax.Swing.Plaf.InternalFrameUI arg0)
        {
            IExecuteWithSignature("setUI", "(Ljavax/swing/plaf/InternalFrameUI;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#toBack()"/>
        /// </summary>
        public void ToBack()
        {
            IExecuteWithSignature("toBack", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.html#toFront()"/>
        /// </summary>
        public void ToFront()
        {
            IExecuteWithSignature("toFront", "()V");
        }

        #endregion

        #region Nested classes
        #region JDesktopIcon implementation
        public partial class JDesktopIcon
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html#%3Cinit%3E(javax.swing.JInternalFrame)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.JInternalFrame"/></param>
            public JDesktopIcon(Javax.Swing.JInternalFrame arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Javax.Swing.JInternalFrame.JDesktopIcon"/> to <see cref="Javax.Accessibility.Accessible"/>
            /// </summary>
            public static implicit operator Javax.Accessibility.Accessible(Javax.Swing.JInternalFrame.JDesktopIcon t) => t.Cast<Javax.Accessibility.Accessible>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html#getDesktopPane()"/> 
            /// </summary>
            public Javax.Swing.JDesktopPane DesktopPane
            {
                get { return IExecuteWithSignature<Javax.Swing.JDesktopPane>("getDesktopPane", "()Ljavax/swing/JDesktopPane;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html#getInternalFrame()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html#setInternalFrame(javax.swing.JInternalFrame)"/>
            /// </summary>
            public Javax.Swing.JInternalFrame InternalFrame
            {
                get { return IExecuteWithSignature<Javax.Swing.JInternalFrame>("getInternalFrame", "()Ljavax/swing/JInternalFrame;"); } set { IExecuteWithSignature("setInternalFrame", "(Ljavax/swing/JInternalFrame;)V", value); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html#setUI(javax.swing.plaf.DesktopIconUI)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Plaf.DesktopIconUI"/></param>
            public void SetUI(Javax.Swing.Plaf.DesktopIconUI arg0)
            {
                IExecuteWithSignature("setUI", "(Ljavax/swing/plaf/DesktopIconUI;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}