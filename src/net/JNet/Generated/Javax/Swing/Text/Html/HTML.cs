/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Text.Html
{
    #region HTML
    public partial class HTML
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#NULL_ATTRIBUTE_VALUE"/>
        /// </summary>
        public static string NULL_ATTRIBUTE_VALUE { get { if (!_NULL_ATTRIBUTE_VALUEReady) { _NULL_ATTRIBUTE_VALUEContent = SGetField<string>(LocalBridgeClazz, "NULL_ATTRIBUTE_VALUE"); _NULL_ATTRIBUTE_VALUEReady = true; } return _NULL_ATTRIBUTE_VALUEContent; } }
        private static string _NULL_ATTRIBUTE_VALUEContent = default;
        private static bool _NULL_ATTRIBUTE_VALUEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#getAllAttributeKeys()"/> 
        /// </summary>
        public static Javax.Swing.Text.Html.HTML.Attribute[] AllAttributeKeys
        {
            get { return SExecuteArray<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "getAllAttributeKeys"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#getAllTags()"/> 
        /// </summary>
        public static Javax.Swing.Text.Html.HTML.Tag[] AllTags
        {
            get { return SExecuteArray<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "getAllTags"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#getIntegerAttributeValue(javax.swing.text.AttributeSet,javax.swing.text.html.HTML.Attribute,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <param name="arg1"><see cref="Javax.Swing.Text.Html.HTML.Attribute"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetIntegerAttributeValue(Javax.Swing.Text.AttributeSet arg0, Javax.Swing.Text.Html.HTML.Attribute arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "getIntegerAttributeValue", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#getAttributeKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Javax.Swing.Text.Html.HTML.Attribute"/></returns>
        public static Javax.Swing.Text.Html.HTML.Attribute GetAttributeKey(string arg0)
        {
            return SExecute<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "getAttributeKey", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.html#getTag(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Javax.Swing.Text.Html.HTML.Tag"/></returns>
        public static Javax.Swing.Text.Html.HTML.Tag GetTag(string arg0)
        {
            return SExecute<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "getTag", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Attribute
        public partial class Attribute
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ACTION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ACTION { get { if (!_ACTIONReady) { _ACTIONContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ACTION"); _ACTIONReady = true; } return _ACTIONContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ACTIONContent = default;
            private static bool _ACTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ALIGN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ALIGN { get { if (!_ALIGNReady) { _ALIGNContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ALIGN"); _ALIGNReady = true; } return _ALIGNContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ALIGNContent = default;
            private static bool _ALIGNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ALINK"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ALINK { get { if (!_ALINKReady) { _ALINKContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ALINK"); _ALINKReady = true; } return _ALINKContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ALINKContent = default;
            private static bool _ALINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ALT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ALT { get { if (!_ALTReady) { _ALTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ALT"); _ALTReady = true; } return _ALTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ALTContent = default;
            private static bool _ALTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ARCHIVE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ARCHIVE { get { if (!_ARCHIVEReady) { _ARCHIVEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ARCHIVE"); _ARCHIVEReady = true; } return _ARCHIVEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ARCHIVEContent = default;
            private static bool _ARCHIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#BACKGROUND"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute BACKGROUND { get { if (!_BACKGROUNDReady) { _BACKGROUNDContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "BACKGROUND"); _BACKGROUNDReady = true; } return _BACKGROUNDContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _BACKGROUNDContent = default;
            private static bool _BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#BGCOLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute BGCOLOR { get { if (!_BGCOLORReady) { _BGCOLORContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "BGCOLOR"); _BGCOLORReady = true; } return _BGCOLORContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _BGCOLORContent = default;
            private static bool _BGCOLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#BORDER"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute BORDER { get { if (!_BORDERReady) { _BORDERContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "BORDER"); _BORDERReady = true; } return _BORDERContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _BORDERContent = default;
            private static bool _BORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CELLPADDING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CELLPADDING { get { if (!_CELLPADDINGReady) { _CELLPADDINGContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CELLPADDING"); _CELLPADDINGReady = true; } return _CELLPADDINGContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CELLPADDINGContent = default;
            private static bool _CELLPADDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CELLSPACING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CELLSPACING { get { if (!_CELLSPACINGReady) { _CELLSPACINGContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CELLSPACING"); _CELLSPACINGReady = true; } return _CELLSPACINGContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CELLSPACINGContent = default;
            private static bool _CELLSPACINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CHECKED"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CHECKED { get { if (!_CHECKEDReady) { _CHECKEDContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CHECKED"); _CHECKEDReady = true; } return _CHECKEDContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CHECKEDContent = default;
            private static bool _CHECKEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CLASS"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CLASS { get { if (!_CLASSReady) { _CLASSContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CLASS"); _CLASSReady = true; } return _CLASSContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CLASSContent = default;
            private static bool _CLASSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CLASSID"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CLASSID { get { if (!_CLASSIDReady) { _CLASSIDContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CLASSID"); _CLASSIDReady = true; } return _CLASSIDContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CLASSIDContent = default;
            private static bool _CLASSIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CLEAR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CLEAR { get { if (!_CLEARReady) { _CLEARContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CLEAR"); _CLEARReady = true; } return _CLEARContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CLEARContent = default;
            private static bool _CLEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CODE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CODE { get { if (!_CODEReady) { _CODEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CODE"); _CODEReady = true; } return _CODEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CODEContent = default;
            private static bool _CODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CODEBASE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CODEBASE { get { if (!_CODEBASEReady) { _CODEBASEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CODEBASE"); _CODEBASEReady = true; } return _CODEBASEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CODEBASEContent = default;
            private static bool _CODEBASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CODETYPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CODETYPE { get { if (!_CODETYPEReady) { _CODETYPEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CODETYPE"); _CODETYPEReady = true; } return _CODETYPEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CODETYPEContent = default;
            private static bool _CODETYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COLOR { get { if (!_COLORReady) { _COLORContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COLOR"); _COLORReady = true; } return _COLORContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COLORContent = default;
            private static bool _COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COLS"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COLS { get { if (!_COLSReady) { _COLSContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COLS"); _COLSReady = true; } return _COLSContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COLSContent = default;
            private static bool _COLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COLSPAN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COLSPAN { get { if (!_COLSPANReady) { _COLSPANContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COLSPAN"); _COLSPANReady = true; } return _COLSPANContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COLSPANContent = default;
            private static bool _COLSPANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COMMENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COMMENT { get { if (!_COMMENTReady) { _COMMENTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COMMENT"); _COMMENTReady = true; } return _COMMENTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COMMENTContent = default;
            private static bool _COMMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COMPACT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COMPACT { get { if (!_COMPACTReady) { _COMPACTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COMPACT"); _COMPACTReady = true; } return _COMPACTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COMPACTContent = default;
            private static bool _COMPACTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#CONTENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute CONTENT { get { if (!_CONTENTReady) { _CONTENTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "CONTENT"); _CONTENTReady = true; } return _CONTENTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _CONTENTContent = default;
            private static bool _CONTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#COORDS"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute COORDS { get { if (!_COORDSReady) { _COORDSContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "COORDS"); _COORDSReady = true; } return _COORDSContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _COORDSContent = default;
            private static bool _COORDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#DATA"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _DATAContent = default;
            private static bool _DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#DECLARE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute DECLARE { get { if (!_DECLAREReady) { _DECLAREContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "DECLARE"); _DECLAREReady = true; } return _DECLAREContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _DECLAREContent = default;
            private static bool _DECLAREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#DIR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute DIR { get { if (!_DIRReady) { _DIRContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "DIR"); _DIRReady = true; } return _DIRContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _DIRContent = default;
            private static bool _DIRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#DUMMY"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute DUMMY { get { if (!_DUMMYReady) { _DUMMYContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "DUMMY"); _DUMMYReady = true; } return _DUMMYContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _DUMMYContent = default;
            private static bool _DUMMYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ENCTYPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ENCTYPE { get { if (!_ENCTYPEReady) { _ENCTYPEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ENCTYPE"); _ENCTYPEReady = true; } return _ENCTYPEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ENCTYPEContent = default;
            private static bool _ENCTYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ENDTAG"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ENDTAG { get { if (!_ENDTAGReady) { _ENDTAGContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ENDTAG"); _ENDTAGReady = true; } return _ENDTAGContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ENDTAGContent = default;
            private static bool _ENDTAGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#FACE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute FACE { get { if (!_FACEReady) { _FACEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "FACE"); _FACEReady = true; } return _FACEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _FACEContent = default;
            private static bool _FACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#FRAMEBORDER"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute FRAMEBORDER { get { if (!_FRAMEBORDERReady) { _FRAMEBORDERContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "FRAMEBORDER"); _FRAMEBORDERReady = true; } return _FRAMEBORDERContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _FRAMEBORDERContent = default;
            private static bool _FRAMEBORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#HALIGN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute HALIGN { get { if (!_HALIGNReady) { _HALIGNContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "HALIGN"); _HALIGNReady = true; } return _HALIGNContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _HALIGNContent = default;
            private static bool _HALIGNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#HEIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#HREF"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute HREF { get { if (!_HREFReady) { _HREFContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "HREF"); _HREFReady = true; } return _HREFContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _HREFContent = default;
            private static bool _HREFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#HSPACE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute HSPACE { get { if (!_HSPACEReady) { _HSPACEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "HSPACE"); _HSPACEReady = true; } return _HSPACEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _HSPACEContent = default;
            private static bool _HSPACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#HTTPEQUIV"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute HTTPEQUIV { get { if (!_HTTPEQUIVReady) { _HTTPEQUIVContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "HTTPEQUIV"); _HTTPEQUIVReady = true; } return _HTTPEQUIVContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _HTTPEQUIVContent = default;
            private static bool _HTTPEQUIVReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ID"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ID { get { if (!_IDReady) { _IDContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ID"); _IDReady = true; } return _IDContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _IDContent = default;
            private static bool _IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ISMAP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ISMAP { get { if (!_ISMAPReady) { _ISMAPContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ISMAP"); _ISMAPReady = true; } return _ISMAPContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ISMAPContent = default;
            private static bool _ISMAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#LANG"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute LANG { get { if (!_LANGReady) { _LANGContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "LANG"); _LANGReady = true; } return _LANGContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _LANGContent = default;
            private static bool _LANGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#LANGUAGE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute LANGUAGE { get { if (!_LANGUAGEReady) { _LANGUAGEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "LANGUAGE"); _LANGUAGEReady = true; } return _LANGUAGEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _LANGUAGEContent = default;
            private static bool _LANGUAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#LINK"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute LINK { get { if (!_LINKReady) { _LINKContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "LINK"); _LINKReady = true; } return _LINKContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _LINKContent = default;
            private static bool _LINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#LOWSRC"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute LOWSRC { get { if (!_LOWSRCReady) { _LOWSRCContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "LOWSRC"); _LOWSRCReady = true; } return _LOWSRCContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _LOWSRCContent = default;
            private static bool _LOWSRCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#MARGINHEIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute MARGINHEIGHT { get { if (!_MARGINHEIGHTReady) { _MARGINHEIGHTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "MARGINHEIGHT"); _MARGINHEIGHTReady = true; } return _MARGINHEIGHTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _MARGINHEIGHTContent = default;
            private static bool _MARGINHEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#MARGINWIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute MARGINWIDTH { get { if (!_MARGINWIDTHReady) { _MARGINWIDTHContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "MARGINWIDTH"); _MARGINWIDTHReady = true; } return _MARGINWIDTHContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _MARGINWIDTHContent = default;
            private static bool _MARGINWIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#MAXLENGTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute MAXLENGTH { get { if (!_MAXLENGTHReady) { _MAXLENGTHContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "MAXLENGTH"); _MAXLENGTHReady = true; } return _MAXLENGTHContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _MAXLENGTHContent = default;
            private static bool _MAXLENGTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#METHOD"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute METHOD { get { if (!_METHODReady) { _METHODContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "METHOD"); _METHODReady = true; } return _METHODContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _METHODContent = default;
            private static bool _METHODReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#MULTIPLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute MULTIPLE { get { if (!_MULTIPLEReady) { _MULTIPLEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "MULTIPLE"); _MULTIPLEReady = true; } return _MULTIPLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _MULTIPLEContent = default;
            private static bool _MULTIPLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#N"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute N { get { if (!_NReady) { _NContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "N"); _NReady = true; } return _NContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NContent = default;
            private static bool _NReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#NAME"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NAMEContent = default;
            private static bool _NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#NOHREF"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute NOHREF { get { if (!_NOHREFReady) { _NOHREFContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "NOHREF"); _NOHREFReady = true; } return _NOHREFContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NOHREFContent = default;
            private static bool _NOHREFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#NORESIZE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute NORESIZE { get { if (!_NORESIZEReady) { _NORESIZEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "NORESIZE"); _NORESIZEReady = true; } return _NORESIZEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NORESIZEContent = default;
            private static bool _NORESIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#NOSHADE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute NOSHADE { get { if (!_NOSHADEReady) { _NOSHADEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "NOSHADE"); _NOSHADEReady = true; } return _NOSHADEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NOSHADEContent = default;
            private static bool _NOSHADEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#NOWRAP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute NOWRAP { get { if (!_NOWRAPReady) { _NOWRAPContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "NOWRAP"); _NOWRAPReady = true; } return _NOWRAPContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _NOWRAPContent = default;
            private static bool _NOWRAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#PROMPT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute PROMPT { get { if (!_PROMPTReady) { _PROMPTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "PROMPT"); _PROMPTReady = true; } return _PROMPTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _PROMPTContent = default;
            private static bool _PROMPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#REL"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute REL { get { if (!_RELReady) { _RELContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "REL"); _RELReady = true; } return _RELContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _RELContent = default;
            private static bool _RELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#REV"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute REV { get { if (!_REVReady) { _REVContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "REV"); _REVReady = true; } return _REVContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _REVContent = default;
            private static bool _REVReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ROWS"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ROWS { get { if (!_ROWSReady) { _ROWSContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ROWS"); _ROWSReady = true; } return _ROWSContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ROWSContent = default;
            private static bool _ROWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#ROWSPAN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute ROWSPAN { get { if (!_ROWSPANReady) { _ROWSPANContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "ROWSPAN"); _ROWSPANReady = true; } return _ROWSPANContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _ROWSPANContent = default;
            private static bool _ROWSPANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SCROLLING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SCROLLING { get { if (!_SCROLLINGReady) { _SCROLLINGContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SCROLLING"); _SCROLLINGReady = true; } return _SCROLLINGContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SCROLLINGContent = default;
            private static bool _SCROLLINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SELECTED"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SELECTED { get { if (!_SELECTEDReady) { _SELECTEDContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SELECTED"); _SELECTEDReady = true; } return _SELECTEDContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SELECTEDContent = default;
            private static bool _SELECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SHAPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SHAPE { get { if (!_SHAPEReady) { _SHAPEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SHAPE"); _SHAPEReady = true; } return _SHAPEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SHAPEContent = default;
            private static bool _SHAPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SHAPES"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SHAPES { get { if (!_SHAPESReady) { _SHAPESContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SHAPES"); _SHAPESReady = true; } return _SHAPESContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SHAPESContent = default;
            private static bool _SHAPESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SIZE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SIZEContent = default;
            private static bool _SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#SRC"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute SRC { get { if (!_SRCReady) { _SRCContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "SRC"); _SRCReady = true; } return _SRCContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _SRCContent = default;
            private static bool _SRCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#STANDBY"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute STANDBY { get { if (!_STANDBYReady) { _STANDBYContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "STANDBY"); _STANDBYReady = true; } return _STANDBYContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _STANDBYContent = default;
            private static bool _STANDBYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#START"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute START { get { if (!_STARTReady) { _STARTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "START"); _STARTReady = true; } return _STARTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _STARTContent = default;
            private static bool _STARTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute STYLE { get { if (!_STYLEReady) { _STYLEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "STYLE"); _STYLEReady = true; } return _STYLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _STYLEContent = default;
            private static bool _STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#TARGET"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute TARGET { get { if (!_TARGETReady) { _TARGETContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "TARGET"); _TARGETReady = true; } return _TARGETContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _TARGETContent = default;
            private static bool _TARGETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#TEXT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute TEXT { get { if (!_TEXTReady) { _TEXTContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "TEXT"); _TEXTReady = true; } return _TEXTContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _TEXTContent = default;
            private static bool _TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#TITLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute TITLE { get { if (!_TITLEReady) { _TITLEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "TITLE"); _TITLEReady = true; } return _TITLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _TITLEContent = default;
            private static bool _TITLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#TYPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute TYPE { get { if (!_TYPEReady) { _TYPEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "TYPE"); _TYPEReady = true; } return _TYPEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _TYPEContent = default;
            private static bool _TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#USEMAP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute USEMAP { get { if (!_USEMAPReady) { _USEMAPContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "USEMAP"); _USEMAPReady = true; } return _USEMAPContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _USEMAPContent = default;
            private static bool _USEMAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VALIGN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VALIGN { get { if (!_VALIGNReady) { _VALIGNContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VALIGN"); _VALIGNReady = true; } return _VALIGNContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VALIGNContent = default;
            private static bool _VALIGNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VALUE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VALUE { get { if (!_VALUEReady) { _VALUEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VALUE"); _VALUEReady = true; } return _VALUEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VALUEContent = default;
            private static bool _VALUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VALUETYPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VALUETYPE { get { if (!_VALUETYPEReady) { _VALUETYPEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VALUETYPE"); _VALUETYPEReady = true; } return _VALUETYPEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VALUETYPEContent = default;
            private static bool _VALUETYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VERSION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VERSION { get { if (!_VERSIONReady) { _VERSIONContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VERSION"); _VERSIONReady = true; } return _VERSIONContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VERSIONContent = default;
            private static bool _VERSIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VLINK"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VLINK { get { if (!_VLINKReady) { _VLINKContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VLINK"); _VLINKReady = true; } return _VLINKContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VLINKContent = default;
            private static bool _VLINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#VSPACE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute VSPACE { get { if (!_VSPACEReady) { _VSPACEContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "VSPACE"); _VSPACEReady = true; } return _VSPACEContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _VSPACEContent = default;
            private static bool _VSPACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html#WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Attribute WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Javax.Swing.Text.Html.HTML.Attribute>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Javax.Swing.Text.Html.HTML.Attribute _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Tag
        public partial class Tag
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#A"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag A { get { if (!_AReady) { _AContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "A"); _AReady = true; } return _AContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _AContent = default;
            private static bool _AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#ADDRESS"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag ADDRESS { get { if (!_ADDRESSReady) { _ADDRESSContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "ADDRESS"); _ADDRESSReady = true; } return _ADDRESSContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _ADDRESSContent = default;
            private static bool _ADDRESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#APPLET"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag APPLET { get { if (!_APPLETReady) { _APPLETContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "APPLET"); _APPLETReady = true; } return _APPLETContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _APPLETContent = default;
            private static bool _APPLETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#AREA"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag AREA { get { if (!_AREAReady) { _AREAContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "AREA"); _AREAReady = true; } return _AREAContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _AREAContent = default;
            private static bool _AREAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#B"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag B { get { if (!_BReady) { _BContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "B"); _BReady = true; } return _BContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BContent = default;
            private static bool _BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BASE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BASE { get { if (!_BASEReady) { _BASEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BASE"); _BASEReady = true; } return _BASEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BASEContent = default;
            private static bool _BASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BASEFONT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BASEFONT { get { if (!_BASEFONTReady) { _BASEFONTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BASEFONT"); _BASEFONTReady = true; } return _BASEFONTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BASEFONTContent = default;
            private static bool _BASEFONTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BIG"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BIG { get { if (!_BIGReady) { _BIGContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BIG"); _BIGReady = true; } return _BIGContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BIGContent = default;
            private static bool _BIGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BLOCKQUOTE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BLOCKQUOTE { get { if (!_BLOCKQUOTEReady) { _BLOCKQUOTEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BLOCKQUOTE"); _BLOCKQUOTEReady = true; } return _BLOCKQUOTEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BLOCKQUOTEContent = default;
            private static bool _BLOCKQUOTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BODY"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BODY { get { if (!_BODYReady) { _BODYContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BODY"); _BODYReady = true; } return _BODYContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BODYContent = default;
            private static bool _BODYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#BR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag BR { get { if (!_BRReady) { _BRContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "BR"); _BRReady = true; } return _BRContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _BRContent = default;
            private static bool _BRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#CAPTION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag CAPTION { get { if (!_CAPTIONReady) { _CAPTIONContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "CAPTION"); _CAPTIONReady = true; } return _CAPTIONContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _CAPTIONContent = default;
            private static bool _CAPTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#CENTER"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag CENTER { get { if (!_CENTERReady) { _CENTERContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "CENTER"); _CENTERReady = true; } return _CENTERContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _CENTERContent = default;
            private static bool _CENTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#CITE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag CITE { get { if (!_CITEReady) { _CITEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "CITE"); _CITEReady = true; } return _CITEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _CITEContent = default;
            private static bool _CITEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#CODE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag CODE { get { if (!_CODEReady) { _CODEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "CODE"); _CODEReady = true; } return _CODEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _CODEContent = default;
            private static bool _CODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#COMMENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag COMMENT { get { if (!_COMMENTReady) { _COMMENTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "COMMENT"); _COMMENTReady = true; } return _COMMENTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _COMMENTContent = default;
            private static bool _COMMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#CONTENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag CONTENT { get { if (!_CONTENTReady) { _CONTENTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "CONTENT"); _CONTENTReady = true; } return _CONTENTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _CONTENTContent = default;
            private static bool _CONTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DD"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DD { get { if (!_DDReady) { _DDContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DD"); _DDReady = true; } return _DDContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DDContent = default;
            private static bool _DDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DFN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DFN { get { if (!_DFNReady) { _DFNContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DFN"); _DFNReady = true; } return _DFNContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DFNContent = default;
            private static bool _DFNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DIR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DIR { get { if (!_DIRReady) { _DIRContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DIR"); _DIRReady = true; } return _DIRContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DIRContent = default;
            private static bool _DIRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DIV"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DIV { get { if (!_DIVReady) { _DIVContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DIV"); _DIVReady = true; } return _DIVContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DIVContent = default;
            private static bool _DIVReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DL"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DL { get { if (!_DLReady) { _DLContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DL"); _DLReady = true; } return _DLContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DLContent = default;
            private static bool _DLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#DT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag DT { get { if (!_DTReady) { _DTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "DT"); _DTReady = true; } return _DTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _DTContent = default;
            private static bool _DTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#EM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag EM { get { if (!_EMReady) { _EMContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "EM"); _EMReady = true; } return _EMContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _EMContent = default;
            private static bool _EMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#FONT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag FONT { get { if (!_FONTReady) { _FONTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "FONT"); _FONTReady = true; } return _FONTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _FONTContent = default;
            private static bool _FONTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#FORM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag FORM { get { if (!_FORMReady) { _FORMContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "FORM"); _FORMReady = true; } return _FORMContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _FORMContent = default;
            private static bool _FORMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#FRAME"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag FRAME { get { if (!_FRAMEReady) { _FRAMEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "FRAME"); _FRAMEReady = true; } return _FRAMEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _FRAMEContent = default;
            private static bool _FRAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#FRAMESET"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag FRAMESET { get { if (!_FRAMESETReady) { _FRAMESETContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "FRAMESET"); _FRAMESETReady = true; } return _FRAMESETContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _FRAMESETContent = default;
            private static bool _FRAMESETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H1"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H1 { get { if (!_H1Ready) { _H1Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H1"); _H1Ready = true; } return _H1Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H1Content = default;
            private static bool _H1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H2"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H2 { get { if (!_H2Ready) { _H2Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H2"); _H2Ready = true; } return _H2Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H2Content = default;
            private static bool _H2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H3"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H3 { get { if (!_H3Ready) { _H3Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H3"); _H3Ready = true; } return _H3Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H3Content = default;
            private static bool _H3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H4"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H4 { get { if (!_H4Ready) { _H4Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H4"); _H4Ready = true; } return _H4Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H4Content = default;
            private static bool _H4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H5"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H5 { get { if (!_H5Ready) { _H5Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H5"); _H5Ready = true; } return _H5Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H5Content = default;
            private static bool _H5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#H6"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag H6 { get { if (!_H6Ready) { _H6Content = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "H6"); _H6Ready = true; } return _H6Content; } }
            private static Javax.Swing.Text.Html.HTML.Tag _H6Content = default;
            private static bool _H6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#HEAD"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag HEAD { get { if (!_HEADReady) { _HEADContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "HEAD"); _HEADReady = true; } return _HEADContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _HEADContent = default;
            private static bool _HEADReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#HR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag HR { get { if (!_HRReady) { _HRContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "HR"); _HRReady = true; } return _HRContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _HRContent = default;
            private static bool _HRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#HTML"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag HTMLField { get { if (!_HTMLFieldReady) { _HTMLFieldContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "HTML"); _HTMLFieldReady = true; } return _HTMLFieldContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _HTMLFieldContent = default;
            private static bool _HTMLFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#I"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag I { get { if (!_IReady) { _IContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "I"); _IReady = true; } return _IContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _IContent = default;
            private static bool _IReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#IMG"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag IMG { get { if (!_IMGReady) { _IMGContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "IMG"); _IMGReady = true; } return _IMGContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _IMGContent = default;
            private static bool _IMGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#IMPLIED"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag IMPLIED { get { if (!_IMPLIEDReady) { _IMPLIEDContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "IMPLIED"); _IMPLIEDReady = true; } return _IMPLIEDContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _IMPLIEDContent = default;
            private static bool _IMPLIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#INPUT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag INPUT { get { if (!_INPUTReady) { _INPUTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "INPUT"); _INPUTReady = true; } return _INPUTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _INPUTContent = default;
            private static bool _INPUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#ISINDEX"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag ISINDEX { get { if (!_ISINDEXReady) { _ISINDEXContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "ISINDEX"); _ISINDEXReady = true; } return _ISINDEXContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _ISINDEXContent = default;
            private static bool _ISINDEXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#KBD"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag KBD { get { if (!_KBDReady) { _KBDContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "KBD"); _KBDReady = true; } return _KBDContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _KBDContent = default;
            private static bool _KBDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#LI"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag LI { get { if (!_LIReady) { _LIContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "LI"); _LIReady = true; } return _LIContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _LIContent = default;
            private static bool _LIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#LINK"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag LINK { get { if (!_LINKReady) { _LINKContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "LINK"); _LINKReady = true; } return _LINKContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _LINKContent = default;
            private static bool _LINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#MAP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag MAP { get { if (!_MAPReady) { _MAPContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "MAP"); _MAPReady = true; } return _MAPContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _MAPContent = default;
            private static bool _MAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#MENU"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag MENU { get { if (!_MENUReady) { _MENUContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "MENU"); _MENUReady = true; } return _MENUContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _MENUContent = default;
            private static bool _MENUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#META"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag META { get { if (!_METAReady) { _METAContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "META"); _METAReady = true; } return _METAContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _METAContent = default;
            private static bool _METAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#NOFRAMES"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag NOFRAMES { get { if (!_NOFRAMESReady) { _NOFRAMESContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "NOFRAMES"); _NOFRAMESReady = true; } return _NOFRAMESContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _NOFRAMESContent = default;
            private static bool _NOFRAMESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#OBJECT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag OBJECT { get { if (!_OBJECTReady) { _OBJECTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "OBJECT"); _OBJECTReady = true; } return _OBJECTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _OBJECTContent = default;
            private static bool _OBJECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#OL"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag OL { get { if (!_OLReady) { _OLContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "OL"); _OLReady = true; } return _OLContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _OLContent = default;
            private static bool _OLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#OPTION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag OPTION { get { if (!_OPTIONReady) { _OPTIONContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "OPTION"); _OPTIONReady = true; } return _OPTIONContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _OPTIONContent = default;
            private static bool _OPTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#P"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag P { get { if (!_PReady) { _PContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "P"); _PReady = true; } return _PContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _PContent = default;
            private static bool _PReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#PARAM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag PARAM { get { if (!_PARAMReady) { _PARAMContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "PARAM"); _PARAMReady = true; } return _PARAMContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _PARAMContent = default;
            private static bool _PARAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#PRE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag PRE { get { if (!_PREReady) { _PREContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "PRE"); _PREReady = true; } return _PREContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _PREContent = default;
            private static bool _PREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#S"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag S { get { if (!_SReady) { _SContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "S"); _SReady = true; } return _SContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SContent = default;
            private static bool _SReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SAMP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SAMP { get { if (!_SAMPReady) { _SAMPContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SAMP"); _SAMPReady = true; } return _SAMPContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SAMPContent = default;
            private static bool _SAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SCRIPT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SCRIPT { get { if (!_SCRIPTReady) { _SCRIPTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SCRIPT"); _SCRIPTReady = true; } return _SCRIPTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SCRIPTContent = default;
            private static bool _SCRIPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SELECT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SELECT { get { if (!_SELECTReady) { _SELECTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SELECT"); _SELECTReady = true; } return _SELECTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SELECTContent = default;
            private static bool _SELECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SMALL"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SMALL { get { if (!_SMALLReady) { _SMALLContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SMALL"); _SMALLReady = true; } return _SMALLContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SMALLContent = default;
            private static bool _SMALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SPAN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SPAN { get { if (!_SPANReady) { _SPANContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SPAN"); _SPANReady = true; } return _SPANContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SPANContent = default;
            private static bool _SPANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#STRIKE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag STRIKE { get { if (!_STRIKEReady) { _STRIKEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "STRIKE"); _STRIKEReady = true; } return _STRIKEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _STRIKEContent = default;
            private static bool _STRIKEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#STRONG"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag STRONG { get { if (!_STRONGReady) { _STRONGContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "STRONG"); _STRONGReady = true; } return _STRONGContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _STRONGContent = default;
            private static bool _STRONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag STYLE { get { if (!_STYLEReady) { _STYLEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "STYLE"); _STYLEReady = true; } return _STYLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _STYLEContent = default;
            private static bool _STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SUB"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SUB { get { if (!_SUBReady) { _SUBContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SUB"); _SUBReady = true; } return _SUBContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SUBContent = default;
            private static bool _SUBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#SUP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag SUP { get { if (!_SUPReady) { _SUPContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "SUP"); _SUPReady = true; } return _SUPContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _SUPContent = default;
            private static bool _SUPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TABLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TABLE { get { if (!_TABLEReady) { _TABLEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TABLE"); _TABLEReady = true; } return _TABLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TABLEContent = default;
            private static bool _TABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TD"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TD { get { if (!_TDReady) { _TDContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TD"); _TDReady = true; } return _TDContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TDContent = default;
            private static bool _TDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TEXTAREA"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TEXTAREA { get { if (!_TEXTAREAReady) { _TEXTAREAContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TEXTAREA"); _TEXTAREAReady = true; } return _TEXTAREAContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TEXTAREAContent = default;
            private static bool _TEXTAREAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TH { get { if (!_THReady) { _THContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TH"); _THReady = true; } return _THContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _THContent = default;
            private static bool _THReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TITLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TITLE { get { if (!_TITLEReady) { _TITLEContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TITLE"); _TITLEReady = true; } return _TITLEContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TITLEContent = default;
            private static bool _TITLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TR { get { if (!_TRReady) { _TRContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TR"); _TRReady = true; } return _TRContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TRContent = default;
            private static bool _TRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#TT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag TT { get { if (!_TTReady) { _TTContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "TT"); _TTReady = true; } return _TTContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _TTContent = default;
            private static bool _TTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#U"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag U { get { if (!_UReady) { _UContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "U"); _UReady = true; } return _UContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _UContent = default;
            private static bool _UReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#UL"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag UL { get { if (!_ULReady) { _ULContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "UL"); _ULReady = true; } return _ULContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _ULContent = default;
            private static bool _ULReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#VAR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.HTML.Tag VAR { get { if (!_VARReady) { _VARContent = SGetField<Javax.Swing.Text.Html.HTML.Tag>(LocalBridgeClazz, "VAR"); _VARReady = true; } return _VARContent; } }
            private static Javax.Swing.Text.Html.HTML.Tag _VARContent = default;
            private static bool _VARReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#breaksFlow()"/>
            /// </summary>

            /// <returns><see cref="bool"/></returns>
            public bool BreaksFlow()
            {
                return IExecute<bool>("breaksFlow");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#isBlock()"/>
            /// </summary>

            /// <returns><see cref="bool"/></returns>
            public bool IsBlock()
            {
                return IExecute<bool>("isBlock");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html#isPreformatted()"/>
            /// </summary>

            /// <returns><see cref="bool"/></returns>
            public bool IsPreformatted()
            {
                return IExecute<bool>("isPreformatted");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UnknownTag
        public partial class UnknownTag
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/HTML.UnknownTag.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            public UnknownTag(string arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Javax.Swing.Text.Html.HTML.UnknownTag"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Javax.Swing.Text.Html.HTML.UnknownTag t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}