/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.4.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Text.Html
{
    #region CSS
    public partial class CSS
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.html#getAllAttributeKeys()"/> 
        /// </summary>
        public static Javax.Swing.Text.Html.CSS.Attribute[] AllAttributeKeys
        {
            get { return SExecuteWithSignatureArray<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "getAllAttributeKeys", "()[Ljavax/swing/text/html/CSS$Attribute;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.html#getAttribute(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Javax.Swing.Text.Html.CSS.Attribute"/></returns>
        public static Javax.Swing.Text.Html.CSS.Attribute GetAttribute(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "getAttribute", "(Ljava/lang/String;)Ljavax/swing/text/html/CSS$Attribute;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Attribute
        public partial class Attribute
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND { get { if (!_BACKGROUNDReady) { _BACKGROUNDContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND"); _BACKGROUNDReady = true; } return _BACKGROUNDContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUNDContent = default;
            private static bool _BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND_ATTACHMENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND_ATTACHMENT { get { if (!_BACKGROUND_ATTACHMENTReady) { _BACKGROUND_ATTACHMENTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND_ATTACHMENT"); _BACKGROUND_ATTACHMENTReady = true; } return _BACKGROUND_ATTACHMENTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUND_ATTACHMENTContent = default;
            private static bool _BACKGROUND_ATTACHMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND_COLOR { get { if (!_BACKGROUND_COLORReady) { _BACKGROUND_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND_COLOR"); _BACKGROUND_COLORReady = true; } return _BACKGROUND_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUND_COLORContent = default;
            private static bool _BACKGROUND_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND_IMAGE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND_IMAGE { get { if (!_BACKGROUND_IMAGEReady) { _BACKGROUND_IMAGEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND_IMAGE"); _BACKGROUND_IMAGEReady = true; } return _BACKGROUND_IMAGEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUND_IMAGEContent = default;
            private static bool _BACKGROUND_IMAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND_POSITION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND_POSITION { get { if (!_BACKGROUND_POSITIONReady) { _BACKGROUND_POSITIONContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND_POSITION"); _BACKGROUND_POSITIONReady = true; } return _BACKGROUND_POSITIONContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUND_POSITIONContent = default;
            private static bool _BACKGROUND_POSITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BACKGROUND_REPEAT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BACKGROUND_REPEAT { get { if (!_BACKGROUND_REPEATReady) { _BACKGROUND_REPEATContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BACKGROUND_REPEAT"); _BACKGROUND_REPEATReady = true; } return _BACKGROUND_REPEATContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BACKGROUND_REPEATContent = default;
            private static bool _BACKGROUND_REPEATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER { get { if (!_BORDERReady) { _BORDERContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER"); _BORDERReady = true; } return _BORDERContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDERContent = default;
            private static bool _BORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_BOTTOM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_BOTTOM { get { if (!_BORDER_BOTTOMReady) { _BORDER_BOTTOMContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_BOTTOM"); _BORDER_BOTTOMReady = true; } return _BORDER_BOTTOMContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_BOTTOMContent = default;
            private static bool _BORDER_BOTTOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_BOTTOM_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_BOTTOM_COLOR { get { if (!_BORDER_BOTTOM_COLORReady) { _BORDER_BOTTOM_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_BOTTOM_COLOR"); _BORDER_BOTTOM_COLORReady = true; } return _BORDER_BOTTOM_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_BOTTOM_COLORContent = default;
            private static bool _BORDER_BOTTOM_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_BOTTOM_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_BOTTOM_STYLE { get { if (!_BORDER_BOTTOM_STYLEReady) { _BORDER_BOTTOM_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_BOTTOM_STYLE"); _BORDER_BOTTOM_STYLEReady = true; } return _BORDER_BOTTOM_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_BOTTOM_STYLEContent = default;
            private static bool _BORDER_BOTTOM_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_BOTTOM_WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_BOTTOM_WIDTH { get { if (!_BORDER_BOTTOM_WIDTHReady) { _BORDER_BOTTOM_WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_BOTTOM_WIDTH"); _BORDER_BOTTOM_WIDTHReady = true; } return _BORDER_BOTTOM_WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_BOTTOM_WIDTHContent = default;
            private static bool _BORDER_BOTTOM_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_COLOR { get { if (!_BORDER_COLORReady) { _BORDER_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_COLOR"); _BORDER_COLORReady = true; } return _BORDER_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_COLORContent = default;
            private static bool _BORDER_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_LEFT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_LEFT { get { if (!_BORDER_LEFTReady) { _BORDER_LEFTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_LEFT"); _BORDER_LEFTReady = true; } return _BORDER_LEFTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_LEFTContent = default;
            private static bool _BORDER_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_LEFT_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_LEFT_COLOR { get { if (!_BORDER_LEFT_COLORReady) { _BORDER_LEFT_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_LEFT_COLOR"); _BORDER_LEFT_COLORReady = true; } return _BORDER_LEFT_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_LEFT_COLORContent = default;
            private static bool _BORDER_LEFT_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_LEFT_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_LEFT_STYLE { get { if (!_BORDER_LEFT_STYLEReady) { _BORDER_LEFT_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_LEFT_STYLE"); _BORDER_LEFT_STYLEReady = true; } return _BORDER_LEFT_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_LEFT_STYLEContent = default;
            private static bool _BORDER_LEFT_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_LEFT_WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_LEFT_WIDTH { get { if (!_BORDER_LEFT_WIDTHReady) { _BORDER_LEFT_WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_LEFT_WIDTH"); _BORDER_LEFT_WIDTHReady = true; } return _BORDER_LEFT_WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_LEFT_WIDTHContent = default;
            private static bool _BORDER_LEFT_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_RIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_RIGHT { get { if (!_BORDER_RIGHTReady) { _BORDER_RIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_RIGHT"); _BORDER_RIGHTReady = true; } return _BORDER_RIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_RIGHTContent = default;
            private static bool _BORDER_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_RIGHT_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_RIGHT_COLOR { get { if (!_BORDER_RIGHT_COLORReady) { _BORDER_RIGHT_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_RIGHT_COLOR"); _BORDER_RIGHT_COLORReady = true; } return _BORDER_RIGHT_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_RIGHT_COLORContent = default;
            private static bool _BORDER_RIGHT_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_RIGHT_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_RIGHT_STYLE { get { if (!_BORDER_RIGHT_STYLEReady) { _BORDER_RIGHT_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_RIGHT_STYLE"); _BORDER_RIGHT_STYLEReady = true; } return _BORDER_RIGHT_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_RIGHT_STYLEContent = default;
            private static bool _BORDER_RIGHT_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_RIGHT_WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_RIGHT_WIDTH { get { if (!_BORDER_RIGHT_WIDTHReady) { _BORDER_RIGHT_WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_RIGHT_WIDTH"); _BORDER_RIGHT_WIDTHReady = true; } return _BORDER_RIGHT_WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_RIGHT_WIDTHContent = default;
            private static bool _BORDER_RIGHT_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_STYLE { get { if (!_BORDER_STYLEReady) { _BORDER_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_STYLE"); _BORDER_STYLEReady = true; } return _BORDER_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_STYLEContent = default;
            private static bool _BORDER_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_TOP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_TOP { get { if (!_BORDER_TOPReady) { _BORDER_TOPContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_TOP"); _BORDER_TOPReady = true; } return _BORDER_TOPContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_TOPContent = default;
            private static bool _BORDER_TOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_TOP_COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_TOP_COLOR { get { if (!_BORDER_TOP_COLORReady) { _BORDER_TOP_COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_TOP_COLOR"); _BORDER_TOP_COLORReady = true; } return _BORDER_TOP_COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_TOP_COLORContent = default;
            private static bool _BORDER_TOP_COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_TOP_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_TOP_STYLE { get { if (!_BORDER_TOP_STYLEReady) { _BORDER_TOP_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_TOP_STYLE"); _BORDER_TOP_STYLEReady = true; } return _BORDER_TOP_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_TOP_STYLEContent = default;
            private static bool _BORDER_TOP_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_TOP_WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_TOP_WIDTH { get { if (!_BORDER_TOP_WIDTHReady) { _BORDER_TOP_WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_TOP_WIDTH"); _BORDER_TOP_WIDTHReady = true; } return _BORDER_TOP_WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_TOP_WIDTHContent = default;
            private static bool _BORDER_TOP_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#BORDER_WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute BORDER_WIDTH { get { if (!_BORDER_WIDTHReady) { _BORDER_WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "BORDER_WIDTH"); _BORDER_WIDTHReady = true; } return _BORDER_WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _BORDER_WIDTHContent = default;
            private static bool _BORDER_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#CLEAR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute CLEAR { get { if (!_CLEARReady) { _CLEARContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "CLEAR"); _CLEARReady = true; } return _CLEARContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _CLEARContent = default;
            private static bool _CLEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#COLOR"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute COLOR { get { if (!_COLORReady) { _COLORContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "COLOR"); _COLORReady = true; } return _COLORContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _COLORContent = default;
            private static bool _COLORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#DISPLAY"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute DISPLAY { get { if (!_DISPLAYReady) { _DISPLAYContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "DISPLAY"); _DISPLAYReady = true; } return _DISPLAYContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _DISPLAYContent = default;
            private static bool _DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FLOAT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FLOAT { get { if (!_FLOATReady) { _FLOATContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FLOAT"); _FLOATReady = true; } return _FLOATContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FLOATContent = default;
            private static bool _FLOATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT { get { if (!_FONTReady) { _FONTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT"); _FONTReady = true; } return _FONTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONTContent = default;
            private static bool _FONTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT_FAMILY"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT_FAMILY { get { if (!_FONT_FAMILYReady) { _FONT_FAMILYContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT_FAMILY"); _FONT_FAMILYReady = true; } return _FONT_FAMILYContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONT_FAMILYContent = default;
            private static bool _FONT_FAMILYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT_SIZE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT_SIZE { get { if (!_FONT_SIZEReady) { _FONT_SIZEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT_SIZE"); _FONT_SIZEReady = true; } return _FONT_SIZEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONT_SIZEContent = default;
            private static bool _FONT_SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT_STYLE { get { if (!_FONT_STYLEReady) { _FONT_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT_STYLE"); _FONT_STYLEReady = true; } return _FONT_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONT_STYLEContent = default;
            private static bool _FONT_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT_VARIANT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT_VARIANT { get { if (!_FONT_VARIANTReady) { _FONT_VARIANTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT_VARIANT"); _FONT_VARIANTReady = true; } return _FONT_VARIANTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONT_VARIANTContent = default;
            private static bool _FONT_VARIANTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#FONT_WEIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute FONT_WEIGHT { get { if (!_FONT_WEIGHTReady) { _FONT_WEIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "FONT_WEIGHT"); _FONT_WEIGHTReady = true; } return _FONT_WEIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _FONT_WEIGHTContent = default;
            private static bool _FONT_WEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#HEIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LETTER_SPACING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LETTER_SPACING { get { if (!_LETTER_SPACINGReady) { _LETTER_SPACINGContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LETTER_SPACING"); _LETTER_SPACINGReady = true; } return _LETTER_SPACINGContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LETTER_SPACINGContent = default;
            private static bool _LETTER_SPACINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LINE_HEIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LINE_HEIGHT { get { if (!_LINE_HEIGHTReady) { _LINE_HEIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LINE_HEIGHT"); _LINE_HEIGHTReady = true; } return _LINE_HEIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LINE_HEIGHTContent = default;
            private static bool _LINE_HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LIST_STYLE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LIST_STYLE { get { if (!_LIST_STYLEReady) { _LIST_STYLEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LIST_STYLE"); _LIST_STYLEReady = true; } return _LIST_STYLEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LIST_STYLEContent = default;
            private static bool _LIST_STYLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LIST_STYLE_IMAGE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LIST_STYLE_IMAGE { get { if (!_LIST_STYLE_IMAGEReady) { _LIST_STYLE_IMAGEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LIST_STYLE_IMAGE"); _LIST_STYLE_IMAGEReady = true; } return _LIST_STYLE_IMAGEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LIST_STYLE_IMAGEContent = default;
            private static bool _LIST_STYLE_IMAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LIST_STYLE_POSITION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LIST_STYLE_POSITION { get { if (!_LIST_STYLE_POSITIONReady) { _LIST_STYLE_POSITIONContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LIST_STYLE_POSITION"); _LIST_STYLE_POSITIONReady = true; } return _LIST_STYLE_POSITIONContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LIST_STYLE_POSITIONContent = default;
            private static bool _LIST_STYLE_POSITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#LIST_STYLE_TYPE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute LIST_STYLE_TYPE { get { if (!_LIST_STYLE_TYPEReady) { _LIST_STYLE_TYPEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "LIST_STYLE_TYPE"); _LIST_STYLE_TYPEReady = true; } return _LIST_STYLE_TYPEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _LIST_STYLE_TYPEContent = default;
            private static bool _LIST_STYLE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#MARGIN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute MARGIN { get { if (!_MARGINReady) { _MARGINContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "MARGIN"); _MARGINReady = true; } return _MARGINContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _MARGINContent = default;
            private static bool _MARGINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#MARGIN_BOTTOM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute MARGIN_BOTTOM { get { if (!_MARGIN_BOTTOMReady) { _MARGIN_BOTTOMContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "MARGIN_BOTTOM"); _MARGIN_BOTTOMReady = true; } return _MARGIN_BOTTOMContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _MARGIN_BOTTOMContent = default;
            private static bool _MARGIN_BOTTOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#MARGIN_LEFT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute MARGIN_LEFT { get { if (!_MARGIN_LEFTReady) { _MARGIN_LEFTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "MARGIN_LEFT"); _MARGIN_LEFTReady = true; } return _MARGIN_LEFTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _MARGIN_LEFTContent = default;
            private static bool _MARGIN_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#MARGIN_RIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute MARGIN_RIGHT { get { if (!_MARGIN_RIGHTReady) { _MARGIN_RIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "MARGIN_RIGHT"); _MARGIN_RIGHTReady = true; } return _MARGIN_RIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _MARGIN_RIGHTContent = default;
            private static bool _MARGIN_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#MARGIN_TOP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute MARGIN_TOP { get { if (!_MARGIN_TOPReady) { _MARGIN_TOPContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "MARGIN_TOP"); _MARGIN_TOPReady = true; } return _MARGIN_TOPContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _MARGIN_TOPContent = default;
            private static bool _MARGIN_TOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#PADDING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute PADDING { get { if (!_PADDINGReady) { _PADDINGContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "PADDING"); _PADDINGReady = true; } return _PADDINGContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _PADDINGContent = default;
            private static bool _PADDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#PADDING_BOTTOM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute PADDING_BOTTOM { get { if (!_PADDING_BOTTOMReady) { _PADDING_BOTTOMContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "PADDING_BOTTOM"); _PADDING_BOTTOMReady = true; } return _PADDING_BOTTOMContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _PADDING_BOTTOMContent = default;
            private static bool _PADDING_BOTTOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#PADDING_LEFT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute PADDING_LEFT { get { if (!_PADDING_LEFTReady) { _PADDING_LEFTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "PADDING_LEFT"); _PADDING_LEFTReady = true; } return _PADDING_LEFTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _PADDING_LEFTContent = default;
            private static bool _PADDING_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#PADDING_RIGHT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute PADDING_RIGHT { get { if (!_PADDING_RIGHTReady) { _PADDING_RIGHTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "PADDING_RIGHT"); _PADDING_RIGHTReady = true; } return _PADDING_RIGHTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _PADDING_RIGHTContent = default;
            private static bool _PADDING_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#PADDING_TOP"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute PADDING_TOP { get { if (!_PADDING_TOPReady) { _PADDING_TOPContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "PADDING_TOP"); _PADDING_TOPReady = true; } return _PADDING_TOPContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _PADDING_TOPContent = default;
            private static bool _PADDING_TOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#TEXT_ALIGN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute TEXT_ALIGN { get { if (!_TEXT_ALIGNReady) { _TEXT_ALIGNContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "TEXT_ALIGN"); _TEXT_ALIGNReady = true; } return _TEXT_ALIGNContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _TEXT_ALIGNContent = default;
            private static bool _TEXT_ALIGNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#TEXT_DECORATION"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute TEXT_DECORATION { get { if (!_TEXT_DECORATIONReady) { _TEXT_DECORATIONContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "TEXT_DECORATION"); _TEXT_DECORATIONReady = true; } return _TEXT_DECORATIONContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _TEXT_DECORATIONContent = default;
            private static bool _TEXT_DECORATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#TEXT_INDENT"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute TEXT_INDENT { get { if (!_TEXT_INDENTReady) { _TEXT_INDENTContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "TEXT_INDENT"); _TEXT_INDENTReady = true; } return _TEXT_INDENTContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _TEXT_INDENTContent = default;
            private static bool _TEXT_INDENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#TEXT_TRANSFORM"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute TEXT_TRANSFORM { get { if (!_TEXT_TRANSFORMReady) { _TEXT_TRANSFORMContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "TEXT_TRANSFORM"); _TEXT_TRANSFORMReady = true; } return _TEXT_TRANSFORMContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _TEXT_TRANSFORMContent = default;
            private static bool _TEXT_TRANSFORMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#VERTICAL_ALIGN"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute VERTICAL_ALIGN { get { if (!_VERTICAL_ALIGNReady) { _VERTICAL_ALIGNContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "VERTICAL_ALIGN"); _VERTICAL_ALIGNReady = true; } return _VERTICAL_ALIGNContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _VERTICAL_ALIGNContent = default;
            private static bool _VERTICAL_ALIGNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#WHITE_SPACE"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute WHITE_SPACE { get { if (!_WHITE_SPACEReady) { _WHITE_SPACEContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "WHITE_SPACE"); _WHITE_SPACEReady = true; } return _WHITE_SPACEContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _WHITE_SPACEContent = default;
            private static bool _WHITE_SPACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#WIDTH"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#WORD_SPACING"/>
            /// </summary>
            public static Javax.Swing.Text.Html.CSS.Attribute WORD_SPACING { get { if (!_WORD_SPACINGReady) { _WORD_SPACINGContent = SGetField<Javax.Swing.Text.Html.CSS.Attribute>(LocalBridgeClazz, "WORD_SPACING"); _WORD_SPACINGReady = true; } return _WORD_SPACINGContent; } }
            private static Javax.Swing.Text.Html.CSS.Attribute _WORD_SPACINGContent = default;
            private static bool _WORD_SPACINGReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#getDefaultValue()"/> 
            /// </summary>
            public Java.Lang.String DefaultValue
            {
                get { return IExecuteWithSignature<Java.Lang.String>("getDefaultValue", "()Ljava/lang/String;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/CSS.Attribute.html#isInherited()"/>
            /// </summary>

            /// <returns><see cref="bool"/></returns>
            public bool IsInherited()
            {
                return IExecuteWithSignature<bool>("isInherited", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}