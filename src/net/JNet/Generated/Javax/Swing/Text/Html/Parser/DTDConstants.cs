/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.3.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Text.Html.Parser
{
    #region IDTDConstants
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IDTDConstants
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region DTDConstants
    public partial class DTDConstants : Javax.Swing.Text.Html.Parser.IDTDConstants
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#ANY"/>
        /// </summary>
        public static int ANY { get { if (!_ANYReady) { _ANYContent = SGetField<int>(LocalBridgeClazz, "ANY"); _ANYReady = true; } return _ANYContent; } }
        private static int _ANYContent = default;
        private static bool _ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#CDATA"/>
        /// </summary>
        public static int CDATA { get { if (!_CDATAReady) { _CDATAContent = SGetField<int>(LocalBridgeClazz, "CDATA"); _CDATAReady = true; } return _CDATAContent; } }
        private static int _CDATAContent = default;
        private static bool _CDATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#CONREF"/>
        /// </summary>
        public static int CONREF { get { if (!_CONREFReady) { _CONREFContent = SGetField<int>(LocalBridgeClazz, "CONREF"); _CONREFReady = true; } return _CONREFContent; } }
        private static int _CONREFContent = default;
        private static bool _CONREFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#CURRENT"/>
        /// </summary>
        public static int CURRENT { get { if (!_CURRENTReady) { _CURRENTContent = SGetField<int>(LocalBridgeClazz, "CURRENT"); _CURRENTReady = true; } return _CURRENTContent; } }
        private static int _CURRENTContent = default;
        private static bool _CURRENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#DEFAULT"/>
        /// </summary>
        public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
        private static int _DEFAULTContent = default;
        private static bool _DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#EMPTY"/>
        /// </summary>
        public static int EMPTY { get { if (!_EMPTYReady) { _EMPTYContent = SGetField<int>(LocalBridgeClazz, "EMPTY"); _EMPTYReady = true; } return _EMPTYContent; } }
        private static int _EMPTYContent = default;
        private static bool _EMPTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#ENDTAG"/>
        /// </summary>
        public static int ENDTAG { get { if (!_ENDTAGReady) { _ENDTAGContent = SGetField<int>(LocalBridgeClazz, "ENDTAG"); _ENDTAGReady = true; } return _ENDTAGContent; } }
        private static int _ENDTAGContent = default;
        private static bool _ENDTAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#ENTITIES"/>
        /// </summary>
        public static int ENTITIES { get { if (!_ENTITIESReady) { _ENTITIESContent = SGetField<int>(LocalBridgeClazz, "ENTITIES"); _ENTITIESReady = true; } return _ENTITIESContent; } }
        private static int _ENTITIESContent = default;
        private static bool _ENTITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#ENTITY"/>
        /// </summary>
        public static int ENTITY { get { if (!_ENTITYReady) { _ENTITYContent = SGetField<int>(LocalBridgeClazz, "ENTITY"); _ENTITYReady = true; } return _ENTITYContent; } }
        private static int _ENTITYContent = default;
        private static bool _ENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#FIXED"/>
        /// </summary>
        public static int FIXED { get { if (!_FIXEDReady) { _FIXEDContent = SGetField<int>(LocalBridgeClazz, "FIXED"); _FIXEDReady = true; } return _FIXEDContent; } }
        private static int _FIXEDContent = default;
        private static bool _FIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#GENERAL"/>
        /// </summary>
        public static int GENERAL { get { if (!_GENERALReady) { _GENERALContent = SGetField<int>(LocalBridgeClazz, "GENERAL"); _GENERALReady = true; } return _GENERALContent; } }
        private static int _GENERALContent = default;
        private static bool _GENERALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#ID"/>
        /// </summary>
        public static int ID { get { if (!_IDReady) { _IDContent = SGetField<int>(LocalBridgeClazz, "ID"); _IDReady = true; } return _IDContent; } }
        private static int _IDContent = default;
        private static bool _IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#IDREF"/>
        /// </summary>
        public static int IDREF { get { if (!_IDREFReady) { _IDREFContent = SGetField<int>(LocalBridgeClazz, "IDREF"); _IDREFReady = true; } return _IDREFContent; } }
        private static int _IDREFContent = default;
        private static bool _IDREFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#IDREFS"/>
        /// </summary>
        public static int IDREFS { get { if (!_IDREFSReady) { _IDREFSContent = SGetField<int>(LocalBridgeClazz, "IDREFS"); _IDREFSReady = true; } return _IDREFSContent; } }
        private static int _IDREFSContent = default;
        private static bool _IDREFSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#IMPLIED"/>
        /// </summary>
        public static int IMPLIED { get { if (!_IMPLIEDReady) { _IMPLIEDContent = SGetField<int>(LocalBridgeClazz, "IMPLIED"); _IMPLIEDReady = true; } return _IMPLIEDContent; } }
        private static int _IMPLIEDContent = default;
        private static bool _IMPLIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#MD"/>
        /// </summary>
        public static int MD { get { if (!_MDReady) { _MDContent = SGetField<int>(LocalBridgeClazz, "MD"); _MDReady = true; } return _MDContent; } }
        private static int _MDContent = default;
        private static bool _MDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#MODEL"/>
        /// </summary>
        public static int MODEL { get { if (!_MODELReady) { _MODELContent = SGetField<int>(LocalBridgeClazz, "MODEL"); _MODELReady = true; } return _MODELContent; } }
        private static int _MODELContent = default;
        private static bool _MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#MS"/>
        /// </summary>
        public static int MS { get { if (!_MSReady) { _MSContent = SGetField<int>(LocalBridgeClazz, "MS"); _MSReady = true; } return _MSContent; } }
        private static int _MSContent = default;
        private static bool _MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NAME"/>
        /// </summary>
        public static int NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
        private static int _NAMEContent = default;
        private static bool _NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NAMES"/>
        /// </summary>
        public static int NAMES { get { if (!_NAMESReady) { _NAMESContent = SGetField<int>(LocalBridgeClazz, "NAMES"); _NAMESReady = true; } return _NAMESContent; } }
        private static int _NAMESContent = default;
        private static bool _NAMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NMTOKEN"/>
        /// </summary>
        public static int NMTOKEN { get { if (!_NMTOKENReady) { _NMTOKENContent = SGetField<int>(LocalBridgeClazz, "NMTOKEN"); _NMTOKENReady = true; } return _NMTOKENContent; } }
        private static int _NMTOKENContent = default;
        private static bool _NMTOKENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NMTOKENS"/>
        /// </summary>
        public static int NMTOKENS { get { if (!_NMTOKENSReady) { _NMTOKENSContent = SGetField<int>(LocalBridgeClazz, "NMTOKENS"); _NMTOKENSReady = true; } return _NMTOKENSContent; } }
        private static int _NMTOKENSContent = default;
        private static bool _NMTOKENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NOTATION"/>
        /// </summary>
        public static int NOTATION { get { if (!_NOTATIONReady) { _NOTATIONContent = SGetField<int>(LocalBridgeClazz, "NOTATION"); _NOTATIONReady = true; } return _NOTATIONContent; } }
        private static int _NOTATIONContent = default;
        private static bool _NOTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NUMBER"/>
        /// </summary>
        public static int NUMBER { get { if (!_NUMBERReady) { _NUMBERContent = SGetField<int>(LocalBridgeClazz, "NUMBER"); _NUMBERReady = true; } return _NUMBERContent; } }
        private static int _NUMBERContent = default;
        private static bool _NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NUMBERS"/>
        /// </summary>
        public static int NUMBERS { get { if (!_NUMBERSReady) { _NUMBERSContent = SGetField<int>(LocalBridgeClazz, "NUMBERS"); _NUMBERSReady = true; } return _NUMBERSContent; } }
        private static int _NUMBERSContent = default;
        private static bool _NUMBERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NUTOKEN"/>
        /// </summary>
        public static int NUTOKEN { get { if (!_NUTOKENReady) { _NUTOKENContent = SGetField<int>(LocalBridgeClazz, "NUTOKEN"); _NUTOKENReady = true; } return _NUTOKENContent; } }
        private static int _NUTOKENContent = default;
        private static bool _NUTOKENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#NUTOKENS"/>
        /// </summary>
        public static int NUTOKENS { get { if (!_NUTOKENSReady) { _NUTOKENSContent = SGetField<int>(LocalBridgeClazz, "NUTOKENS"); _NUTOKENSReady = true; } return _NUTOKENSContent; } }
        private static int _NUTOKENSContent = default;
        private static bool _NUTOKENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#PARAMETER"/>
        /// </summary>
        public static int PARAMETER { get { if (!_PARAMETERReady) { _PARAMETERContent = SGetField<int>(LocalBridgeClazz, "PARAMETER"); _PARAMETERReady = true; } return _PARAMETERContent; } }
        private static int _PARAMETERContent = default;
        private static bool _PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#PI"/>
        /// </summary>
        public static int PI { get { if (!_PIReady) { _PIContent = SGetField<int>(LocalBridgeClazz, "PI"); _PIReady = true; } return _PIContent; } }
        private static int _PIContent = default;
        private static bool _PIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#PUBLIC"/>
        /// </summary>
        public static int PUBLIC { get { if (!_PUBLICReady) { _PUBLICContent = SGetField<int>(LocalBridgeClazz, "PUBLIC"); _PUBLICReady = true; } return _PUBLICContent; } }
        private static int _PUBLICContent = default;
        private static bool _PUBLICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#RCDATA"/>
        /// </summary>
        public static int RCDATA { get { if (!_RCDATAReady) { _RCDATAContent = SGetField<int>(LocalBridgeClazz, "RCDATA"); _RCDATAReady = true; } return _RCDATAContent; } }
        private static int _RCDATAContent = default;
        private static bool _RCDATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#REQUIRED"/>
        /// </summary>
        public static int REQUIRED { get { if (!_REQUIREDReady) { _REQUIREDContent = SGetField<int>(LocalBridgeClazz, "REQUIRED"); _REQUIREDReady = true; } return _REQUIREDContent; } }
        private static int _REQUIREDContent = default;
        private static bool _REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#SDATA"/>
        /// </summary>
        public static int SDATA { get { if (!_SDATAReady) { _SDATAContent = SGetField<int>(LocalBridgeClazz, "SDATA"); _SDATAReady = true; } return _SDATAContent; } }
        private static int _SDATAContent = default;
        private static bool _SDATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#STARTTAG"/>
        /// </summary>
        public static int STARTTAG { get { if (!_STARTTAGReady) { _STARTTAGContent = SGetField<int>(LocalBridgeClazz, "STARTTAG"); _STARTTAGReady = true; } return _STARTTAGContent; } }
        private static int _STARTTAGContent = default;
        private static bool _STARTTAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/html/parser/DTDConstants.html#SYSTEM"/>
        /// </summary>
        public static int SYSTEM { get { if (!_SYSTEMReady) { _SYSTEMContent = SGetField<int>(LocalBridgeClazz, "SYSTEM"); _SYSTEMReady = true; } return _SYSTEMContent; } }
        private static int _SYSTEMContent = default;
        private static bool _SYSTEMReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}