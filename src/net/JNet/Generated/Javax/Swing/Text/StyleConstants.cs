/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Text
{
    #region StyleConstants declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html"/>
    /// </summary>
    public partial class StyleConstants : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StyleConstants>
    {
        const string _bridgeClassName = "javax.swing.text.StyleConstants";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public StyleConstants() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public StyleConstants(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region CharacterConstants declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.CharacterConstants.html"/>
        /// </summary>
        public partial class CharacterConstants : Javax.Swing.Text.StyleConstants
        {
            const string _bridgeClassName = "javax.swing.text.StyleConstants$CharacterConstants";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CharacterConstants() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CharacterConstants(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ColorConstants declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.ColorConstants.html"/>
        /// </summary>
        public partial class ColorConstants : Javax.Swing.Text.StyleConstants
        {
            const string _bridgeClassName = "javax.swing.text.StyleConstants$ColorConstants";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ColorConstants() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ColorConstants(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FontConstants declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.FontConstants.html"/>
        /// </summary>
        public partial class FontConstants : Javax.Swing.Text.StyleConstants
        {
            const string _bridgeClassName = "javax.swing.text.StyleConstants$FontConstants";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FontConstants() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FontConstants(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ParagraphConstants declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.ParagraphConstants.html"/>
        /// </summary>
        public partial class ParagraphConstants : Javax.Swing.Text.StyleConstants
        {
            const string _bridgeClassName = "javax.swing.text.StyleConstants$ParagraphConstants";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ParagraphConstants() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ParagraphConstants(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region StyleConstants implementation
    public partial class StyleConstants
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ALIGN_CENTER"/>
        /// </summary>
        public static int ALIGN_CENTER { get { if (!_ALIGN_CENTERReady) { _ALIGN_CENTERContent = SGetField<int>(LocalBridgeClazz, "ALIGN_CENTER"); _ALIGN_CENTERReady = true; } return _ALIGN_CENTERContent; } }
        private static int _ALIGN_CENTERContent = default;
        private static bool _ALIGN_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ALIGN_JUSTIFIED"/>
        /// </summary>
        public static int ALIGN_JUSTIFIED { get { if (!_ALIGN_JUSTIFIEDReady) { _ALIGN_JUSTIFIEDContent = SGetField<int>(LocalBridgeClazz, "ALIGN_JUSTIFIED"); _ALIGN_JUSTIFIEDReady = true; } return _ALIGN_JUSTIFIEDContent; } }
        private static int _ALIGN_JUSTIFIEDContent = default;
        private static bool _ALIGN_JUSTIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ALIGN_LEFT"/>
        /// </summary>
        public static int ALIGN_LEFT { get { if (!_ALIGN_LEFTReady) { _ALIGN_LEFTContent = SGetField<int>(LocalBridgeClazz, "ALIGN_LEFT"); _ALIGN_LEFTReady = true; } return _ALIGN_LEFTContent; } }
        private static int _ALIGN_LEFTContent = default;
        private static bool _ALIGN_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ALIGN_RIGHT"/>
        /// </summary>
        public static int ALIGN_RIGHT { get { if (!_ALIGN_RIGHTReady) { _ALIGN_RIGHTContent = SGetField<int>(LocalBridgeClazz, "ALIGN_RIGHT"); _ALIGN_RIGHTReady = true; } return _ALIGN_RIGHTContent; } }
        private static int _ALIGN_RIGHTContent = default;
        private static bool _ALIGN_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Alignment"/>
        /// </summary>
        public static object Alignment { get { if (!_AlignmentReady) { _AlignmentContent = SGetField(LocalBridgeClazz, "Alignment"); _AlignmentReady = true; } return _AlignmentContent; } }
        private static object _AlignmentContent = default;
        private static bool _AlignmentReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Background"/>
        /// </summary>
        public static object Background { get { if (!_BackgroundReady) { _BackgroundContent = SGetField(LocalBridgeClazz, "Background"); _BackgroundReady = true; } return _BackgroundContent; } }
        private static object _BackgroundContent = default;
        private static bool _BackgroundReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#BidiLevel"/>
        /// </summary>
        public static object BidiLevel { get { if (!_BidiLevelReady) { _BidiLevelContent = SGetField(LocalBridgeClazz, "BidiLevel"); _BidiLevelReady = true; } return _BidiLevelContent; } }
        private static object _BidiLevelContent = default;
        private static bool _BidiLevelReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Bold"/>
        /// </summary>
        public static object Bold { get { if (!_BoldReady) { _BoldContent = SGetField(LocalBridgeClazz, "Bold"); _BoldReady = true; } return _BoldContent; } }
        private static object _BoldContent = default;
        private static bool _BoldReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ComponentAttribute"/>
        /// </summary>
        public static object ComponentAttribute { get { if (!_ComponentAttributeReady) { _ComponentAttributeContent = SGetField(LocalBridgeClazz, "ComponentAttribute"); _ComponentAttributeReady = true; } return _ComponentAttributeContent; } }
        private static object _ComponentAttributeContent = default;
        private static bool _ComponentAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ComposedTextAttribute"/>
        /// </summary>
        public static object ComposedTextAttribute { get { if (!_ComposedTextAttributeReady) { _ComposedTextAttributeContent = SGetField(LocalBridgeClazz, "ComposedTextAttribute"); _ComposedTextAttributeReady = true; } return _ComposedTextAttributeContent; } }
        private static object _ComposedTextAttributeContent = default;
        private static bool _ComposedTextAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Family"/>
        /// </summary>
        public static object Family { get { if (!_FamilyReady) { _FamilyContent = SGetField(LocalBridgeClazz, "Family"); _FamilyReady = true; } return _FamilyContent; } }
        private static object _FamilyContent = default;
        private static bool _FamilyReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#FirstLineIndent"/>
        /// </summary>
        public static object FirstLineIndent { get { if (!_FirstLineIndentReady) { _FirstLineIndentContent = SGetField(LocalBridgeClazz, "FirstLineIndent"); _FirstLineIndentReady = true; } return _FirstLineIndentContent; } }
        private static object _FirstLineIndentContent = default;
        private static bool _FirstLineIndentReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#FontFamily"/>
        /// </summary>
        public static object FontFamily { get { if (!_FontFamilyReady) { _FontFamilyContent = SGetField(LocalBridgeClazz, "FontFamily"); _FontFamilyReady = true; } return _FontFamilyContent; } }
        private static object _FontFamilyContent = default;
        private static bool _FontFamilyReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#FontSize"/>
        /// </summary>
        public static object FontSize { get { if (!_FontSizeReady) { _FontSizeContent = SGetField(LocalBridgeClazz, "FontSize"); _FontSizeReady = true; } return _FontSizeContent; } }
        private static object _FontSizeContent = default;
        private static bool _FontSizeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Foreground"/>
        /// </summary>
        public static object Foreground { get { if (!_ForegroundReady) { _ForegroundContent = SGetField(LocalBridgeClazz, "Foreground"); _ForegroundReady = true; } return _ForegroundContent; } }
        private static object _ForegroundContent = default;
        private static bool _ForegroundReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#IconAttribute"/>
        /// </summary>
        public static object IconAttribute { get { if (!_IconAttributeReady) { _IconAttributeContent = SGetField(LocalBridgeClazz, "IconAttribute"); _IconAttributeReady = true; } return _IconAttributeContent; } }
        private static object _IconAttributeContent = default;
        private static bool _IconAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Italic"/>
        /// </summary>
        public static object Italic { get { if (!_ItalicReady) { _ItalicContent = SGetField(LocalBridgeClazz, "Italic"); _ItalicReady = true; } return _ItalicContent; } }
        private static object _ItalicContent = default;
        private static bool _ItalicReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#LeftIndent"/>
        /// </summary>
        public static object LeftIndent { get { if (!_LeftIndentReady) { _LeftIndentContent = SGetField(LocalBridgeClazz, "LeftIndent"); _LeftIndentReady = true; } return _LeftIndentContent; } }
        private static object _LeftIndentContent = default;
        private static bool _LeftIndentReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#LineSpacing"/>
        /// </summary>
        public static object LineSpacing { get { if (!_LineSpacingReady) { _LineSpacingContent = SGetField(LocalBridgeClazz, "LineSpacing"); _LineSpacingReady = true; } return _LineSpacingContent; } }
        private static object _LineSpacingContent = default;
        private static bool _LineSpacingReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ModelAttribute"/>
        /// </summary>
        public static object ModelAttribute { get { if (!_ModelAttributeReady) { _ModelAttributeContent = SGetField(LocalBridgeClazz, "ModelAttribute"); _ModelAttributeReady = true; } return _ModelAttributeContent; } }
        private static object _ModelAttributeContent = default;
        private static bool _ModelAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#NameAttribute"/>
        /// </summary>
        public static object NameAttribute { get { if (!_NameAttributeReady) { _NameAttributeContent = SGetField(LocalBridgeClazz, "NameAttribute"); _NameAttributeReady = true; } return _NameAttributeContent; } }
        private static object _NameAttributeContent = default;
        private static bool _NameAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Orientation"/>
        /// </summary>
        public static object Orientation { get { if (!_OrientationReady) { _OrientationContent = SGetField(LocalBridgeClazz, "Orientation"); _OrientationReady = true; } return _OrientationContent; } }
        private static object _OrientationContent = default;
        private static bool _OrientationReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ResolveAttribute"/>
        /// </summary>
        public static object ResolveAttribute { get { if (!_ResolveAttributeReady) { _ResolveAttributeContent = SGetField(LocalBridgeClazz, "ResolveAttribute"); _ResolveAttributeReady = true; } return _ResolveAttributeContent; } }
        private static object _ResolveAttributeContent = default;
        private static bool _ResolveAttributeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#RightIndent"/>
        /// </summary>
        public static object RightIndent { get { if (!_RightIndentReady) { _RightIndentContent = SGetField(LocalBridgeClazz, "RightIndent"); _RightIndentReady = true; } return _RightIndentContent; } }
        private static object _RightIndentContent = default;
        private static bool _RightIndentReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Size"/>
        /// </summary>
        public static object Size { get { if (!_SizeReady) { _SizeContent = SGetField(LocalBridgeClazz, "Size"); _SizeReady = true; } return _SizeContent; } }
        private static object _SizeContent = default;
        private static bool _SizeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#SpaceAbove"/>
        /// </summary>
        public static object SpaceAbove { get { if (!_SpaceAboveReady) { _SpaceAboveContent = SGetField(LocalBridgeClazz, "SpaceAbove"); _SpaceAboveReady = true; } return _SpaceAboveContent; } }
        private static object _SpaceAboveContent = default;
        private static bool _SpaceAboveReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#SpaceBelow"/>
        /// </summary>
        public static object SpaceBelow { get { if (!_SpaceBelowReady) { _SpaceBelowContent = SGetField(LocalBridgeClazz, "SpaceBelow"); _SpaceBelowReady = true; } return _SpaceBelowContent; } }
        private static object _SpaceBelowContent = default;
        private static bool _SpaceBelowReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#StrikeThrough"/>
        /// </summary>
        public static object StrikeThrough { get { if (!_StrikeThroughReady) { _StrikeThroughContent = SGetField(LocalBridgeClazz, "StrikeThrough"); _StrikeThroughReady = true; } return _StrikeThroughContent; } }
        private static object _StrikeThroughContent = default;
        private static bool _StrikeThroughReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Subscript"/>
        /// </summary>
        public static object Subscript { get { if (!_SubscriptReady) { _SubscriptContent = SGetField(LocalBridgeClazz, "Subscript"); _SubscriptReady = true; } return _SubscriptContent; } }
        private static object _SubscriptContent = default;
        private static bool _SubscriptReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Superscript"/>
        /// </summary>
        public static object Superscript { get { if (!_SuperscriptReady) { _SuperscriptContent = SGetField(LocalBridgeClazz, "Superscript"); _SuperscriptReady = true; } return _SuperscriptContent; } }
        private static object _SuperscriptContent = default;
        private static bool _SuperscriptReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#TabSet"/>
        /// </summary>
        public static object TabSet { get { if (!_TabSetReady) { _TabSetContent = SGetField(LocalBridgeClazz, "TabSet"); _TabSetReady = true; } return _TabSetContent; } }
        private static object _TabSetContent = default;
        private static bool _TabSetReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#Underline"/>
        /// </summary>
        public static object Underline { get { if (!_UnderlineReady) { _UnderlineContent = SGetField(LocalBridgeClazz, "Underline"); _UnderlineReady = true; } return _UnderlineContent; } }
        private static object _UnderlineContent = default;
        private static bool _UnderlineReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#ComponentElementName"/>
        /// </summary>
        public static Java.Lang.String ComponentElementName { get { if (!_ComponentElementNameReady) { _ComponentElementNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ComponentElementName"); _ComponentElementNameReady = true; } return _ComponentElementNameContent; } }
        private static Java.Lang.String _ComponentElementNameContent = default;
        private static bool _ComponentElementNameReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#IconElementName"/>
        /// </summary>
        public static Java.Lang.String IconElementName { get { if (!_IconElementNameReady) { _IconElementNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IconElementName"); _IconElementNameReady = true; } return _IconElementNameContent; } }
        private static Java.Lang.String _IconElementNameContent = default;
        private static bool _IconElementNameReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isBold(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsBold(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isBold", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isItalic(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsItalic(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isItalic", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isStrikeThrough(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsStrikeThrough(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isStrikeThrough", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isSubscript(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSubscript(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSubscript", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isSuperscript(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSuperscript(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSuperscript", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#isUnderline(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUnderline(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUnderline", "(Ljavax/swing/text/AttributeSet;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getFirstLineIndent(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetFirstLineIndent(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getFirstLineIndent", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getLeftIndent(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetLeftIndent(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getLeftIndent", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getLineSpacing(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetLineSpacing(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getLineSpacing", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getRightIndent(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetRightIndent(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getRightIndent", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getSpaceAbove(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetSpaceAbove(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getSpaceAbove", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getSpaceBelow(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetSpaceBelow(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getSpaceBelow", "(Ljavax/swing/text/AttributeSet;)F", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getAlignment(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetAlignment(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getAlignment", "(Ljavax/swing/text/AttributeSet;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getBidiLevel(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetBidiLevel(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getBidiLevel", "(Ljavax/swing/text/AttributeSet;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getFontSize(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetFontSize(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getFontSize", "(Ljavax/swing/text/AttributeSet;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getBackground(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Java.Awt.Color"/></returns>
        public static Java.Awt.Color GetBackground(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Java.Awt.Color>(LocalBridgeClazz, "getBackground", "(Ljavax/swing/text/AttributeSet;)Ljava/awt/Color;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getForeground(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Java.Awt.Color"/></returns>
        public static Java.Awt.Color GetForeground(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Java.Awt.Color>(LocalBridgeClazz, "getForeground", "(Ljavax/swing/text/AttributeSet;)Ljava/awt/Color;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getComponent(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Java.Awt.Component"/></returns>
        public static Java.Awt.Component GetComponent(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Java.Awt.Component>(LocalBridgeClazz, "getComponent", "(Ljavax/swing/text/AttributeSet;)Ljava/awt/Component;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getFontFamily(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetFontFamily(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getFontFamily", "(Ljavax/swing/text/AttributeSet;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getIcon(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Javax.Swing.Icon"/></returns>
        public static Javax.Swing.Icon GetIcon(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Javax.Swing.Icon>(LocalBridgeClazz, "getIcon", "(Ljavax/swing/text/AttributeSet;)Ljavax/swing/Icon;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#getTabSet(javax.swing.text.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.AttributeSet"/></param>
        /// <returns><see cref="Javax.Swing.Text.TabSet"/></returns>
        public static Javax.Swing.Text.TabSet GetTabSet(Javax.Swing.Text.AttributeSet arg0)
        {
            return SExecuteWithSignature<Javax.Swing.Text.TabSet>(LocalBridgeClazz, "getTabSet", "(Ljavax/swing/text/AttributeSet;)Ljavax/swing/text/TabSet;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setAlignment(javax.swing.text.MutableAttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void SetAlignment(Javax.Swing.Text.MutableAttributeSet arg0, int arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setAlignment", "(Ljavax/swing/text/MutableAttributeSet;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setBackground(javax.swing.text.MutableAttributeSet,java.awt.Color)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Color"/></param>
        public static void SetBackground(Javax.Swing.Text.MutableAttributeSet arg0, Java.Awt.Color arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setBackground", "(Ljavax/swing/text/MutableAttributeSet;Ljava/awt/Color;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setBidiLevel(javax.swing.text.MutableAttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void SetBidiLevel(Javax.Swing.Text.MutableAttributeSet arg0, int arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setBidiLevel", "(Ljavax/swing/text/MutableAttributeSet;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setBold(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetBold(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setBold", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setComponent(javax.swing.text.MutableAttributeSet,java.awt.Component)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Component"/></param>
        public static void SetComponent(Javax.Swing.Text.MutableAttributeSet arg0, Java.Awt.Component arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setComponent", "(Ljavax/swing/text/MutableAttributeSet;Ljava/awt/Component;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setFirstLineIndent(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetFirstLineIndent(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setFirstLineIndent", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setFontFamily(javax.swing.text.MutableAttributeSet,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public static void SetFontFamily(Javax.Swing.Text.MutableAttributeSet arg0, Java.Lang.String arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setFontFamily", "(Ljavax/swing/text/MutableAttributeSet;Ljava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setFontSize(javax.swing.text.MutableAttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void SetFontSize(Javax.Swing.Text.MutableAttributeSet arg0, int arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setFontSize", "(Ljavax/swing/text/MutableAttributeSet;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setForeground(javax.swing.text.MutableAttributeSet,java.awt.Color)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Color"/></param>
        public static void SetForeground(Javax.Swing.Text.MutableAttributeSet arg0, Java.Awt.Color arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setForeground", "(Ljavax/swing/text/MutableAttributeSet;Ljava/awt/Color;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setIcon(javax.swing.text.MutableAttributeSet,javax.swing.Icon)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Javax.Swing.Icon"/></param>
        public static void SetIcon(Javax.Swing.Text.MutableAttributeSet arg0, Javax.Swing.Icon arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setIcon", "(Ljavax/swing/text/MutableAttributeSet;Ljavax/swing/Icon;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setItalic(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetItalic(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setItalic", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setLeftIndent(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetLeftIndent(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setLeftIndent", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setLineSpacing(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetLineSpacing(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setLineSpacing", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setRightIndent(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetRightIndent(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setRightIndent", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setSpaceAbove(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetSpaceAbove(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setSpaceAbove", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setSpaceBelow(javax.swing.text.MutableAttributeSet,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void SetSpaceBelow(Javax.Swing.Text.MutableAttributeSet arg0, float arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setSpaceBelow", "(Ljavax/swing/text/MutableAttributeSet;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setStrikeThrough(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetStrikeThrough(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setStrikeThrough", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setSubscript(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetSubscript(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setSubscript", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setSuperscript(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetSuperscript(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setSuperscript", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setTabSet(javax.swing.text.MutableAttributeSet,javax.swing.text.TabSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="Javax.Swing.Text.TabSet"/></param>
        public static void SetTabSet(Javax.Swing.Text.MutableAttributeSet arg0, Javax.Swing.Text.TabSet arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setTabSet", "(Ljavax/swing/text/MutableAttributeSet;Ljavax/swing/text/TabSet;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/text/StyleConstants.html#setUnderline(javax.swing.text.MutableAttributeSet,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.Text.MutableAttributeSet"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void SetUnderline(Javax.Swing.Text.MutableAttributeSet arg0, bool arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setUnderline", "(Ljavax/swing/text/MutableAttributeSet;Z)V", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region CharacterConstants implementation
        public partial class CharacterConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ColorConstants implementation
        public partial class ColorConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FontConstants implementation
        public partial class FontConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ParagraphConstants implementation
        public partial class ParagraphConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}