/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Plaf.Basic
{
    #region BasicSliderUI
    public partial class BasicSliderUI
    {
        #region Constructors
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#<init>(javax.swing.JSlider)
        /// </summary>
        public BasicSliderUI(Javax.Swing.JSlider arg0)
            : base(arg0)
        {
        }
        
        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#MAX_SCROLL
        /// </summary>
        public static int MAX_SCROLL => Clazz.GetField<int>("MAX_SCROLL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#MIN_SCROLL
        /// </summary>
        public static int MIN_SCROLL => Clazz.GetField<int>("MIN_SCROLL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#NEGATIVE_SCROLL
        /// </summary>
        public static int NEGATIVE_SCROLL => Clazz.GetField<int>("NEGATIVE_SCROLL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#POSITIVE_SCROLL
        /// </summary>
        public static int POSITIVE_SCROLL => Clazz.GetField<int>("POSITIVE_SCROLL");
        
        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getMinimumHorizontalSize() 
        /// </summary>
        public Java.Awt.Dimension MinimumHorizontalSize
        {
            get { return IExecute<Java.Awt.Dimension>("getMinimumHorizontalSize"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getMinimumVerticalSize() 
        /// </summary>
        public Java.Awt.Dimension MinimumVerticalSize
        {
            get { return IExecute<Java.Awt.Dimension>("getMinimumVerticalSize"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getPreferredHorizontalSize() 
        /// </summary>
        public Java.Awt.Dimension PreferredHorizontalSize
        {
            get { return IExecute<Java.Awt.Dimension>("getPreferredHorizontalSize"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getPreferredVerticalSize() 
        /// </summary>
        public Java.Awt.Dimension PreferredVerticalSize
        {
            get { return IExecute<Java.Awt.Dimension>("getPreferredVerticalSize"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#valueForXPosition(int)
        /// </summary>
        public int ValueForXPosition(int arg0)
        {
            return IExecute<int>("valueForXPosition", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#valueForYPosition(int)
        /// </summary>
        public int ValueForYPosition(int arg0)
        {
            return IExecute<int>("valueForYPosition", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintFocus(java.awt.Graphics)
        /// </summary>
        public void PaintFocus(Java.Awt.Graphics arg0)
        {
            IExecute("paintFocus", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintLabels(java.awt.Graphics)
        /// </summary>
        public void PaintLabels(Java.Awt.Graphics arg0)
        {
            IExecute("paintLabels", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintThumb(java.awt.Graphics)
        /// </summary>
        public void PaintThumb(Java.Awt.Graphics arg0)
        {
            IExecute("paintThumb", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintTicks(java.awt.Graphics)
        /// </summary>
        public void PaintTicks(Java.Awt.Graphics arg0)
        {
            IExecute("paintTicks", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintTrack(java.awt.Graphics)
        /// </summary>
        public void PaintTrack(Java.Awt.Graphics arg0)
        {
            IExecute("paintTrack", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#scrollByBlock(int)
        /// </summary>
        public void ScrollByBlock(int arg0)
        {
            IExecute("scrollByBlock", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#scrollByUnit(int)
        /// </summary>
        public void ScrollByUnit(int arg0)
        {
            IExecute("scrollByUnit", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#setThumbLocation(int,int)
        /// </summary>
        public void SetThumbLocation(int arg0, int arg1)
        {
            IExecute("setThumbLocation", arg0, arg1);
        }
        
        #endregion

        #region Nested classes
        #region ActionScroller
        public partial class ActionScroller
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ActionScroller.html#<init>(javax.swing.plaf.basic.BasicSliderUI,javax.swing.JSlider,int,boolean)
            /// </summary>
            public ActionScroller(Javax.Swing.Plaf.Basic.BasicSliderUI arg0, Javax.Swing.JSlider arg1, int arg2, bool arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChangeHandler
        public partial class ChangeHandler
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ChangeHandler.html#<init>(javax.swing.plaf.basic.BasicSliderUI)
            /// </summary>
            public ChangeHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Javax.Swing.Event.ChangeListener(Javax.Swing.Plaf.Basic.BasicSliderUI.ChangeHandler t) => t.Cast<Javax.Swing.Event.ChangeListener>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ChangeHandler.html#stateChanged(javax.swing.event.ChangeEvent)
            /// </summary>
            public void StateChanged(Javax.Swing.Event.ChangeEvent arg0)
            {
                IExecute("stateChanged", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FocusHandler
        public partial class FocusHandler
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#<init>(javax.swing.plaf.basic.BasicSliderUI)
            /// </summary>
            public FocusHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Java.Awt.EventNs.FocusListener(Javax.Swing.Plaf.Basic.BasicSliderUI.FocusHandler t) => t.Cast<Java.Awt.EventNs.FocusListener>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#focusGained(java.awt.event.FocusEvent)
            /// </summary>
            public void FocusGained(Java.Awt.EventNs.FocusEvent arg0)
            {
                IExecute("focusGained", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#focusLost(java.awt.event.FocusEvent)
            /// </summary>
            public void FocusLost(Java.Awt.EventNs.FocusEvent arg0)
            {
                IExecute("focusLost", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PropertyChangeHandler
        public partial class PropertyChangeHandler
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.PropertyChangeHandler.html#<init>(javax.swing.plaf.basic.BasicSliderUI)
            /// </summary>
            public PropertyChangeHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Java.Beans.PropertyChangeListener(Javax.Swing.Plaf.Basic.BasicSliderUI.PropertyChangeHandler t) => t.Cast<Java.Beans.PropertyChangeListener>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.PropertyChangeHandler.html#propertyChange(java.beans.PropertyChangeEvent)
            /// </summary>
            public void PropertyChange(Java.Beans.PropertyChangeEvent arg0)
            {
                IExecute("propertyChange", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}