/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.3.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Plaf.Basic
{
    #region BasicSliderUI
    public partial class BasicSliderUI
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#%3Cinit%3E(javax.swing.JSlider)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Swing.JSlider"/></param>
        public BasicSliderUI(Javax.Swing.JSlider arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#MAX_SCROLL"/>
        /// </summary>
        public static int MAX_SCROLL { get { if (!_MAX_SCROLLReady) { _MAX_SCROLLContent = SGetField<int>(LocalBridgeClazz, "MAX_SCROLL"); _MAX_SCROLLReady = true; } return _MAX_SCROLLContent; } }
        private static int _MAX_SCROLLContent = default;
        private static bool _MAX_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#MIN_SCROLL"/>
        /// </summary>
        public static int MIN_SCROLL { get { if (!_MIN_SCROLLReady) { _MIN_SCROLLContent = SGetField<int>(LocalBridgeClazz, "MIN_SCROLL"); _MIN_SCROLLReady = true; } return _MIN_SCROLLContent; } }
        private static int _MIN_SCROLLContent = default;
        private static bool _MIN_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#NEGATIVE_SCROLL"/>
        /// </summary>
        public static int NEGATIVE_SCROLL { get { if (!_NEGATIVE_SCROLLReady) { _NEGATIVE_SCROLLContent = SGetField<int>(LocalBridgeClazz, "NEGATIVE_SCROLL"); _NEGATIVE_SCROLLReady = true; } return _NEGATIVE_SCROLLContent; } }
        private static int _NEGATIVE_SCROLLContent = default;
        private static bool _NEGATIVE_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#POSITIVE_SCROLL"/>
        /// </summary>
        public static int POSITIVE_SCROLL { get { if (!_POSITIVE_SCROLLReady) { _POSITIVE_SCROLLContent = SGetField<int>(LocalBridgeClazz, "POSITIVE_SCROLL"); _POSITIVE_SCROLLReady = true; } return _POSITIVE_SCROLLContent; } }
        private static int _POSITIVE_SCROLLContent = default;
        private static bool _POSITIVE_SCROLLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getMinimumHorizontalSize()"/> 
        /// </summary>
        public Java.Awt.Dimension MinimumHorizontalSize
        {
            get { return IExecuteWithSignature<Java.Awt.Dimension>("getMinimumHorizontalSize", "()Ljava/awt/Dimension;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getMinimumVerticalSize()"/> 
        /// </summary>
        public Java.Awt.Dimension MinimumVerticalSize
        {
            get { return IExecuteWithSignature<Java.Awt.Dimension>("getMinimumVerticalSize", "()Ljava/awt/Dimension;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getPreferredHorizontalSize()"/> 
        /// </summary>
        public Java.Awt.Dimension PreferredHorizontalSize
        {
            get { return IExecuteWithSignature<Java.Awt.Dimension>("getPreferredHorizontalSize", "()Ljava/awt/Dimension;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#getPreferredVerticalSize()"/> 
        /// </summary>
        public Java.Awt.Dimension PreferredVerticalSize
        {
            get { return IExecuteWithSignature<Java.Awt.Dimension>("getPreferredVerticalSize", "()Ljava/awt/Dimension;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#valueForXPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int ValueForXPosition(int arg0)
        {
            return IExecuteWithSignature<int>("valueForXPosition", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#valueForYPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int ValueForYPosition(int arg0)
        {
            return IExecuteWithSignature<int>("valueForYPosition", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintFocus(java.awt.Graphics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        public void PaintFocus(Java.Awt.Graphics arg0)
        {
            IExecuteWithSignature("paintFocus", "(Ljava/awt/Graphics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintLabels(java.awt.Graphics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        public void PaintLabels(Java.Awt.Graphics arg0)
        {
            IExecuteWithSignature("paintLabels", "(Ljava/awt/Graphics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintThumb(java.awt.Graphics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        public void PaintThumb(Java.Awt.Graphics arg0)
        {
            IExecuteWithSignature("paintThumb", "(Ljava/awt/Graphics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintTicks(java.awt.Graphics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        public void PaintTicks(Java.Awt.Graphics arg0)
        {
            IExecuteWithSignature("paintTicks", "(Ljava/awt/Graphics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#paintTrack(java.awt.Graphics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        public void PaintTrack(Java.Awt.Graphics arg0)
        {
            IExecuteWithSignature("paintTrack", "(Ljava/awt/Graphics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#scrollByBlock(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ScrollByBlock(int arg0)
        {
            IExecuteWithSignature("scrollByBlock", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#scrollByUnit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ScrollByUnit(int arg0)
        {
            IExecuteWithSignature("scrollByUnit", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.html#setThumbLocation(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetThumbLocation(int arg0, int arg1)
        {
            IExecute("setThumbLocation", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region ActionScroller
        public partial class ActionScroller
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ActionScroller.html#%3Cinit%3E(javax.swing.plaf.basic.BasicSliderUI,javax.swing.JSlider,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Plaf.Basic.BasicSliderUI"/></param>
            /// <param name="arg1"><see cref="Javax.Swing.JSlider"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public ActionScroller(Javax.Swing.Plaf.Basic.BasicSliderUI arg0, Javax.Swing.JSlider arg1, int arg2, bool arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChangeHandler
        public partial class ChangeHandler
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ChangeHandler.html#%3Cinit%3E(javax.swing.plaf.basic.BasicSliderUI)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Plaf.Basic.BasicSliderUI"/></param>
            public ChangeHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Javax.Swing.Plaf.Basic.BasicSliderUI.ChangeHandler"/> to <see cref="Javax.Swing.Event.ChangeListener"/>
            /// </summary>
            public static implicit operator Javax.Swing.Event.ChangeListener(Javax.Swing.Plaf.Basic.BasicSliderUI.ChangeHandler t) => t.Cast<Javax.Swing.Event.ChangeListener>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.ChangeHandler.html#stateChanged(javax.swing.event.ChangeEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Event.ChangeEvent"/></param>
            public void StateChanged(Javax.Swing.Event.ChangeEvent arg0)
            {
                IExecuteWithSignature("stateChanged", "(Ljavax/swing/event/ChangeEvent;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FocusHandler
        public partial class FocusHandler
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#%3Cinit%3E(javax.swing.plaf.basic.BasicSliderUI)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Plaf.Basic.BasicSliderUI"/></param>
            public FocusHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Javax.Swing.Plaf.Basic.BasicSliderUI.FocusHandler"/> to <see cref="Java.Awt.EventNs.FocusListener"/>
            /// </summary>
            public static implicit operator Java.Awt.EventNs.FocusListener(Javax.Swing.Plaf.Basic.BasicSliderUI.FocusHandler t) => t.Cast<Java.Awt.EventNs.FocusListener>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#focusGained(java.awt.event.FocusEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Awt.EventNs.FocusEvent"/></param>
            public void FocusGained(Java.Awt.EventNs.FocusEvent arg0)
            {
                IExecuteWithSignature("focusGained", "(Ljava/awt/event/FocusEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.FocusHandler.html#focusLost(java.awt.event.FocusEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Awt.EventNs.FocusEvent"/></param>
            public void FocusLost(Java.Awt.EventNs.FocusEvent arg0)
            {
                IExecuteWithSignature("focusLost", "(Ljava/awt/event/FocusEvent;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PropertyChangeHandler
        public partial class PropertyChangeHandler
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.PropertyChangeHandler.html#%3Cinit%3E(javax.swing.plaf.basic.BasicSliderUI)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Swing.Plaf.Basic.BasicSliderUI"/></param>
            public PropertyChangeHandler(Javax.Swing.Plaf.Basic.BasicSliderUI arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Javax.Swing.Plaf.Basic.BasicSliderUI.PropertyChangeHandler"/> to <see cref="Java.Beans.PropertyChangeListener"/>
            /// </summary>
            public static implicit operator Java.Beans.PropertyChangeListener(Javax.Swing.Plaf.Basic.BasicSliderUI.PropertyChangeHandler t) => t.Cast<Java.Beans.PropertyChangeListener>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/basic/BasicSliderUI.PropertyChangeHandler.html#propertyChange(java.beans.PropertyChangeEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Beans.PropertyChangeEvent"/></param>
            public void PropertyChange(Java.Beans.PropertyChangeEvent arg0)
            {
                IExecuteWithSignature("propertyChange", "(Ljava/beans/PropertyChangeEvent;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}