/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Plaf.Synth
{
    #region Region
    public partial class Region
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#ARROW_BUTTON"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region ARROW_BUTTON { get { if (!_ARROW_BUTTONReady) { _ARROW_BUTTONContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "ARROW_BUTTON"); _ARROW_BUTTONReady = true; } return _ARROW_BUTTONContent; } }
        private static Javax.Swing.Plaf.Synth.Region _ARROW_BUTTONContent = default;
        private static bool _ARROW_BUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#BUTTON"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region BUTTON { get { if (!_BUTTONReady) { _BUTTONContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "BUTTON"); _BUTTONReady = true; } return _BUTTONContent; } }
        private static Javax.Swing.Plaf.Synth.Region _BUTTONContent = default;
        private static bool _BUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#CHECK_BOX"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region CHECK_BOX { get { if (!_CHECK_BOXReady) { _CHECK_BOXContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "CHECK_BOX"); _CHECK_BOXReady = true; } return _CHECK_BOXContent; } }
        private static Javax.Swing.Plaf.Synth.Region _CHECK_BOXContent = default;
        private static bool _CHECK_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#CHECK_BOX_MENU_ITEM"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region CHECK_BOX_MENU_ITEM { get { if (!_CHECK_BOX_MENU_ITEMReady) { _CHECK_BOX_MENU_ITEMContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "CHECK_BOX_MENU_ITEM"); _CHECK_BOX_MENU_ITEMReady = true; } return _CHECK_BOX_MENU_ITEMContent; } }
        private static Javax.Swing.Plaf.Synth.Region _CHECK_BOX_MENU_ITEMContent = default;
        private static bool _CHECK_BOX_MENU_ITEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#COLOR_CHOOSER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region COLOR_CHOOSER { get { if (!_COLOR_CHOOSERReady) { _COLOR_CHOOSERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "COLOR_CHOOSER"); _COLOR_CHOOSERReady = true; } return _COLOR_CHOOSERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _COLOR_CHOOSERContent = default;
        private static bool _COLOR_CHOOSERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#COMBO_BOX"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region COMBO_BOX { get { if (!_COMBO_BOXReady) { _COMBO_BOXContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "COMBO_BOX"); _COMBO_BOXReady = true; } return _COMBO_BOXContent; } }
        private static Javax.Swing.Plaf.Synth.Region _COMBO_BOXContent = default;
        private static bool _COMBO_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#DESKTOP_ICON"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region DESKTOP_ICON { get { if (!_DESKTOP_ICONReady) { _DESKTOP_ICONContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "DESKTOP_ICON"); _DESKTOP_ICONReady = true; } return _DESKTOP_ICONContent; } }
        private static Javax.Swing.Plaf.Synth.Region _DESKTOP_ICONContent = default;
        private static bool _DESKTOP_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#DESKTOP_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region DESKTOP_PANE { get { if (!_DESKTOP_PANEReady) { _DESKTOP_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "DESKTOP_PANE"); _DESKTOP_PANEReady = true; } return _DESKTOP_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _DESKTOP_PANEContent = default;
        private static bool _DESKTOP_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#EDITOR_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region EDITOR_PANE { get { if (!_EDITOR_PANEReady) { _EDITOR_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "EDITOR_PANE"); _EDITOR_PANEReady = true; } return _EDITOR_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _EDITOR_PANEContent = default;
        private static bool _EDITOR_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#FILE_CHOOSER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region FILE_CHOOSER { get { if (!_FILE_CHOOSERReady) { _FILE_CHOOSERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "FILE_CHOOSER"); _FILE_CHOOSERReady = true; } return _FILE_CHOOSERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _FILE_CHOOSERContent = default;
        private static bool _FILE_CHOOSERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#FORMATTED_TEXT_FIELD"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region FORMATTED_TEXT_FIELD { get { if (!_FORMATTED_TEXT_FIELDReady) { _FORMATTED_TEXT_FIELDContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "FORMATTED_TEXT_FIELD"); _FORMATTED_TEXT_FIELDReady = true; } return _FORMATTED_TEXT_FIELDContent; } }
        private static Javax.Swing.Plaf.Synth.Region _FORMATTED_TEXT_FIELDContent = default;
        private static bool _FORMATTED_TEXT_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#INTERNAL_FRAME"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region INTERNAL_FRAME { get { if (!_INTERNAL_FRAMEReady) { _INTERNAL_FRAMEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "INTERNAL_FRAME"); _INTERNAL_FRAMEReady = true; } return _INTERNAL_FRAMEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _INTERNAL_FRAMEContent = default;
        private static bool _INTERNAL_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#INTERNAL_FRAME_TITLE_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region INTERNAL_FRAME_TITLE_PANE { get { if (!_INTERNAL_FRAME_TITLE_PANEReady) { _INTERNAL_FRAME_TITLE_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "INTERNAL_FRAME_TITLE_PANE"); _INTERNAL_FRAME_TITLE_PANEReady = true; } return _INTERNAL_FRAME_TITLE_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _INTERNAL_FRAME_TITLE_PANEContent = default;
        private static bool _INTERNAL_FRAME_TITLE_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#LABEL"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region LABEL { get { if (!_LABELReady) { _LABELContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "LABEL"); _LABELReady = true; } return _LABELContent; } }
        private static Javax.Swing.Plaf.Synth.Region _LABELContent = default;
        private static bool _LABELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#LIST"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region LIST { get { if (!_LISTReady) { _LISTContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "LIST"); _LISTReady = true; } return _LISTContent; } }
        private static Javax.Swing.Plaf.Synth.Region _LISTContent = default;
        private static bool _LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#MENU"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region MENU { get { if (!_MENUReady) { _MENUContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "MENU"); _MENUReady = true; } return _MENUContent; } }
        private static Javax.Swing.Plaf.Synth.Region _MENUContent = default;
        private static bool _MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#MENU_BAR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region MENU_BAR { get { if (!_MENU_BARReady) { _MENU_BARContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "MENU_BAR"); _MENU_BARReady = true; } return _MENU_BARContent; } }
        private static Javax.Swing.Plaf.Synth.Region _MENU_BARContent = default;
        private static bool _MENU_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#MENU_ITEM"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region MENU_ITEM { get { if (!_MENU_ITEMReady) { _MENU_ITEMContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "MENU_ITEM"); _MENU_ITEMReady = true; } return _MENU_ITEMContent; } }
        private static Javax.Swing.Plaf.Synth.Region _MENU_ITEMContent = default;
        private static bool _MENU_ITEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#MENU_ITEM_ACCELERATOR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region MENU_ITEM_ACCELERATOR { get { if (!_MENU_ITEM_ACCELERATORReady) { _MENU_ITEM_ACCELERATORContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "MENU_ITEM_ACCELERATOR"); _MENU_ITEM_ACCELERATORReady = true; } return _MENU_ITEM_ACCELERATORContent; } }
        private static Javax.Swing.Plaf.Synth.Region _MENU_ITEM_ACCELERATORContent = default;
        private static bool _MENU_ITEM_ACCELERATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#OPTION_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region OPTION_PANE { get { if (!_OPTION_PANEReady) { _OPTION_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "OPTION_PANE"); _OPTION_PANEReady = true; } return _OPTION_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _OPTION_PANEContent = default;
        private static bool _OPTION_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#PANEL"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region PANEL { get { if (!_PANELReady) { _PANELContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "PANEL"); _PANELReady = true; } return _PANELContent; } }
        private static Javax.Swing.Plaf.Synth.Region _PANELContent = default;
        private static bool _PANELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#PASSWORD_FIELD"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region PASSWORD_FIELD { get { if (!_PASSWORD_FIELDReady) { _PASSWORD_FIELDContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "PASSWORD_FIELD"); _PASSWORD_FIELDReady = true; } return _PASSWORD_FIELDContent; } }
        private static Javax.Swing.Plaf.Synth.Region _PASSWORD_FIELDContent = default;
        private static bool _PASSWORD_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#POPUP_MENU"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region POPUP_MENU { get { if (!_POPUP_MENUReady) { _POPUP_MENUContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "POPUP_MENU"); _POPUP_MENUReady = true; } return _POPUP_MENUContent; } }
        private static Javax.Swing.Plaf.Synth.Region _POPUP_MENUContent = default;
        private static bool _POPUP_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#POPUP_MENU_SEPARATOR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region POPUP_MENU_SEPARATOR { get { if (!_POPUP_MENU_SEPARATORReady) { _POPUP_MENU_SEPARATORContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "POPUP_MENU_SEPARATOR"); _POPUP_MENU_SEPARATORReady = true; } return _POPUP_MENU_SEPARATORContent; } }
        private static Javax.Swing.Plaf.Synth.Region _POPUP_MENU_SEPARATORContent = default;
        private static bool _POPUP_MENU_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#PROGRESS_BAR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region PROGRESS_BAR { get { if (!_PROGRESS_BARReady) { _PROGRESS_BARContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "PROGRESS_BAR"); _PROGRESS_BARReady = true; } return _PROGRESS_BARContent; } }
        private static Javax.Swing.Plaf.Synth.Region _PROGRESS_BARContent = default;
        private static bool _PROGRESS_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#RADIO_BUTTON"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region RADIO_BUTTON { get { if (!_RADIO_BUTTONReady) { _RADIO_BUTTONContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "RADIO_BUTTON"); _RADIO_BUTTONReady = true; } return _RADIO_BUTTONContent; } }
        private static Javax.Swing.Plaf.Synth.Region _RADIO_BUTTONContent = default;
        private static bool _RADIO_BUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#RADIO_BUTTON_MENU_ITEM"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region RADIO_BUTTON_MENU_ITEM { get { if (!_RADIO_BUTTON_MENU_ITEMReady) { _RADIO_BUTTON_MENU_ITEMContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "RADIO_BUTTON_MENU_ITEM"); _RADIO_BUTTON_MENU_ITEMReady = true; } return _RADIO_BUTTON_MENU_ITEMContent; } }
        private static Javax.Swing.Plaf.Synth.Region _RADIO_BUTTON_MENU_ITEMContent = default;
        private static bool _RADIO_BUTTON_MENU_ITEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#ROOT_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region ROOT_PANE { get { if (!_ROOT_PANEReady) { _ROOT_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "ROOT_PANE"); _ROOT_PANEReady = true; } return _ROOT_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _ROOT_PANEContent = default;
        private static bool _ROOT_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SCROLL_BAR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SCROLL_BAR { get { if (!_SCROLL_BARReady) { _SCROLL_BARContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SCROLL_BAR"); _SCROLL_BARReady = true; } return _SCROLL_BARContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SCROLL_BARContent = default;
        private static bool _SCROLL_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SCROLL_BAR_THUMB"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SCROLL_BAR_THUMB { get { if (!_SCROLL_BAR_THUMBReady) { _SCROLL_BAR_THUMBContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SCROLL_BAR_THUMB"); _SCROLL_BAR_THUMBReady = true; } return _SCROLL_BAR_THUMBContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SCROLL_BAR_THUMBContent = default;
        private static bool _SCROLL_BAR_THUMBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SCROLL_BAR_TRACK"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SCROLL_BAR_TRACK { get { if (!_SCROLL_BAR_TRACKReady) { _SCROLL_BAR_TRACKContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SCROLL_BAR_TRACK"); _SCROLL_BAR_TRACKReady = true; } return _SCROLL_BAR_TRACKContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SCROLL_BAR_TRACKContent = default;
        private static bool _SCROLL_BAR_TRACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SCROLL_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SCROLL_PANE { get { if (!_SCROLL_PANEReady) { _SCROLL_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SCROLL_PANE"); _SCROLL_PANEReady = true; } return _SCROLL_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SCROLL_PANEContent = default;
        private static bool _SCROLL_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SEPARATOR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SEPARATOR { get { if (!_SEPARATORReady) { _SEPARATORContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SEPARATOR"); _SEPARATORReady = true; } return _SEPARATORContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SEPARATORContent = default;
        private static bool _SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SLIDER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SLIDER { get { if (!_SLIDERReady) { _SLIDERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SLIDER"); _SLIDERReady = true; } return _SLIDERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SLIDERContent = default;
        private static bool _SLIDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SLIDER_THUMB"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SLIDER_THUMB { get { if (!_SLIDER_THUMBReady) { _SLIDER_THUMBContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SLIDER_THUMB"); _SLIDER_THUMBReady = true; } return _SLIDER_THUMBContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SLIDER_THUMBContent = default;
        private static bool _SLIDER_THUMBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SLIDER_TRACK"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SLIDER_TRACK { get { if (!_SLIDER_TRACKReady) { _SLIDER_TRACKContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SLIDER_TRACK"); _SLIDER_TRACKReady = true; } return _SLIDER_TRACKContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SLIDER_TRACKContent = default;
        private static bool _SLIDER_TRACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SPINNER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SPINNER { get { if (!_SPINNERReady) { _SPINNERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SPINNER"); _SPINNERReady = true; } return _SPINNERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SPINNERContent = default;
        private static bool _SPINNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SPLIT_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SPLIT_PANE { get { if (!_SPLIT_PANEReady) { _SPLIT_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SPLIT_PANE"); _SPLIT_PANEReady = true; } return _SPLIT_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SPLIT_PANEContent = default;
        private static bool _SPLIT_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#SPLIT_PANE_DIVIDER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region SPLIT_PANE_DIVIDER { get { if (!_SPLIT_PANE_DIVIDERReady) { _SPLIT_PANE_DIVIDERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "SPLIT_PANE_DIVIDER"); _SPLIT_PANE_DIVIDERReady = true; } return _SPLIT_PANE_DIVIDERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _SPLIT_PANE_DIVIDERContent = default;
        private static bool _SPLIT_PANE_DIVIDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABBED_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABBED_PANE { get { if (!_TABBED_PANEReady) { _TABBED_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABBED_PANE"); _TABBED_PANEReady = true; } return _TABBED_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABBED_PANEContent = default;
        private static bool _TABBED_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABBED_PANE_CONTENT"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABBED_PANE_CONTENT { get { if (!_TABBED_PANE_CONTENTReady) { _TABBED_PANE_CONTENTContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABBED_PANE_CONTENT"); _TABBED_PANE_CONTENTReady = true; } return _TABBED_PANE_CONTENTContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABBED_PANE_CONTENTContent = default;
        private static bool _TABBED_PANE_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABBED_PANE_TAB"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABBED_PANE_TAB { get { if (!_TABBED_PANE_TABReady) { _TABBED_PANE_TABContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABBED_PANE_TAB"); _TABBED_PANE_TABReady = true; } return _TABBED_PANE_TABContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABBED_PANE_TABContent = default;
        private static bool _TABBED_PANE_TABReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABBED_PANE_TAB_AREA"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABBED_PANE_TAB_AREA { get { if (!_TABBED_PANE_TAB_AREAReady) { _TABBED_PANE_TAB_AREAContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABBED_PANE_TAB_AREA"); _TABBED_PANE_TAB_AREAReady = true; } return _TABBED_PANE_TAB_AREAContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABBED_PANE_TAB_AREAContent = default;
        private static bool _TABBED_PANE_TAB_AREAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABLE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABLE { get { if (!_TABLEReady) { _TABLEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABLE"); _TABLEReady = true; } return _TABLEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABLEContent = default;
        private static bool _TABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TABLE_HEADER"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TABLE_HEADER { get { if (!_TABLE_HEADERReady) { _TABLE_HEADERContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TABLE_HEADER"); _TABLE_HEADERReady = true; } return _TABLE_HEADERContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TABLE_HEADERContent = default;
        private static bool _TABLE_HEADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TEXT_AREA"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TEXT_AREA { get { if (!_TEXT_AREAReady) { _TEXT_AREAContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TEXT_AREA"); _TEXT_AREAReady = true; } return _TEXT_AREAContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TEXT_AREAContent = default;
        private static bool _TEXT_AREAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TEXT_FIELD"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TEXT_FIELD { get { if (!_TEXT_FIELDReady) { _TEXT_FIELDContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TEXT_FIELD"); _TEXT_FIELDReady = true; } return _TEXT_FIELDContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TEXT_FIELDContent = default;
        private static bool _TEXT_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TEXT_PANE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TEXT_PANE { get { if (!_TEXT_PANEReady) { _TEXT_PANEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TEXT_PANE"); _TEXT_PANEReady = true; } return _TEXT_PANEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TEXT_PANEContent = default;
        private static bool _TEXT_PANEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOGGLE_BUTTON"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOGGLE_BUTTON { get { if (!_TOGGLE_BUTTONReady) { _TOGGLE_BUTTONContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOGGLE_BUTTON"); _TOGGLE_BUTTONReady = true; } return _TOGGLE_BUTTONContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOGGLE_BUTTONContent = default;
        private static bool _TOGGLE_BUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOOL_BAR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOOL_BAR { get { if (!_TOOL_BARReady) { _TOOL_BARContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOOL_BAR"); _TOOL_BARReady = true; } return _TOOL_BARContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOOL_BARContent = default;
        private static bool _TOOL_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOOL_BAR_CONTENT"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOOL_BAR_CONTENT { get { if (!_TOOL_BAR_CONTENTReady) { _TOOL_BAR_CONTENTContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOOL_BAR_CONTENT"); _TOOL_BAR_CONTENTReady = true; } return _TOOL_BAR_CONTENTContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOOL_BAR_CONTENTContent = default;
        private static bool _TOOL_BAR_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOOL_BAR_DRAG_WINDOW"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOOL_BAR_DRAG_WINDOW { get { if (!_TOOL_BAR_DRAG_WINDOWReady) { _TOOL_BAR_DRAG_WINDOWContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOOL_BAR_DRAG_WINDOW"); _TOOL_BAR_DRAG_WINDOWReady = true; } return _TOOL_BAR_DRAG_WINDOWContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOOL_BAR_DRAG_WINDOWContent = default;
        private static bool _TOOL_BAR_DRAG_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOOL_BAR_SEPARATOR"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOOL_BAR_SEPARATOR { get { if (!_TOOL_BAR_SEPARATORReady) { _TOOL_BAR_SEPARATORContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOOL_BAR_SEPARATOR"); _TOOL_BAR_SEPARATORReady = true; } return _TOOL_BAR_SEPARATORContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOOL_BAR_SEPARATORContent = default;
        private static bool _TOOL_BAR_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TOOL_TIP"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TOOL_TIP { get { if (!_TOOL_TIPReady) { _TOOL_TIPContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TOOL_TIP"); _TOOL_TIPReady = true; } return _TOOL_TIPContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TOOL_TIPContent = default;
        private static bool _TOOL_TIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TREE"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TREE { get { if (!_TREEReady) { _TREEContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TREE"); _TREEReady = true; } return _TREEContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TREEContent = default;
        private static bool _TREEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#TREE_CELL"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region TREE_CELL { get { if (!_TREE_CELLReady) { _TREE_CELLContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "TREE_CELL"); _TREE_CELLReady = true; } return _TREE_CELLContent; } }
        private static Javax.Swing.Plaf.Synth.Region _TREE_CELLContent = default;
        private static bool _TREE_CELLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#VIEWPORT"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.Region VIEWPORT { get { if (!_VIEWPORTReady) { _VIEWPORTContent = SGetField<Javax.Swing.Plaf.Synth.Region>(LocalBridgeClazz, "VIEWPORT"); _VIEWPORTReady = true; } return _VIEWPORTContent; } }
        private static Javax.Swing.Plaf.Synth.Region _VIEWPORTContent = default;
        private static bool _VIEWPORTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/Region.html#isSubregion()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsSubregion()
        {
            return IExecuteWithSignature<bool>("isSubregion", "()Z");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}