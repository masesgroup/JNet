/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Swing.Plaf.Synth
{
    #region ColorType
    public partial class ColorType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#MAX_COUNT"/>
        /// </summary>
        public static int MAX_COUNT { get { if (!_MAX_COUNTReady) { _MAX_COUNTContent = SGetField<int>(LocalBridgeClazz, "MAX_COUNT"); _MAX_COUNTReady = true; } return _MAX_COUNTContent; } }
        private static int _MAX_COUNTContent = default;
        private static bool _MAX_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#BACKGROUND"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.ColorType BACKGROUND { get { if (!_BACKGROUNDReady) { _BACKGROUNDContent = SGetField<Javax.Swing.Plaf.Synth.ColorType>(LocalBridgeClazz, "BACKGROUND"); _BACKGROUNDReady = true; } return _BACKGROUNDContent; } }
        private static Javax.Swing.Plaf.Synth.ColorType _BACKGROUNDContent = default;
        private static bool _BACKGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#FOCUS"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.ColorType FOCUS { get { if (!_FOCUSReady) { _FOCUSContent = SGetField<Javax.Swing.Plaf.Synth.ColorType>(LocalBridgeClazz, "FOCUS"); _FOCUSReady = true; } return _FOCUSContent; } }
        private static Javax.Swing.Plaf.Synth.ColorType _FOCUSContent = default;
        private static bool _FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#FOREGROUND"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.ColorType FOREGROUND { get { if (!_FOREGROUNDReady) { _FOREGROUNDContent = SGetField<Javax.Swing.Plaf.Synth.ColorType>(LocalBridgeClazz, "FOREGROUND"); _FOREGROUNDReady = true; } return _FOREGROUNDContent; } }
        private static Javax.Swing.Plaf.Synth.ColorType _FOREGROUNDContent = default;
        private static bool _FOREGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#TEXT_BACKGROUND"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.ColorType TEXT_BACKGROUND { get { if (!_TEXT_BACKGROUNDReady) { _TEXT_BACKGROUNDContent = SGetField<Javax.Swing.Plaf.Synth.ColorType>(LocalBridgeClazz, "TEXT_BACKGROUND"); _TEXT_BACKGROUNDReady = true; } return _TEXT_BACKGROUNDContent; } }
        private static Javax.Swing.Plaf.Synth.ColorType _TEXT_BACKGROUNDContent = default;
        private static bool _TEXT_BACKGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#TEXT_FOREGROUND"/>
        /// </summary>
        public static Javax.Swing.Plaf.Synth.ColorType TEXT_FOREGROUND { get { if (!_TEXT_FOREGROUNDReady) { _TEXT_FOREGROUNDContent = SGetField<Javax.Swing.Plaf.Synth.ColorType>(LocalBridgeClazz, "TEXT_FOREGROUND"); _TEXT_FOREGROUNDReady = true; } return _TEXT_FOREGROUNDContent; } }
        private static Javax.Swing.Plaf.Synth.ColorType _TEXT_FOREGROUNDContent = default;
        private static bool _TEXT_FOREGROUNDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/ColorType.html#getID()"/> 
        /// </summary>
        public int ID
        {
            get { return IExecuteWithSignature<int>("getID", "()I"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}