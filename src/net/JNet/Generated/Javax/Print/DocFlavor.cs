/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Print
{
    #region DocFlavor declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html"/>
    /// </summary>
    public partial class DocFlavor : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DocFlavor>
    {
        const string _bridgeClassName = "javax.print.DocFlavor";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DocFlavor() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DocFlavor(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region BYTE_ARRAY declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html"/>
        /// </summary>
        public partial class BYTE_ARRAY : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$BYTE_ARRAY";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public BYTE_ARRAY() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public BYTE_ARRAY(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region CHAR_ARRAY declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.CHAR_ARRAY.html"/>
        /// </summary>
        public partial class CHAR_ARRAY : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$CHAR_ARRAY";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CHAR_ARRAY() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CHAR_ARRAY(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region INPUT_STREAM declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html"/>
        /// </summary>
        public partial class INPUT_STREAM : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$INPUT_STREAM";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public INPUT_STREAM() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public INPUT_STREAM(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region READER declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.READER.html"/>
        /// </summary>
        public partial class READER : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$READER";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public READER() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public READER(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region SERVICE_FORMATTED declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html"/>
        /// </summary>
        public partial class SERVICE_FORMATTED : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$SERVICE_FORMATTED";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SERVICE_FORMATTED() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SERVICE_FORMATTED(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region STRING declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.STRING.html"/>
        /// </summary>
        public partial class STRING : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$STRING";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public STRING() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public STRING(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region URL declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html"/>
        /// </summary>
        public partial class URL : Javax.Print.DocFlavor
        {
            const string _bridgeClassName = "javax.print.DocFlavor$URL";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public URL() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public URL(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region DocFlavor implementation
    public partial class DocFlavor
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public DocFlavor(Java.Lang.String arg0, Java.Lang.String arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Javax.Print.DocFlavor"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Javax.Print.DocFlavor t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Javax.Print.DocFlavor"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Javax.Print.DocFlavor t) => t.Cast<Java.Lang.Cloneable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#hostEncoding"/>
        /// </summary>
        public static Java.Lang.String hostEncoding { get { if (!_hostEncodingReady) { _hostEncodingContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "hostEncoding"); _hostEncodingReady = true; } return _hostEncodingContent; } }
        private static Java.Lang.String _hostEncodingContent = default;
        private static bool _hostEncodingReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#getMediaSubtype()"/> 
        /// </summary>
        public Java.Lang.String MediaSubtype
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getMediaSubtype", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#getMediaType()"/> 
        /// </summary>
        public Java.Lang.String MediaType
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getMediaType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#getMimeType()"/> 
        /// </summary>
        public Java.Lang.String MimeType
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getMimeType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#getRepresentationClassName()"/> 
        /// </summary>
        public Java.Lang.String RepresentationClassName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getRepresentationClassName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.html#getParameter(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetParameter(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getParameter", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Nested classes
        #region BYTE_ARRAY implementation
        public partial class BYTE_ARRAY
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public BYTE_ARRAY(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#AUTOSENSE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY AUTOSENSE { get { if (!_AUTOSENSEReady) { _AUTOSENSEContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "AUTOSENSE"); _AUTOSENSEReady = true; } return _AUTOSENSEContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _AUTOSENSEContent = default;
            private static bool _AUTOSENSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#GIF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY GIF { get { if (!_GIFReady) { _GIFContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "GIF"); _GIFReady = true; } return _GIFContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _GIFContent = default;
            private static bool _GIFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#JPEG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY JPEG { get { if (!_JPEGReady) { _JPEGContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "JPEG"); _JPEGReady = true; } return _JPEGContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _JPEGContent = default;
            private static bool _JPEGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#PCL"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY PCL { get { if (!_PCLReady) { _PCLContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "PCL"); _PCLReady = true; } return _PCLContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _PCLContent = default;
            private static bool _PCLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#PDF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY PDF { get { if (!_PDFReady) { _PDFContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "PDF"); _PDFReady = true; } return _PDFContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _PDFContent = default;
            private static bool _PDFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#PNG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY PNG { get { if (!_PNGReady) { _PNGContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "PNG"); _PNGReady = true; } return _PNGContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _PNGContent = default;
            private static bool _PNGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#POSTSCRIPT"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY POSTSCRIPT { get { if (!_POSTSCRIPTReady) { _POSTSCRIPTContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "POSTSCRIPT"); _POSTSCRIPTReady = true; } return _POSTSCRIPTContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _POSTSCRIPTContent = default;
            private static bool _POSTSCRIPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_HOST { get { if (!_TEXT_HTML_HOSTReady) { _TEXT_HTML_HOSTContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_HOST"); _TEXT_HTML_HOSTReady = true; } return _TEXT_HTML_HOSTContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_HOSTContent = default;
            private static bool _TEXT_HTML_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_US_ASCII { get { if (!_TEXT_HTML_US_ASCIIReady) { _TEXT_HTML_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_US_ASCII"); _TEXT_HTML_US_ASCIIReady = true; } return _TEXT_HTML_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_US_ASCIIContent = default;
            private static bool _TEXT_HTML_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_UTF_16 { get { if (!_TEXT_HTML_UTF_16Ready) { _TEXT_HTML_UTF_16Content = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_UTF_16"); _TEXT_HTML_UTF_16Ready = true; } return _TEXT_HTML_UTF_16Content; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_UTF_16Content = default;
            private static bool _TEXT_HTML_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_UTF_16BE { get { if (!_TEXT_HTML_UTF_16BEReady) { _TEXT_HTML_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_UTF_16BE"); _TEXT_HTML_UTF_16BEReady = true; } return _TEXT_HTML_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_UTF_16BEContent = default;
            private static bool _TEXT_HTML_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_UTF_16LE { get { if (!_TEXT_HTML_UTF_16LEReady) { _TEXT_HTML_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_UTF_16LE"); _TEXT_HTML_UTF_16LEReady = true; } return _TEXT_HTML_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_UTF_16LEContent = default;
            private static bool _TEXT_HTML_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_HTML_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_HTML_UTF_8 { get { if (!_TEXT_HTML_UTF_8Ready) { _TEXT_HTML_UTF_8Content = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_HTML_UTF_8"); _TEXT_HTML_UTF_8Ready = true; } return _TEXT_HTML_UTF_8Content; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_HTML_UTF_8Content = default;
            private static bool _TEXT_HTML_UTF_8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_HOST { get { if (!_TEXT_PLAIN_HOSTReady) { _TEXT_PLAIN_HOSTContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_HOST"); _TEXT_PLAIN_HOSTReady = true; } return _TEXT_PLAIN_HOSTContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_HOSTContent = default;
            private static bool _TEXT_PLAIN_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_US_ASCII { get { if (!_TEXT_PLAIN_US_ASCIIReady) { _TEXT_PLAIN_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_US_ASCII"); _TEXT_PLAIN_US_ASCIIReady = true; } return _TEXT_PLAIN_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_US_ASCIIContent = default;
            private static bool _TEXT_PLAIN_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_UTF_16 { get { if (!_TEXT_PLAIN_UTF_16Ready) { _TEXT_PLAIN_UTF_16Content = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16"); _TEXT_PLAIN_UTF_16Ready = true; } return _TEXT_PLAIN_UTF_16Content; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_UTF_16Content = default;
            private static bool _TEXT_PLAIN_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_UTF_16BE { get { if (!_TEXT_PLAIN_UTF_16BEReady) { _TEXT_PLAIN_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16BE"); _TEXT_PLAIN_UTF_16BEReady = true; } return _TEXT_PLAIN_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_UTF_16BEContent = default;
            private static bool _TEXT_PLAIN_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_UTF_16LE { get { if (!_TEXT_PLAIN_UTF_16LEReady) { _TEXT_PLAIN_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16LE"); _TEXT_PLAIN_UTF_16LEReady = true; } return _TEXT_PLAIN_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_UTF_16LEContent = default;
            private static bool _TEXT_PLAIN_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.BYTE_ARRAY.html#TEXT_PLAIN_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.BYTE_ARRAY TEXT_PLAIN_UTF_8 { get { if (!_TEXT_PLAIN_UTF_8Ready) { _TEXT_PLAIN_UTF_8Content = SGetField<Javax.Print.DocFlavor.BYTE_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN_UTF_8"); _TEXT_PLAIN_UTF_8Ready = true; } return _TEXT_PLAIN_UTF_8Content; } }
            private static Javax.Print.DocFlavor.BYTE_ARRAY _TEXT_PLAIN_UTF_8Content = default;
            private static bool _TEXT_PLAIN_UTF_8Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CHAR_ARRAY implementation
        public partial class CHAR_ARRAY
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.CHAR_ARRAY.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public CHAR_ARRAY(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.CHAR_ARRAY.html#TEXT_HTML"/>
            /// </summary>
            public static Javax.Print.DocFlavor.CHAR_ARRAY TEXT_HTML { get { if (!_TEXT_HTMLReady) { _TEXT_HTMLContent = SGetField<Javax.Print.DocFlavor.CHAR_ARRAY>(LocalBridgeClazz, "TEXT_HTML"); _TEXT_HTMLReady = true; } return _TEXT_HTMLContent; } }
            private static Javax.Print.DocFlavor.CHAR_ARRAY _TEXT_HTMLContent = default;
            private static bool _TEXT_HTMLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.CHAR_ARRAY.html#TEXT_PLAIN"/>
            /// </summary>
            public static Javax.Print.DocFlavor.CHAR_ARRAY TEXT_PLAIN { get { if (!_TEXT_PLAINReady) { _TEXT_PLAINContent = SGetField<Javax.Print.DocFlavor.CHAR_ARRAY>(LocalBridgeClazz, "TEXT_PLAIN"); _TEXT_PLAINReady = true; } return _TEXT_PLAINContent; } }
            private static Javax.Print.DocFlavor.CHAR_ARRAY _TEXT_PLAINContent = default;
            private static bool _TEXT_PLAINReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region INPUT_STREAM implementation
        public partial class INPUT_STREAM
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public INPUT_STREAM(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#AUTOSENSE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM AUTOSENSE { get { if (!_AUTOSENSEReady) { _AUTOSENSEContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "AUTOSENSE"); _AUTOSENSEReady = true; } return _AUTOSENSEContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _AUTOSENSEContent = default;
            private static bool _AUTOSENSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#GIF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM GIF { get { if (!_GIFReady) { _GIFContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "GIF"); _GIFReady = true; } return _GIFContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _GIFContent = default;
            private static bool _GIFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#JPEG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM JPEG { get { if (!_JPEGReady) { _JPEGContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "JPEG"); _JPEGReady = true; } return _JPEGContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _JPEGContent = default;
            private static bool _JPEGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#PCL"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM PCL { get { if (!_PCLReady) { _PCLContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "PCL"); _PCLReady = true; } return _PCLContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _PCLContent = default;
            private static bool _PCLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#PDF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM PDF { get { if (!_PDFReady) { _PDFContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "PDF"); _PDFReady = true; } return _PDFContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _PDFContent = default;
            private static bool _PDFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#PNG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM PNG { get { if (!_PNGReady) { _PNGContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "PNG"); _PNGReady = true; } return _PNGContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _PNGContent = default;
            private static bool _PNGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#POSTSCRIPT"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM POSTSCRIPT { get { if (!_POSTSCRIPTReady) { _POSTSCRIPTContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "POSTSCRIPT"); _POSTSCRIPTReady = true; } return _POSTSCRIPTContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _POSTSCRIPTContent = default;
            private static bool _POSTSCRIPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_HOST { get { if (!_TEXT_HTML_HOSTReady) { _TEXT_HTML_HOSTContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_HOST"); _TEXT_HTML_HOSTReady = true; } return _TEXT_HTML_HOSTContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_HOSTContent = default;
            private static bool _TEXT_HTML_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_US_ASCII { get { if (!_TEXT_HTML_US_ASCIIReady) { _TEXT_HTML_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_US_ASCII"); _TEXT_HTML_US_ASCIIReady = true; } return _TEXT_HTML_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_US_ASCIIContent = default;
            private static bool _TEXT_HTML_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_UTF_16 { get { if (!_TEXT_HTML_UTF_16Ready) { _TEXT_HTML_UTF_16Content = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_UTF_16"); _TEXT_HTML_UTF_16Ready = true; } return _TEXT_HTML_UTF_16Content; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_UTF_16Content = default;
            private static bool _TEXT_HTML_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_UTF_16BE { get { if (!_TEXT_HTML_UTF_16BEReady) { _TEXT_HTML_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_UTF_16BE"); _TEXT_HTML_UTF_16BEReady = true; } return _TEXT_HTML_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_UTF_16BEContent = default;
            private static bool _TEXT_HTML_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_UTF_16LE { get { if (!_TEXT_HTML_UTF_16LEReady) { _TEXT_HTML_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_UTF_16LE"); _TEXT_HTML_UTF_16LEReady = true; } return _TEXT_HTML_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_UTF_16LEContent = default;
            private static bool _TEXT_HTML_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_HTML_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_HTML_UTF_8 { get { if (!_TEXT_HTML_UTF_8Ready) { _TEXT_HTML_UTF_8Content = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_HTML_UTF_8"); _TEXT_HTML_UTF_8Ready = true; } return _TEXT_HTML_UTF_8Content; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_HTML_UTF_8Content = default;
            private static bool _TEXT_HTML_UTF_8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_HOST { get { if (!_TEXT_PLAIN_HOSTReady) { _TEXT_PLAIN_HOSTContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_HOST"); _TEXT_PLAIN_HOSTReady = true; } return _TEXT_PLAIN_HOSTContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_HOSTContent = default;
            private static bool _TEXT_PLAIN_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_US_ASCII { get { if (!_TEXT_PLAIN_US_ASCIIReady) { _TEXT_PLAIN_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_US_ASCII"); _TEXT_PLAIN_US_ASCIIReady = true; } return _TEXT_PLAIN_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_US_ASCIIContent = default;
            private static bool _TEXT_PLAIN_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_UTF_16 { get { if (!_TEXT_PLAIN_UTF_16Ready) { _TEXT_PLAIN_UTF_16Content = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16"); _TEXT_PLAIN_UTF_16Ready = true; } return _TEXT_PLAIN_UTF_16Content; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_UTF_16Content = default;
            private static bool _TEXT_PLAIN_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_UTF_16BE { get { if (!_TEXT_PLAIN_UTF_16BEReady) { _TEXT_PLAIN_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16BE"); _TEXT_PLAIN_UTF_16BEReady = true; } return _TEXT_PLAIN_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_UTF_16BEContent = default;
            private static bool _TEXT_PLAIN_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_UTF_16LE { get { if (!_TEXT_PLAIN_UTF_16LEReady) { _TEXT_PLAIN_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16LE"); _TEXT_PLAIN_UTF_16LEReady = true; } return _TEXT_PLAIN_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_UTF_16LEContent = default;
            private static bool _TEXT_PLAIN_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.INPUT_STREAM.html#TEXT_PLAIN_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.INPUT_STREAM TEXT_PLAIN_UTF_8 { get { if (!_TEXT_PLAIN_UTF_8Ready) { _TEXT_PLAIN_UTF_8Content = SGetField<Javax.Print.DocFlavor.INPUT_STREAM>(LocalBridgeClazz, "TEXT_PLAIN_UTF_8"); _TEXT_PLAIN_UTF_8Ready = true; } return _TEXT_PLAIN_UTF_8Content; } }
            private static Javax.Print.DocFlavor.INPUT_STREAM _TEXT_PLAIN_UTF_8Content = default;
            private static bool _TEXT_PLAIN_UTF_8Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region READER implementation
        public partial class READER
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.READER.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public READER(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.READER.html#TEXT_HTML"/>
            /// </summary>
            public static Javax.Print.DocFlavor.READER TEXT_HTML { get { if (!_TEXT_HTMLReady) { _TEXT_HTMLContent = SGetField<Javax.Print.DocFlavor.READER>(LocalBridgeClazz, "TEXT_HTML"); _TEXT_HTMLReady = true; } return _TEXT_HTMLContent; } }
            private static Javax.Print.DocFlavor.READER _TEXT_HTMLContent = default;
            private static bool _TEXT_HTMLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.READER.html#TEXT_PLAIN"/>
            /// </summary>
            public static Javax.Print.DocFlavor.READER TEXT_PLAIN { get { if (!_TEXT_PLAINReady) { _TEXT_PLAINContent = SGetField<Javax.Print.DocFlavor.READER>(LocalBridgeClazz, "TEXT_PLAIN"); _TEXT_PLAINReady = true; } return _TEXT_PLAINContent; } }
            private static Javax.Print.DocFlavor.READER _TEXT_PLAINContent = default;
            private static bool _TEXT_PLAINReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SERVICE_FORMATTED implementation
        public partial class SERVICE_FORMATTED
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public SERVICE_FORMATTED(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html#PAGEABLE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.SERVICE_FORMATTED PAGEABLE { get { if (!_PAGEABLEReady) { _PAGEABLEContent = SGetField<Javax.Print.DocFlavor.SERVICE_FORMATTED>(LocalBridgeClazz, "PAGEABLE"); _PAGEABLEReady = true; } return _PAGEABLEContent; } }
            private static Javax.Print.DocFlavor.SERVICE_FORMATTED _PAGEABLEContent = default;
            private static bool _PAGEABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html#PRINTABLE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.SERVICE_FORMATTED PRINTABLE { get { if (!_PRINTABLEReady) { _PRINTABLEContent = SGetField<Javax.Print.DocFlavor.SERVICE_FORMATTED>(LocalBridgeClazz, "PRINTABLE"); _PRINTABLEReady = true; } return _PRINTABLEContent; } }
            private static Javax.Print.DocFlavor.SERVICE_FORMATTED _PRINTABLEContent = default;
            private static bool _PRINTABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.SERVICE_FORMATTED.html#RENDERABLE_IMAGE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.SERVICE_FORMATTED RENDERABLE_IMAGE { get { if (!_RENDERABLE_IMAGEReady) { _RENDERABLE_IMAGEContent = SGetField<Javax.Print.DocFlavor.SERVICE_FORMATTED>(LocalBridgeClazz, "RENDERABLE_IMAGE"); _RENDERABLE_IMAGEReady = true; } return _RENDERABLE_IMAGEContent; } }
            private static Javax.Print.DocFlavor.SERVICE_FORMATTED _RENDERABLE_IMAGEContent = default;
            private static bool _RENDERABLE_IMAGEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region STRING implementation
        public partial class STRING
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.STRING.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public STRING(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.STRING.html#TEXT_HTML"/>
            /// </summary>
            public static Javax.Print.DocFlavor.STRING TEXT_HTML { get { if (!_TEXT_HTMLReady) { _TEXT_HTMLContent = SGetField<Javax.Print.DocFlavor.STRING>(LocalBridgeClazz, "TEXT_HTML"); _TEXT_HTMLReady = true; } return _TEXT_HTMLContent; } }
            private static Javax.Print.DocFlavor.STRING _TEXT_HTMLContent = default;
            private static bool _TEXT_HTMLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.STRING.html#TEXT_PLAIN"/>
            /// </summary>
            public static Javax.Print.DocFlavor.STRING TEXT_PLAIN { get { if (!_TEXT_PLAINReady) { _TEXT_PLAINContent = SGetField<Javax.Print.DocFlavor.STRING>(LocalBridgeClazz, "TEXT_PLAIN"); _TEXT_PLAINReady = true; } return _TEXT_PLAINContent; } }
            private static Javax.Print.DocFlavor.STRING _TEXT_PLAINContent = default;
            private static bool _TEXT_PLAINReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region URL implementation
        public partial class URL
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public URL(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#AUTOSENSE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL AUTOSENSE { get { if (!_AUTOSENSEReady) { _AUTOSENSEContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "AUTOSENSE"); _AUTOSENSEReady = true; } return _AUTOSENSEContent; } }
            private static Javax.Print.DocFlavor.URL _AUTOSENSEContent = default;
            private static bool _AUTOSENSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#GIF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL GIF { get { if (!_GIFReady) { _GIFContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "GIF"); _GIFReady = true; } return _GIFContent; } }
            private static Javax.Print.DocFlavor.URL _GIFContent = default;
            private static bool _GIFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#JPEG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL JPEG { get { if (!_JPEGReady) { _JPEGContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "JPEG"); _JPEGReady = true; } return _JPEGContent; } }
            private static Javax.Print.DocFlavor.URL _JPEGContent = default;
            private static bool _JPEGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#PCL"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL PCL { get { if (!_PCLReady) { _PCLContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "PCL"); _PCLReady = true; } return _PCLContent; } }
            private static Javax.Print.DocFlavor.URL _PCLContent = default;
            private static bool _PCLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#PDF"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL PDF { get { if (!_PDFReady) { _PDFContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "PDF"); _PDFReady = true; } return _PDFContent; } }
            private static Javax.Print.DocFlavor.URL _PDFContent = default;
            private static bool _PDFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#PNG"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL PNG { get { if (!_PNGReady) { _PNGContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "PNG"); _PNGReady = true; } return _PNGContent; } }
            private static Javax.Print.DocFlavor.URL _PNGContent = default;
            private static bool _PNGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#POSTSCRIPT"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL POSTSCRIPT { get { if (!_POSTSCRIPTReady) { _POSTSCRIPTContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "POSTSCRIPT"); _POSTSCRIPTReady = true; } return _POSTSCRIPTContent; } }
            private static Javax.Print.DocFlavor.URL _POSTSCRIPTContent = default;
            private static bool _POSTSCRIPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_HOST { get { if (!_TEXT_HTML_HOSTReady) { _TEXT_HTML_HOSTContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_HOST"); _TEXT_HTML_HOSTReady = true; } return _TEXT_HTML_HOSTContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_HOSTContent = default;
            private static bool _TEXT_HTML_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_US_ASCII { get { if (!_TEXT_HTML_US_ASCIIReady) { _TEXT_HTML_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_US_ASCII"); _TEXT_HTML_US_ASCIIReady = true; } return _TEXT_HTML_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_US_ASCIIContent = default;
            private static bool _TEXT_HTML_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_UTF_16 { get { if (!_TEXT_HTML_UTF_16Ready) { _TEXT_HTML_UTF_16Content = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_UTF_16"); _TEXT_HTML_UTF_16Ready = true; } return _TEXT_HTML_UTF_16Content; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_UTF_16Content = default;
            private static bool _TEXT_HTML_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_UTF_16BE { get { if (!_TEXT_HTML_UTF_16BEReady) { _TEXT_HTML_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_UTF_16BE"); _TEXT_HTML_UTF_16BEReady = true; } return _TEXT_HTML_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_UTF_16BEContent = default;
            private static bool _TEXT_HTML_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_UTF_16LE { get { if (!_TEXT_HTML_UTF_16LEReady) { _TEXT_HTML_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_UTF_16LE"); _TEXT_HTML_UTF_16LEReady = true; } return _TEXT_HTML_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_UTF_16LEContent = default;
            private static bool _TEXT_HTML_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_HTML_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_HTML_UTF_8 { get { if (!_TEXT_HTML_UTF_8Ready) { _TEXT_HTML_UTF_8Content = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_HTML_UTF_8"); _TEXT_HTML_UTF_8Ready = true; } return _TEXT_HTML_UTF_8Content; } }
            private static Javax.Print.DocFlavor.URL _TEXT_HTML_UTF_8Content = default;
            private static bool _TEXT_HTML_UTF_8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_HOST"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_HOST { get { if (!_TEXT_PLAIN_HOSTReady) { _TEXT_PLAIN_HOSTContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_HOST"); _TEXT_PLAIN_HOSTReady = true; } return _TEXT_PLAIN_HOSTContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_HOSTContent = default;
            private static bool _TEXT_PLAIN_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_US_ASCII"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_US_ASCII { get { if (!_TEXT_PLAIN_US_ASCIIReady) { _TEXT_PLAIN_US_ASCIIContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_US_ASCII"); _TEXT_PLAIN_US_ASCIIReady = true; } return _TEXT_PLAIN_US_ASCIIContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_US_ASCIIContent = default;
            private static bool _TEXT_PLAIN_US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_UTF_16"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_UTF_16 { get { if (!_TEXT_PLAIN_UTF_16Ready) { _TEXT_PLAIN_UTF_16Content = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16"); _TEXT_PLAIN_UTF_16Ready = true; } return _TEXT_PLAIN_UTF_16Content; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_UTF_16Content = default;
            private static bool _TEXT_PLAIN_UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_UTF_16BE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_UTF_16BE { get { if (!_TEXT_PLAIN_UTF_16BEReady) { _TEXT_PLAIN_UTF_16BEContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16BE"); _TEXT_PLAIN_UTF_16BEReady = true; } return _TEXT_PLAIN_UTF_16BEContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_UTF_16BEContent = default;
            private static bool _TEXT_PLAIN_UTF_16BEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_UTF_16LE"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_UTF_16LE { get { if (!_TEXT_PLAIN_UTF_16LEReady) { _TEXT_PLAIN_UTF_16LEContent = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_UTF_16LE"); _TEXT_PLAIN_UTF_16LEReady = true; } return _TEXT_PLAIN_UTF_16LEContent; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_UTF_16LEContent = default;
            private static bool _TEXT_PLAIN_UTF_16LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/print/DocFlavor.URL.html#TEXT_PLAIN_UTF_8"/>
            /// </summary>
            public static Javax.Print.DocFlavor.URL TEXT_PLAIN_UTF_8 { get { if (!_TEXT_PLAIN_UTF_8Ready) { _TEXT_PLAIN_UTF_8Content = SGetField<Javax.Print.DocFlavor.URL>(LocalBridgeClazz, "TEXT_PLAIN_UTF_8"); _TEXT_PLAIN_UTF_8Ready = true; } return _TEXT_PLAIN_UTF_8Content; } }
            private static Javax.Print.DocFlavor.URL _TEXT_PLAIN_UTF_8Content = default;
            private static bool _TEXT_PLAIN_UTF_8Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}