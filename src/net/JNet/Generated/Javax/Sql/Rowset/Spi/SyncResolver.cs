/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Sql.Rowset.Spi
{
    #region SyncResolver
    public partial class SyncResolver
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Javax.Sql.Rowset.Spi.SyncResolver"/> to <see cref="Javax.Sql.RowSet"/>
        /// </summary>
        public static implicit operator Javax.Sql.RowSet(Javax.Sql.Rowset.Spi.SyncResolver t) => t.Cast<Javax.Sql.RowSet>();
        
        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#DELETE_ROW_CONFLICT"/>
        /// </summary>
        public static int DELETE_ROW_CONFLICT => Clazz.GetField<int>("DELETE_ROW_CONFLICT");
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#INSERT_ROW_CONFLICT"/>
        /// </summary>
        public static int INSERT_ROW_CONFLICT => Clazz.GetField<int>("INSERT_ROW_CONFLICT");
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#NO_ROW_CONFLICT"/>
        /// </summary>
        public static int NO_ROW_CONFLICT => Clazz.GetField<int>("NO_ROW_CONFLICT");
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#UPDATE_ROW_CONFLICT"/>
        /// </summary>
        public static int UPDATE_ROW_CONFLICT => Clazz.GetField<int>("UPDATE_ROW_CONFLICT");
        
        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#getStatus()"/> 
        /// </summary>
        public int Status
        {
            get { return IExecute<int>("getStatus"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#nextConflict()"/>
        /// </summary>
        
        /// <returns><see langword="bool"/></returns>
        /// <exception cref="Java.Sql.SQLException"/>
        public bool NextConflict()
        {
            return IExecute<bool>("nextConflict");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#previousConflict()"/>
        /// </summary>
        
        /// <returns><see langword="bool"/></returns>
        /// <exception cref="Java.Sql.SQLException"/>
        public bool PreviousConflict()
        {
            return IExecute<bool>("previousConflict");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#getConflictValue(int)"/>
        /// </summary>
        /// <param name="arg0"><see langword="int"/></param>
        /// <returns><see langword="object"/></returns>
        /// <exception cref="Java.Sql.SQLException"/>
        public object GetConflictValue(int arg0)
        {
            return IExecute("getConflictValue", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#getConflictValue(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see langword="string"/></param>
        /// <returns><see langword="object"/></returns>
        /// <exception cref="Java.Sql.SQLException"/>
        public object GetConflictValue(string arg0)
        {
            return IExecute("getConflictValue", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#setResolvedValue(int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see langword="int"/></param>
        /// <param name="arg1"><see langword="object"/></param>
        /// <exception cref="Java.Sql.SQLException"/>
        public void SetResolvedValue(int arg0, object arg1)
        {
            IExecute("setResolvedValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html#setResolvedValue(java.lang.String,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see langword="string"/></param>
        /// <param name="arg1"><see langword="object"/></param>
        /// <exception cref="Java.Sql.SQLException"/>
        public void SetResolvedValue(string arg0, object arg1)
        {
            IExecute("setResolvedValue", arg0, arg1);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}