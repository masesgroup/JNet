/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Sql.Rowset.Spi
{
    #region SyncFactory declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html"/>
    /// </summary>
    public partial class SyncFactory : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SyncFactory>
    {
        const string _bridgeClassName = "javax.sql.rowset.spi.SyncFactory";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SyncFactory() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SyncFactory(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region SyncFactory implementation
    public partial class SyncFactory
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#ROWSET_SYNC_PROVIDER"/>
        /// </summary>
        public static Java.Lang.String ROWSET_SYNC_PROVIDER { get { if (!_ROWSET_SYNC_PROVIDERReady) { _ROWSET_SYNC_PROVIDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROWSET_SYNC_PROVIDER"); _ROWSET_SYNC_PROVIDERReady = true; } return _ROWSET_SYNC_PROVIDERContent; } }
        private static Java.Lang.String _ROWSET_SYNC_PROVIDERContent = default;
        private static bool _ROWSET_SYNC_PROVIDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#ROWSET_SYNC_PROVIDER_VERSION"/>
        /// </summary>
        public static Java.Lang.String ROWSET_SYNC_PROVIDER_VERSION { get { if (!_ROWSET_SYNC_PROVIDER_VERSIONReady) { _ROWSET_SYNC_PROVIDER_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROWSET_SYNC_PROVIDER_VERSION"); _ROWSET_SYNC_PROVIDER_VERSIONReady = true; } return _ROWSET_SYNC_PROVIDER_VERSIONContent; } }
        private static Java.Lang.String _ROWSET_SYNC_PROVIDER_VERSIONContent = default;
        private static bool _ROWSET_SYNC_PROVIDER_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#ROWSET_SYNC_VENDOR"/>
        /// </summary>
        public static Java.Lang.String ROWSET_SYNC_VENDOR { get { if (!_ROWSET_SYNC_VENDORReady) { _ROWSET_SYNC_VENDORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROWSET_SYNC_VENDOR"); _ROWSET_SYNC_VENDORReady = true; } return _ROWSET_SYNC_VENDORContent; } }
        private static Java.Lang.String _ROWSET_SYNC_VENDORContent = default;
        private static bool _ROWSET_SYNC_VENDORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#getSyncFactory()"/> 
        /// </summary>
        public static Javax.Sql.Rowset.Spi.SyncFactory GetSyncFactory
        {
            get { return SExecuteWithSignature<Javax.Sql.Rowset.Spi.SyncFactory>(LocalBridgeClazz, "getSyncFactory", "()Ljavax/sql/rowset/spi/SyncFactory;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#getLogger()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#setLogger(java.util.logging.Logger)"/>
        /// </summary>
        public static Java.Util.Logging.Logger Logger
        {
            get { return SExecuteWithSignature<Java.Util.Logging.Logger>(LocalBridgeClazz, "getLogger", "()Ljava/util/logging/Logger;"); } set { SExecuteWithSignature(LocalBridgeClazz, "setLogger", "(Ljava/util/logging/Logger;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#getRegisteredProviders()"/> 
        /// </summary>
        public static Java.Util.Enumeration<Javax.Sql.Rowset.Spi.SyncProvider> RegisteredProviders
        {
            get { return SExecuteWithSignature<Java.Util.Enumeration<Javax.Sql.Rowset.Spi.SyncProvider>>(LocalBridgeClazz, "getRegisteredProviders", "()Ljava/util/Enumeration;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#getInstance(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Javax.Sql.Rowset.Spi.SyncProvider"/></returns>
        /// <exception cref="Javax.Sql.Rowset.Spi.SyncFactoryException"/>
        public static Javax.Sql.Rowset.Spi.SyncProvider GetInstance(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Javax.Sql.Rowset.Spi.SyncProvider>(LocalBridgeClazz, "getInstance", "(Ljava/lang/String;)Ljavax/sql/rowset/spi/SyncProvider;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#registerProvider(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Javax.Sql.Rowset.Spi.SyncFactoryException"/>
        public static void RegisterProvider(Java.Lang.String arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "registerProvider", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#setJNDIContext(javax.naming.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Naming.Context"/></param>
        /// <exception cref="Javax.Sql.Rowset.Spi.SyncFactoryException"/>
        public static void SetJNDIContext(Javax.Naming.Context arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setJNDIContext", "(Ljavax/naming/Context;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#unregisterProvider(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Javax.Sql.Rowset.Spi.SyncFactoryException"/>
        public static void UnregisterProvider(Java.Lang.String arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "unregisterProvider", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html#setLogger(java.util.logging.Logger,java.util.logging.Level)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Logging.Logger"/></param>
        /// <param name="arg1"><see cref="Java.Util.Logging.Level"/></param>
        public static void SetLogger(Java.Util.Logging.Logger arg0, Java.Util.Logging.Level arg1)
        {
            SExecute(LocalBridgeClazz, "setLogger", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}