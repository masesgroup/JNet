/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Sql.Rowset.Serial
{
    #region SerialBlob
    public partial class SerialBlob
    {
        #region Constructors
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#<init>(byte[]) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public SerialBlob(byte[] arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#<init>(java.sql.Blob) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public SerialBlob(Java.Sql.Blob arg0)
            : base(arg0)
        {
        }
        
        #endregion

        #region Class/Interface conversion operators
        public static implicit operator Java.Sql.Blob(Javax.Sql.Rowset.Serial.SerialBlob t) => t.Cast<Java.Sql.Blob>();
        public static implicit operator Java.Io.Serializable(Javax.Sql.Rowset.Serial.SerialBlob t) => t.Cast<Java.Io.Serializable>();
        public static implicit operator Java.Lang.Cloneable(Javax.Sql.Rowset.Serial.SerialBlob t) => t.Cast<Java.Lang.Cloneable>();
        
        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#getBinaryStream() throws javax.sql.rowset.serial.SerialException 
        /// </summary>
        public Java.Io.InputStream BinaryStream
        {
            get { return IExecute<Java.Io.InputStream>("getBinaryStream"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#getBytes(long,int) throws javax.sql.rowset.serial.SerialException
        /// </summary>
        public byte[] GetBytes(long arg0, int arg1)
        {
            return IExecuteArray<byte>("getBytes", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#setBytes(long,byte[],int,int) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public int SetBytes(long arg0, byte[] arg1, int arg2, int arg3)
        {
            return IExecute<int>("setBytes", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#setBytes(long,byte[]) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public int SetBytes(long arg0, byte[] arg1)
        {
            return IExecute<int>("setBytes", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#getBinaryStream(long,long) throws java.sql.SQLException
        /// </summary>
        public Java.Io.InputStream GetBinaryStream(long arg0, long arg1)
        {
            return IExecute<Java.Io.InputStream>("getBinaryStream", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#setBinaryStream(long) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public Java.Io.OutputStream SetBinaryStream(long arg0)
        {
            return IExecute<Java.Io.OutputStream>("setBinaryStream", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#length() throws javax.sql.rowset.serial.SerialException
        /// </summary>
        public long Length()
        {
            return IExecute<long>("length");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#position(byte[],long) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public long Position(byte[] arg0, long arg1)
        {
            return IExecute<long>("position", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#position(java.sql.Blob,long) throws javax.sql.rowset.serial.SerialException,java.sql.SQLException
        /// </summary>
        public long Position(Java.Sql.Blob arg0, long arg1)
        {
            return IExecute<long>("position", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#free() throws java.sql.SQLException
        /// </summary>
        public void Free()
        {
            IExecute("free");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html#truncate(long) throws javax.sql.rowset.serial.SerialException
        /// </summary>
        public void Truncate(long arg0)
        {
            IExecute("truncate", arg0);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}