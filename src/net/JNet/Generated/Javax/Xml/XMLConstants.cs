/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Xml
{
    #region XMLConstants declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html"/>
    /// </summary>
    public partial class XMLConstants : MASES.JCOBridge.C2JBridge.JVMBridgeBase<XMLConstants>
    {
        const string _bridgeClassName = "javax.xml.XMLConstants";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public XMLConstants() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public XMLConstants(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region XMLConstants implementation
    public partial class XMLConstants
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#ACCESS_EXTERNAL_DTD"/>
        /// </summary>
        public static Java.Lang.String ACCESS_EXTERNAL_DTD { get { if (!_ACCESS_EXTERNAL_DTDReady) { _ACCESS_EXTERNAL_DTDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_EXTERNAL_DTD"); _ACCESS_EXTERNAL_DTDReady = true; } return _ACCESS_EXTERNAL_DTDContent; } }
        private static Java.Lang.String _ACCESS_EXTERNAL_DTDContent = default;
        private static bool _ACCESS_EXTERNAL_DTDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#ACCESS_EXTERNAL_SCHEMA"/>
        /// </summary>
        public static Java.Lang.String ACCESS_EXTERNAL_SCHEMA { get { if (!_ACCESS_EXTERNAL_SCHEMAReady) { _ACCESS_EXTERNAL_SCHEMAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_EXTERNAL_SCHEMA"); _ACCESS_EXTERNAL_SCHEMAReady = true; } return _ACCESS_EXTERNAL_SCHEMAContent; } }
        private static Java.Lang.String _ACCESS_EXTERNAL_SCHEMAContent = default;
        private static bool _ACCESS_EXTERNAL_SCHEMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#ACCESS_EXTERNAL_STYLESHEET"/>
        /// </summary>
        public static Java.Lang.String ACCESS_EXTERNAL_STYLESHEET { get { if (!_ACCESS_EXTERNAL_STYLESHEETReady) { _ACCESS_EXTERNAL_STYLESHEETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_EXTERNAL_STYLESHEET"); _ACCESS_EXTERNAL_STYLESHEETReady = true; } return _ACCESS_EXTERNAL_STYLESHEETContent; } }
        private static Java.Lang.String _ACCESS_EXTERNAL_STYLESHEETContent = default;
        private static bool _ACCESS_EXTERNAL_STYLESHEETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#DEFAULT_NS_PREFIX"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_NS_PREFIX { get { if (!_DEFAULT_NS_PREFIXReady) { _DEFAULT_NS_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_NS_PREFIX"); _DEFAULT_NS_PREFIXReady = true; } return _DEFAULT_NS_PREFIXContent; } }
        private static Java.Lang.String _DEFAULT_NS_PREFIXContent = default;
        private static bool _DEFAULT_NS_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#FEATURE_SECURE_PROCESSING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SECURE_PROCESSING { get { if (!_FEATURE_SECURE_PROCESSINGReady) { _FEATURE_SECURE_PROCESSINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SECURE_PROCESSING"); _FEATURE_SECURE_PROCESSINGReady = true; } return _FEATURE_SECURE_PROCESSINGContent; } }
        private static Java.Lang.String _FEATURE_SECURE_PROCESSINGContent = default;
        private static bool _FEATURE_SECURE_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#NULL_NS_URI"/>
        /// </summary>
        public static Java.Lang.String NULL_NS_URI { get { if (!_NULL_NS_URIReady) { _NULL_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NULL_NS_URI"); _NULL_NS_URIReady = true; } return _NULL_NS_URIContent; } }
        private static Java.Lang.String _NULL_NS_URIContent = default;
        private static bool _NULL_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#RELAXNG_NS_URI"/>
        /// </summary>
        public static Java.Lang.String RELAXNG_NS_URI { get { if (!_RELAXNG_NS_URIReady) { _RELAXNG_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RELAXNG_NS_URI"); _RELAXNG_NS_URIReady = true; } return _RELAXNG_NS_URIContent; } }
        private static Java.Lang.String _RELAXNG_NS_URIContent = default;
        private static bool _RELAXNG_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#USE_CATALOG"/>
        /// </summary>
        public static Java.Lang.String USE_CATALOG { get { if (!_USE_CATALOGReady) { _USE_CATALOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_CATALOG"); _USE_CATALOGReady = true; } return _USE_CATALOGContent; } }
        private static Java.Lang.String _USE_CATALOGContent = default;
        private static bool _USE_CATALOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#W3C_XML_SCHEMA_INSTANCE_NS_URI"/>
        /// </summary>
        public static Java.Lang.String W3C_XML_SCHEMA_INSTANCE_NS_URI { get { if (!_W3C_XML_SCHEMA_INSTANCE_NS_URIReady) { _W3C_XML_SCHEMA_INSTANCE_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "W3C_XML_SCHEMA_INSTANCE_NS_URI"); _W3C_XML_SCHEMA_INSTANCE_NS_URIReady = true; } return _W3C_XML_SCHEMA_INSTANCE_NS_URIContent; } }
        private static Java.Lang.String _W3C_XML_SCHEMA_INSTANCE_NS_URIContent = default;
        private static bool _W3C_XML_SCHEMA_INSTANCE_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#W3C_XML_SCHEMA_NS_URI"/>
        /// </summary>
        public static Java.Lang.String W3C_XML_SCHEMA_NS_URI { get { if (!_W3C_XML_SCHEMA_NS_URIReady) { _W3C_XML_SCHEMA_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "W3C_XML_SCHEMA_NS_URI"); _W3C_XML_SCHEMA_NS_URIReady = true; } return _W3C_XML_SCHEMA_NS_URIContent; } }
        private static Java.Lang.String _W3C_XML_SCHEMA_NS_URIContent = default;
        private static bool _W3C_XML_SCHEMA_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#W3C_XPATH_DATATYPE_NS_URI"/>
        /// </summary>
        public static Java.Lang.String W3C_XPATH_DATATYPE_NS_URI { get { if (!_W3C_XPATH_DATATYPE_NS_URIReady) { _W3C_XPATH_DATATYPE_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "W3C_XPATH_DATATYPE_NS_URI"); _W3C_XPATH_DATATYPE_NS_URIReady = true; } return _W3C_XPATH_DATATYPE_NS_URIContent; } }
        private static Java.Lang.String _W3C_XPATH_DATATYPE_NS_URIContent = default;
        private static bool _W3C_XPATH_DATATYPE_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#XML_DTD_NS_URI"/>
        /// </summary>
        public static Java.Lang.String XML_DTD_NS_URI { get { if (!_XML_DTD_NS_URIReady) { _XML_DTD_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XML_DTD_NS_URI"); _XML_DTD_NS_URIReady = true; } return _XML_DTD_NS_URIContent; } }
        private static Java.Lang.String _XML_DTD_NS_URIContent = default;
        private static bool _XML_DTD_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#XML_NS_PREFIX"/>
        /// </summary>
        public static Java.Lang.String XML_NS_PREFIX { get { if (!_XML_NS_PREFIXReady) { _XML_NS_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XML_NS_PREFIX"); _XML_NS_PREFIXReady = true; } return _XML_NS_PREFIXContent; } }
        private static Java.Lang.String _XML_NS_PREFIXContent = default;
        private static bool _XML_NS_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#XML_NS_URI"/>
        /// </summary>
        public static Java.Lang.String XML_NS_URI { get { if (!_XML_NS_URIReady) { _XML_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XML_NS_URI"); _XML_NS_URIReady = true; } return _XML_NS_URIContent; } }
        private static Java.Lang.String _XML_NS_URIContent = default;
        private static bool _XML_NS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#XMLNS_ATTRIBUTE"/>
        /// </summary>
        public static Java.Lang.String XMLNS_ATTRIBUTE { get { if (!_XMLNS_ATTRIBUTEReady) { _XMLNS_ATTRIBUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XMLNS_ATTRIBUTE"); _XMLNS_ATTRIBUTEReady = true; } return _XMLNS_ATTRIBUTEContent; } }
        private static Java.Lang.String _XMLNS_ATTRIBUTEContent = default;
        private static bool _XMLNS_ATTRIBUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/javax/xml/XMLConstants.html#XMLNS_ATTRIBUTE_NS_URI"/>
        /// </summary>
        public static Java.Lang.String XMLNS_ATTRIBUTE_NS_URI { get { if (!_XMLNS_ATTRIBUTE_NS_URIReady) { _XMLNS_ATTRIBUTE_NS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XMLNS_ATTRIBUTE_NS_URI"); _XMLNS_ATTRIBUTE_NS_URIReady = true; } return _XMLNS_ATTRIBUTE_NS_URIContent; } }
        private static Java.Lang.String _XMLNS_ATTRIBUTE_NS_URIContent = default;
        private static bool _XMLNS_ATTRIBUTE_NS_URIReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}