/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Management.Openmbean
{
    #region SimpleType
    public partial class SimpleType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BOOLEAN"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType BOOLEAN { get { if (!_BOOLEANReady) { _BOOLEANContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "BOOLEAN"); _BOOLEANReady = true; } return _BOOLEANContent; } }
        private static Javax.Management.Openmbean.SimpleType _BOOLEANContent = default;
        private static bool _BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BYTE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType BYTE { get { if (!_BYTEReady) { _BYTEContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "BYTE"); _BYTEReady = true; } return _BYTEContent; } }
        private static Javax.Management.Openmbean.SimpleType _BYTEContent = default;
        private static bool _BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#CHARACTER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType CHARACTER { get { if (!_CHARACTERReady) { _CHARACTERContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "CHARACTER"); _CHARACTERReady = true; } return _CHARACTERContent; } }
        private static Javax.Management.Openmbean.SimpleType _CHARACTERContent = default;
        private static bool _CHARACTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#DOUBLE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType DOUBLE { get { if (!_DOUBLEReady) { _DOUBLEContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "DOUBLE"); _DOUBLEReady = true; } return _DOUBLEContent; } }
        private static Javax.Management.Openmbean.SimpleType _DOUBLEContent = default;
        private static bool _DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#FLOAT"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType FLOAT { get { if (!_FLOATReady) { _FLOATContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "FLOAT"); _FLOATReady = true; } return _FLOATContent; } }
        private static Javax.Management.Openmbean.SimpleType _FLOATContent = default;
        private static bool _FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#INTEGER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType INTEGER { get { if (!_INTEGERReady) { _INTEGERContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "INTEGER"); _INTEGERReady = true; } return _INTEGERContent; } }
        private static Javax.Management.Openmbean.SimpleType _INTEGERContent = default;
        private static bool _INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#LONG"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType LONG { get { if (!_LONGReady) { _LONGContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
        private static Javax.Management.Openmbean.SimpleType _LONGContent = default;
        private static bool _LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#SHORT"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
        private static Javax.Management.Openmbean.SimpleType _SHORTContent = default;
        private static bool _SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#STRING"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType STRING { get { if (!_STRINGReady) { _STRINGContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "STRING"); _STRINGReady = true; } return _STRINGContent; } }
        private static Javax.Management.Openmbean.SimpleType _STRINGContent = default;
        private static bool _STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#VOID"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType VOID { get { if (!_VOIDReady) { _VOIDContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "VOID"); _VOIDReady = true; } return _VOIDContent; } }
        private static Javax.Management.Openmbean.SimpleType _VOIDContent = default;
        private static bool _VOIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BIGDECIMAL"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType BIGDECIMAL { get { if (!_BIGDECIMALReady) { _BIGDECIMALContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "BIGDECIMAL"); _BIGDECIMALReady = true; } return _BIGDECIMALContent; } }
        private static Javax.Management.Openmbean.SimpleType _BIGDECIMALContent = default;
        private static bool _BIGDECIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BIGINTEGER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType BIGINTEGER { get { if (!_BIGINTEGERReady) { _BIGINTEGERContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "BIGINTEGER"); _BIGINTEGERReady = true; } return _BIGINTEGERContent; } }
        private static Javax.Management.Openmbean.SimpleType _BIGINTEGERContent = default;
        private static bool _BIGINTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#DATE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType DATE { get { if (!_DATEReady) { _DATEContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "DATE"); _DATEReady = true; } return _DATEContent; } }
        private static Javax.Management.Openmbean.SimpleType _DATEContent = default;
        private static bool _DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#OBJECTNAME"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType OBJECTNAME { get { if (!_OBJECTNAMEReady) { _OBJECTNAMEContent = SGetField<Javax.Management.Openmbean.SimpleType>(LocalBridgeClazz, "OBJECTNAME"); _OBJECTNAMEReady = true; } return _OBJECTNAMEContent; } }
        private static Javax.Management.Openmbean.SimpleType _OBJECTNAMEContent = default;
        private static bool _OBJECTNAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#readResolve()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        /// <exception cref="Java.Io.ObjectStreamException"/>
        public object ReadResolve()
        {
            return IExecuteWithSignature("readResolve", "()Ljava/lang/Object;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region SimpleType<T>
    public partial class SimpleType<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Javax.Management.Openmbean.SimpleType{T}"/> to <see cref="Javax.Management.Openmbean.SimpleType"/>
        /// </summary>
        public static implicit operator Javax.Management.Openmbean.SimpleType(Javax.Management.Openmbean.SimpleType<T> t) => t.Cast<Javax.Management.Openmbean.SimpleType>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BOOLEAN"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Boolean> BOOLEAN { get { if (!_BOOLEANReady) { _BOOLEANContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Boolean>>(LocalBridgeClazz, "BOOLEAN"); _BOOLEANReady = true; } return _BOOLEANContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Boolean> _BOOLEANContent = default;
        private static bool _BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BYTE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Byte> BYTE { get { if (!_BYTEReady) { _BYTEContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Byte>>(LocalBridgeClazz, "BYTE"); _BYTEReady = true; } return _BYTEContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Byte> _BYTEContent = default;
        private static bool _BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#CHARACTER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Character> CHARACTER { get { if (!_CHARACTERReady) { _CHARACTERContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Character>>(LocalBridgeClazz, "CHARACTER"); _CHARACTERReady = true; } return _CHARACTERContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Character> _CHARACTERContent = default;
        private static bool _CHARACTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#DOUBLE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Double> DOUBLE { get { if (!_DOUBLEReady) { _DOUBLEContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Double>>(LocalBridgeClazz, "DOUBLE"); _DOUBLEReady = true; } return _DOUBLEContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Double> _DOUBLEContent = default;
        private static bool _DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#FLOAT"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Float> FLOAT { get { if (!_FLOATReady) { _FLOATContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Float>>(LocalBridgeClazz, "FLOAT"); _FLOATReady = true; } return _FLOATContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Float> _FLOATContent = default;
        private static bool _FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#INTEGER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Integer> INTEGER { get { if (!_INTEGERReady) { _INTEGERContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Integer>>(LocalBridgeClazz, "INTEGER"); _INTEGERReady = true; } return _INTEGERContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Integer> _INTEGERContent = default;
        private static bool _INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#LONG"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Long> LONG { get { if (!_LONGReady) { _LONGContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Long>>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Long> _LONGContent = default;
        private static bool _LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#SHORT"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Short> SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Short>>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Short> _SHORTContent = default;
        private static bool _SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#STRING"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.String> STRING { get { if (!_STRINGReady) { _STRINGContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.String>>(LocalBridgeClazz, "STRING"); _STRINGReady = true; } return _STRINGContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.String> _STRINGContent = default;
        private static bool _STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#VOID"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Lang.Void> VOID { get { if (!_VOIDReady) { _VOIDContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Lang.Void>>(LocalBridgeClazz, "VOID"); _VOIDReady = true; } return _VOIDContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Lang.Void> _VOIDContent = default;
        private static bool _VOIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BIGDECIMAL"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Math.BigDecimal> BIGDECIMAL { get { if (!_BIGDECIMALReady) { _BIGDECIMALContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Math.BigDecimal>>(LocalBridgeClazz, "BIGDECIMAL"); _BIGDECIMALReady = true; } return _BIGDECIMALContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Math.BigDecimal> _BIGDECIMALContent = default;
        private static bool _BIGDECIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#BIGINTEGER"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Math.BigInteger> BIGINTEGER { get { if (!_BIGINTEGERReady) { _BIGINTEGERContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Math.BigInteger>>(LocalBridgeClazz, "BIGINTEGER"); _BIGINTEGERReady = true; } return _BIGINTEGERContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Math.BigInteger> _BIGINTEGERContent = default;
        private static bool _BIGINTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#DATE"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Java.Util.Date> DATE { get { if (!_DATEReady) { _DATEContent = SGetField<Javax.Management.Openmbean.SimpleType<Java.Util.Date>>(LocalBridgeClazz, "DATE"); _DATEReady = true; } return _DATEContent; } }
        private static Javax.Management.Openmbean.SimpleType<Java.Util.Date> _DATEContent = default;
        private static bool _DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#OBJECTNAME"/>
        /// </summary>
        public static Javax.Management.Openmbean.SimpleType<Javax.Management.ObjectName> OBJECTNAME { get { if (!_OBJECTNAMEReady) { _OBJECTNAMEContent = SGetField<Javax.Management.Openmbean.SimpleType<Javax.Management.ObjectName>>(LocalBridgeClazz, "OBJECTNAME"); _OBJECTNAMEReady = true; } return _OBJECTNAMEContent; } }
        private static Javax.Management.Openmbean.SimpleType<Javax.Management.ObjectName> _OBJECTNAMEContent = default;
        private static bool _OBJECTNAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/javax/management/openmbean/SimpleType.html#readResolve()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        /// <exception cref="Java.Io.ObjectStreamException"/>
        public object ReadResolve()
        {
            return IExecuteWithSignature("readResolve", "()Ljava/lang/Object;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}