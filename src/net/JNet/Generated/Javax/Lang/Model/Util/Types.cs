/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Lang.Model.Util
{
    #region Types declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html"/>
    /// </summary>
    public partial class Types : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Types>
    {
        const string _bridgeClassName = "javax.lang.model.util.Types";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Types class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Types() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Types class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Types(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ITypes
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ITypes
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getNullType()"/> 
        /// </summary>
        Javax.Lang.Model.Type.NullType NullType { get; }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#contains(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        bool Contains(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        bool IsAssignable(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        bool IsSameType(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSubsignature(javax.lang.model.type.ExecutableType,javax.lang.model.type.ExecutableType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.ExecutableType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.ExecutableType"/></param>
        /// <returns><see cref="bool"/></returns>
        bool IsSubsignature(Javax.Lang.Model.Type.ExecutableType arg0, Javax.Lang.Model.Type.ExecutableType arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        bool IsSubtype(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#directSupertypes(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <typeparam name="ReturnExtendsJavax_Lang_Model_Type_TypeMirror"><see cref="Javax.Lang.Model.Type.TypeMirror"/></typeparam>
        /// <returns><see cref="Java.Util.List"/></returns>
        Java.Util.List<ReturnExtendsJavax_Lang_Model_Type_TypeMirror> DirectSupertypes<ReturnExtendsJavax_Lang_Model_Type_TypeMirror>(Javax.Lang.Model.Type.TypeMirror arg0) where ReturnExtendsJavax_Lang_Model_Type_TypeMirror : Javax.Lang.Model.Type.TypeMirror;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#asElement(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Element.Element"/></returns>
        Javax.Lang.Model.Element.Element AsElement(Javax.Lang.Model.Type.TypeMirror arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#boxedClass(javax.lang.model.type.PrimitiveType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.PrimitiveType"/></param>
        /// <returns><see cref="Javax.Lang.Model.Element.TypeElement"/></returns>
        Javax.Lang.Model.Element.TypeElement BoxedClass(Javax.Lang.Model.Type.PrimitiveType arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getArrayType(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.ArrayType"/></returns>
        Javax.Lang.Model.Type.ArrayType GetArrayType(Javax.Lang.Model.Type.TypeMirror arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getDeclaredType(javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Element.TypeElement"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.DeclaredType"/></returns>
        Javax.Lang.Model.Type.DeclaredType GetDeclaredType(Javax.Lang.Model.Element.TypeElement arg0, params Javax.Lang.Model.Type.TypeMirror[] arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getDeclaredType(javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.DeclaredType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Element.TypeElement"/></param>
        /// <param name="arg2"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.DeclaredType"/></returns>
        Javax.Lang.Model.Type.DeclaredType GetDeclaredType(Javax.Lang.Model.Type.DeclaredType arg0, Javax.Lang.Model.Element.TypeElement arg1, params Javax.Lang.Model.Type.TypeMirror[] arg2);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getNoType(javax.lang.model.type.TypeKind)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeKind"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.NoType"/></returns>
        Javax.Lang.Model.Type.NoType GetNoType(Javax.Lang.Model.Type.TypeKind arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getPrimitiveType(javax.lang.model.type.TypeKind)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeKind"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.PrimitiveType"/></returns>
        Javax.Lang.Model.Type.PrimitiveType GetPrimitiveType(Javax.Lang.Model.Type.TypeKind arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#unboxedType(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.PrimitiveType"/></returns>
        Javax.Lang.Model.Type.PrimitiveType UnboxedType(Javax.Lang.Model.Type.TypeMirror arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.DeclaredType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Element.Element"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        Javax.Lang.Model.Type.TypeMirror AsMemberOf(Javax.Lang.Model.Type.DeclaredType arg0, Javax.Lang.Model.Element.Element arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#capture(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        Javax.Lang.Model.Type.TypeMirror Capture(Javax.Lang.Model.Type.TypeMirror arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#erasure(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        Javax.Lang.Model.Type.TypeMirror Erasure(Javax.Lang.Model.Type.TypeMirror arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getWildcardType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.WildcardType"/></returns>
        Javax.Lang.Model.Type.WildcardType GetWildcardType(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1);

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Types implementation
    public partial class Types : Javax.Lang.Model.Util.ITypes
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getNullType()"/> 
        /// </summary>
        public Javax.Lang.Model.Type.NullType NullType
        {
            get { return IExecuteWithSignature<Javax.Lang.Model.Type.NullType>("getNullType", "()Ljavax/lang/model/type/NullType;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#contains(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1)
        {
            return IExecuteWithSignature<bool>("contains", "(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAssignable(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1)
        {
            return IExecuteWithSignature<bool>("isAssignable", "(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSameType(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1)
        {
            return IExecuteWithSignature<bool>("isSameType", "(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSubsignature(javax.lang.model.type.ExecutableType,javax.lang.model.type.ExecutableType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.ExecutableType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.ExecutableType"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubsignature(Javax.Lang.Model.Type.ExecutableType arg0, Javax.Lang.Model.Type.ExecutableType arg1)
        {
            return IExecuteWithSignature<bool>("isSubsignature", "(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/ExecutableType;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubtype(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1)
        {
            return IExecuteWithSignature<bool>("isSubtype", "(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#directSupertypes(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <typeparam name="ReturnExtendsJavax_Lang_Model_Type_TypeMirror"><see cref="Javax.Lang.Model.Type.TypeMirror"/></typeparam>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<ReturnExtendsJavax_Lang_Model_Type_TypeMirror> DirectSupertypes<ReturnExtendsJavax_Lang_Model_Type_TypeMirror>(Javax.Lang.Model.Type.TypeMirror arg0) where ReturnExtendsJavax_Lang_Model_Type_TypeMirror : Javax.Lang.Model.Type.TypeMirror
        {
            return IExecuteWithSignature<Java.Util.List<ReturnExtendsJavax_Lang_Model_Type_TypeMirror>>("directSupertypes", "(Ljavax/lang/model/type/TypeMirror;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#asElement(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Element.Element"/></returns>
        public Javax.Lang.Model.Element.Element AsElement(Javax.Lang.Model.Type.TypeMirror arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Element.Element>("asElement", "(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/element/Element;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#boxedClass(javax.lang.model.type.PrimitiveType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.PrimitiveType"/></param>
        /// <returns><see cref="Javax.Lang.Model.Element.TypeElement"/></returns>
        public Javax.Lang.Model.Element.TypeElement BoxedClass(Javax.Lang.Model.Type.PrimitiveType arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Element.TypeElement>("boxedClass", "(Ljavax/lang/model/type/PrimitiveType;)Ljavax/lang/model/element/TypeElement;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getArrayType(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.ArrayType"/></returns>
        public Javax.Lang.Model.Type.ArrayType GetArrayType(Javax.Lang.Model.Type.TypeMirror arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.ArrayType>("getArrayType", "(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/ArrayType;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getDeclaredType(javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Element.TypeElement"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.DeclaredType"/></returns>
        public Javax.Lang.Model.Type.DeclaredType GetDeclaredType(Javax.Lang.Model.Element.TypeElement arg0, params Javax.Lang.Model.Type.TypeMirror[] arg1)
        {
            if (arg1.Length == 0) return IExecuteWithSignature<Javax.Lang.Model.Type.DeclaredType>("getDeclaredType", "(Ljavax/lang/model/element/TypeElement;[Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;", arg0); else return IExecuteWithSignature<Javax.Lang.Model.Type.DeclaredType>("getDeclaredType", "(Ljavax/lang/model/element/TypeElement;[Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getDeclaredType(javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.DeclaredType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Element.TypeElement"/></param>
        /// <param name="arg2"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.DeclaredType"/></returns>
        public Javax.Lang.Model.Type.DeclaredType GetDeclaredType(Javax.Lang.Model.Type.DeclaredType arg0, Javax.Lang.Model.Element.TypeElement arg1, params Javax.Lang.Model.Type.TypeMirror[] arg2)
        {
            if (arg2.Length == 0) return IExecuteWithSignature<Javax.Lang.Model.Type.DeclaredType>("getDeclaredType", "(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/element/TypeElement;[Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;", arg0, arg1); else return IExecuteWithSignature<Javax.Lang.Model.Type.DeclaredType>("getDeclaredType", "(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/element/TypeElement;[Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getNoType(javax.lang.model.type.TypeKind)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeKind"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.NoType"/></returns>
        public Javax.Lang.Model.Type.NoType GetNoType(Javax.Lang.Model.Type.TypeKind arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.NoType>("getNoType", "(Ljavax/lang/model/type/TypeKind;)Ljavax/lang/model/type/NoType;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getPrimitiveType(javax.lang.model.type.TypeKind)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeKind"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.PrimitiveType"/></returns>
        public Javax.Lang.Model.Type.PrimitiveType GetPrimitiveType(Javax.Lang.Model.Type.TypeKind arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.PrimitiveType>("getPrimitiveType", "(Ljavax/lang/model/type/TypeKind;)Ljavax/lang/model/type/PrimitiveType;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#unboxedType(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.PrimitiveType"/></returns>
        public Javax.Lang.Model.Type.PrimitiveType UnboxedType(Javax.Lang.Model.Type.TypeMirror arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.PrimitiveType>("unboxedType", "(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/PrimitiveType;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.DeclaredType"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Element.Element"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        public Javax.Lang.Model.Type.TypeMirror AsMemberOf(Javax.Lang.Model.Type.DeclaredType arg0, Javax.Lang.Model.Element.Element arg1)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.TypeMirror>("asMemberOf", "(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/element/Element;)Ljavax/lang/model/type/TypeMirror;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#capture(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        public Javax.Lang.Model.Type.TypeMirror Capture(Javax.Lang.Model.Type.TypeMirror arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.TypeMirror>("capture", "(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/TypeMirror;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#erasure(javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeMirror"/></returns>
        public Javax.Lang.Model.Type.TypeMirror Erasure(Javax.Lang.Model.Type.TypeMirror arg0)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.TypeMirror>("erasure", "(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/TypeMirror;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Types.html#getWildcardType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <param name="arg1"><see cref="Javax.Lang.Model.Type.TypeMirror"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.WildcardType"/></returns>
        public Javax.Lang.Model.Type.WildcardType GetWildcardType(Javax.Lang.Model.Type.TypeMirror arg0, Javax.Lang.Model.Type.TypeMirror arg1)
        {
            return IExecuteWithSignature<Javax.Lang.Model.Type.WildcardType>("getWildcardType", "(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/WildcardType;", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}