/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Lang.Model.Util
{
    #region Elements
    public partial class Elements
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#hides(javax.lang.model.element.Element,javax.lang.model.element.Element)
        /// </summary>
        public bool Hides(Javax.Lang.Model.Element.Element arg0, Javax.Lang.Model.Element.Element arg1)
        {
            return IExecute<bool>("hides", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#isDeprecated(javax.lang.model.element.Element)
        /// </summary>
        public bool IsDeprecated(Javax.Lang.Model.Element.Element arg0)
        {
            return IExecute<bool>("isDeprecated", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#isFunctionalInterface(javax.lang.model.element.TypeElement)
        /// </summary>
        public bool IsFunctionalInterface(Javax.Lang.Model.Element.TypeElement arg0)
        {
            return IExecute<bool>("isFunctionalInterface", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#overrides(javax.lang.model.element.ExecutableElement,javax.lang.model.element.ExecutableElement,javax.lang.model.element.TypeElement)
        /// </summary>
        public bool Overrides(Javax.Lang.Model.Element.ExecutableElement arg0, Javax.Lang.Model.Element.ExecutableElement arg1, Javax.Lang.Model.Element.TypeElement arg2)
        {
            return IExecute<bool>("overrides", arg0, arg1, arg2);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getConstantExpression(java.lang.Object)
        /// </summary>
        public string GetConstantExpression(object arg0)
        {
            return IExecute<string>("getConstantExpression", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getDocComment(javax.lang.model.element.Element)
        /// </summary>
        public string GetDocComment(Javax.Lang.Model.Element.Element arg0)
        {
            return IExecute<string>("getDocComment", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getBinaryName(javax.lang.model.element.TypeElement)
        /// </summary>
        public Javax.Lang.Model.Element.Name GetBinaryName(Javax.Lang.Model.Element.TypeElement arg0)
        {
            return IExecute<Javax.Lang.Model.Element.Name>("getBinaryName", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getName(java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.Name GetName(Java.Lang.CharSequence arg0)
        {
            return IExecute<Javax.Lang.Model.Element.Name>("getName", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getPackageElement(java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.PackageElement GetPackageElement(Java.Lang.CharSequence arg0)
        {
            return IExecute<Javax.Lang.Model.Element.PackageElement>("getPackageElement", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getPackageOf(javax.lang.model.element.Element)
        /// </summary>
        public Javax.Lang.Model.Element.PackageElement GetPackageOf(Javax.Lang.Model.Element.Element arg0)
        {
            return IExecute<Javax.Lang.Model.Element.PackageElement>("getPackageOf", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getTypeElement(java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.TypeElement GetTypeElement(Java.Lang.CharSequence arg0)
        {
            return IExecute<Javax.Lang.Model.Element.TypeElement>("getTypeElement", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#printElements(java.io.Writer,javax.lang.model.element.Element...)
        /// </summary>
        public void PrintElements(Java.Io.Writer arg0, params Javax.Lang.Model.Element.Element[] arg1)
        {
            if (arg1.Length == 0) IExecute("printElements", arg0); else IExecute("printElements", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#isBridge(javax.lang.model.element.ExecutableElement)
        /// </summary>
        public bool IsBridge(Javax.Lang.Model.Element.ExecutableElement arg0)
        {
            return IExecute<bool>("isBridge", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getModuleElement(java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.ModuleElement GetModuleElement(Java.Lang.CharSequence arg0)
        {
            return IExecute<Javax.Lang.Model.Element.ModuleElement>("getModuleElement", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getModuleOf(javax.lang.model.element.Element)
        /// </summary>
        public Javax.Lang.Model.Element.ModuleElement GetModuleOf(Javax.Lang.Model.Element.Element arg0)
        {
            return IExecute<Javax.Lang.Model.Element.ModuleElement>("getModuleOf", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getPackageElement(javax.lang.model.element.ModuleElement,java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.PackageElement GetPackageElement(Javax.Lang.Model.Element.ModuleElement arg0, Java.Lang.CharSequence arg1)
        {
            return IExecute<Javax.Lang.Model.Element.PackageElement>("getPackageElement", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.html#getTypeElement(javax.lang.model.element.ModuleElement,java.lang.CharSequence)
        /// </summary>
        public Javax.Lang.Model.Element.TypeElement GetTypeElement(Javax.Lang.Model.Element.ModuleElement arg0, Java.Lang.CharSequence arg1)
        {
            return IExecute<Javax.Lang.Model.Element.TypeElement>("getTypeElement", arg0, arg1);
        }
        
        #endregion

        #region Nested classes
        #region Origin
        public partial class Origin
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html#EXPLICIT
            /// </summary>
            public static Javax.Lang.Model.Util.Elements.Origin EXPLICIT => Clazz.GetField<Javax.Lang.Model.Util.Elements.Origin>("EXPLICIT");
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html#MANDATED
            /// </summary>
            public static Javax.Lang.Model.Util.Elements.Origin MANDATED => Clazz.GetField<Javax.Lang.Model.Util.Elements.Origin>("MANDATED");
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html#SYNTHETIC
            /// </summary>
            public static Javax.Lang.Model.Util.Elements.Origin SYNTHETIC => Clazz.GetField<Javax.Lang.Model.Util.Elements.Origin>("SYNTHETIC");
            
            #endregion

            #region Static methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html#values()
            /// </summary>
            public static Javax.Lang.Model.Util.Elements.Origin[] Values()
            {
                return SExecuteArray<Javax.Lang.Model.Util.Elements.Origin>("values");
            }
            
            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/util/Elements.Origin.html#isDeclared()
            /// </summary>
            public bool IsDeclared()
            {
                return IExecute<bool>("isDeclared");
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}