/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.5.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Lang.Model.Type
{
    #region TypeKind
    public partial class TypeKind
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#ARRAY"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind ARRAY { get { if (!_ARRAYReady) { _ARRAYContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "ARRAY"); _ARRAYReady = true; } return _ARRAYContent; } }
        private static Javax.Lang.Model.Type.TypeKind _ARRAYContent = default;
        private static bool _ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#BOOLEAN"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind BOOLEAN { get { if (!_BOOLEANReady) { _BOOLEANContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "BOOLEAN"); _BOOLEANReady = true; } return _BOOLEANContent; } }
        private static Javax.Lang.Model.Type.TypeKind _BOOLEANContent = default;
        private static bool _BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#BYTE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind BYTE { get { if (!_BYTEReady) { _BYTEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "BYTE"); _BYTEReady = true; } return _BYTEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _BYTEContent = default;
        private static bool _BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#CHAR"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind CHAR { get { if (!_CHARReady) { _CHARContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "CHAR"); _CHARReady = true; } return _CHARContent; } }
        private static Javax.Lang.Model.Type.TypeKind _CHARContent = default;
        private static bool _CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#DECLARED"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind DECLARED { get { if (!_DECLAREDReady) { _DECLAREDContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "DECLARED"); _DECLAREDReady = true; } return _DECLAREDContent; } }
        private static Javax.Lang.Model.Type.TypeKind _DECLAREDContent = default;
        private static bool _DECLAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#DOUBLE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind DOUBLE { get { if (!_DOUBLEReady) { _DOUBLEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "DOUBLE"); _DOUBLEReady = true; } return _DOUBLEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _DOUBLEContent = default;
        private static bool _DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#ERROR"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static Javax.Lang.Model.Type.TypeKind _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#EXECUTABLE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind EXECUTABLE { get { if (!_EXECUTABLEReady) { _EXECUTABLEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "EXECUTABLE"); _EXECUTABLEReady = true; } return _EXECUTABLEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _EXECUTABLEContent = default;
        private static bool _EXECUTABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#FLOAT"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind FLOAT { get { if (!_FLOATReady) { _FLOATContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "FLOAT"); _FLOATReady = true; } return _FLOATContent; } }
        private static Javax.Lang.Model.Type.TypeKind _FLOATContent = default;
        private static bool _FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#INT"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind INT { get { if (!_INTReady) { _INTContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "INT"); _INTReady = true; } return _INTContent; } }
        private static Javax.Lang.Model.Type.TypeKind _INTContent = default;
        private static bool _INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#INTERSECTION"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind INTERSECTION { get { if (!_INTERSECTIONReady) { _INTERSECTIONContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "INTERSECTION"); _INTERSECTIONReady = true; } return _INTERSECTIONContent; } }
        private static Javax.Lang.Model.Type.TypeKind _INTERSECTIONContent = default;
        private static bool _INTERSECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#LONG"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind LONG { get { if (!_LONGReady) { _LONGContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
        private static Javax.Lang.Model.Type.TypeKind _LONGContent = default;
        private static bool _LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#MODULE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind MODULE { get { if (!_MODULEReady) { _MODULEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "MODULE"); _MODULEReady = true; } return _MODULEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _MODULEContent = default;
        private static bool _MODULEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#NONE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind NONE { get { if (!_NONEReady) { _NONEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _NONEContent = default;
        private static bool _NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#NULL"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind NULL { get { if (!_NULLReady) { _NULLContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "NULL"); _NULLReady = true; } return _NULLContent; } }
        private static Javax.Lang.Model.Type.TypeKind _NULLContent = default;
        private static bool _NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#OTHER"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind OTHER { get { if (!_OTHERReady) { _OTHERContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "OTHER"); _OTHERReady = true; } return _OTHERContent; } }
        private static Javax.Lang.Model.Type.TypeKind _OTHERContent = default;
        private static bool _OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#PACKAGE"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind PACKAGE { get { if (!_PACKAGEReady) { _PACKAGEContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "PACKAGE"); _PACKAGEReady = true; } return _PACKAGEContent; } }
        private static Javax.Lang.Model.Type.TypeKind _PACKAGEContent = default;
        private static bool _PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#SHORT"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
        private static Javax.Lang.Model.Type.TypeKind _SHORTContent = default;
        private static bool _SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#TYPEVAR"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind TYPEVAR { get { if (!_TYPEVARReady) { _TYPEVARContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "TYPEVAR"); _TYPEVARReady = true; } return _TYPEVARContent; } }
        private static Javax.Lang.Model.Type.TypeKind _TYPEVARContent = default;
        private static bool _TYPEVARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#UNION"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind UNION { get { if (!_UNIONReady) { _UNIONContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "UNION"); _UNIONReady = true; } return _UNIONContent; } }
        private static Javax.Lang.Model.Type.TypeKind _UNIONContent = default;
        private static bool _UNIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#VOID"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind VOID { get { if (!_VOIDReady) { _VOIDContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "VOID"); _VOIDReady = true; } return _VOIDContent; } }
        private static Javax.Lang.Model.Type.TypeKind _VOIDContent = default;
        private static bool _VOIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#WILDCARD"/>
        /// </summary>
        public static Javax.Lang.Model.Type.TypeKind WILDCARD { get { if (!_WILDCARDReady) { _WILDCARDContent = SGetField<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "WILDCARD"); _WILDCARDReady = true; } return _WILDCARDContent; } }
        private static Javax.Lang.Model.Type.TypeKind _WILDCARDContent = default;
        private static bool _WILDCARDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Javax.Lang.Model.Type.TypeKind"/></returns>
        public static Javax.Lang.Model.Type.TypeKind ValueOf(string arg0)
        {
            return SExecute<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "valueOf", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#values()"/>
        /// </summary>

        /// <returns><see cref="Javax.Lang.Model.Type.TypeKind"/></returns>
        public static Javax.Lang.Model.Type.TypeKind[] Values()
        {
            return SExecuteArray<Javax.Lang.Model.Type.TypeKind>(LocalBridgeClazz, "values");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/lang/model/type/TypeKind.html#isPrimitive()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsPrimitive()
        {
            return IExecute<bool>("isPrimitive");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}