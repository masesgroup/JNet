/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Naming
{
    #region Reference declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html"/>
    /// </summary>
    public partial class Reference : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Reference>
    {
        const string _bridgeClassName = "javax.naming.Reference";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Reference() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Reference(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Reference(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Reference implementation
    public partial class Reference
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public Reference(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#%3Cinit%3E(java.lang.String,javax.naming.RefAddr,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        public Reference(Java.Lang.String arg0, Javax.Naming.RefAddr arg1, Java.Lang.String arg2, Java.Lang.String arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#%3Cinit%3E(java.lang.String,javax.naming.RefAddr)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public Reference(Java.Lang.String arg0, Javax.Naming.RefAddr arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public Reference(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Javax.Naming.Reference t) => t.Cast<Java.Lang.Cloneable>();
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Javax.Naming.Reference t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#getAll()"/> 
        /// </summary>
        public Java.Util.Enumeration All
        {
            get { return IExecuteWithSignature<Java.Util.Enumeration>("getAll", "()Ljava/util/Enumeration;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#getClassName()"/> 
        /// </summary>
        public Java.Lang.String ClassName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getClassName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#getFactoryClassLocation()"/> 
        /// </summary>
        public Java.Lang.String FactoryClassLocation
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getFactoryClassLocation", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#getFactoryClassName()"/> 
        /// </summary>
        public Java.Lang.String FactoryClassName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getFactoryClassName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#size()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#remove(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Remove(int arg0)
        {
            return IExecuteWithSignature("remove", "(I)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#get(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Javax.Naming.RefAddr Get(int arg0)
        {
            return IExecuteWithSignature<Javax.Naming.RefAddr>("get", "(I)Ljavax/naming/RefAddr;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#get(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Javax.Naming.RefAddr Get(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Javax.Naming.RefAddr>("get", "(Ljava/lang/String;)Ljavax/naming/RefAddr;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#add(int,javax.naming.RefAddr)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public void Add(int arg0, Javax.Naming.RefAddr arg1)
        {
            IExecuteWithSignature("add", "(ILjavax/naming/RefAddr;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#add(javax.naming.RefAddr)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void Add(Javax.Naming.RefAddr arg0)
        {
            IExecuteWithSignature("add", "(Ljavax/naming/RefAddr;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.naming/javax/naming/Reference.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}