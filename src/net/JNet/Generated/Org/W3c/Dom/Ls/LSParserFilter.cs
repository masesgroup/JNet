/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.W3c.Dom.Ls
{
    #region ILSParserFilter
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ILSParserFilter
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#getWhatToShow()"/> 
        /// </summary>
        int WhatToShow { get; }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#acceptNode(org.w3c.dom.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.W3c.Dom.Node"/></param>
        /// <returns><see cref="short"/></returns>
        short AcceptNode(Org.W3c.Dom.Node arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#startElement(org.w3c.dom.Element)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.W3c.Dom.Element"/></param>
        /// <returns><see cref="short"/></returns>
        short StartElement(Org.W3c.Dom.Element arg0);

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region LSParserFilter
    public partial class LSParserFilter : Org.W3c.Dom.Ls.ILSParserFilter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#FILTER_ACCEPT"/>
        /// </summary>
        public static short FILTER_ACCEPT { get { if (!_FILTER_ACCEPTReady) { _FILTER_ACCEPTContent = SGetField<short>(LocalBridgeClazz, "FILTER_ACCEPT"); _FILTER_ACCEPTReady = true; } return _FILTER_ACCEPTContent; } }
        private static short _FILTER_ACCEPTContent = default;
        private static bool _FILTER_ACCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#FILTER_INTERRUPT"/>
        /// </summary>
        public static short FILTER_INTERRUPT { get { if (!_FILTER_INTERRUPTReady) { _FILTER_INTERRUPTContent = SGetField<short>(LocalBridgeClazz, "FILTER_INTERRUPT"); _FILTER_INTERRUPTReady = true; } return _FILTER_INTERRUPTContent; } }
        private static short _FILTER_INTERRUPTContent = default;
        private static bool _FILTER_INTERRUPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#FILTER_REJECT"/>
        /// </summary>
        public static short FILTER_REJECT { get { if (!_FILTER_REJECTReady) { _FILTER_REJECTContent = SGetField<short>(LocalBridgeClazz, "FILTER_REJECT"); _FILTER_REJECTReady = true; } return _FILTER_REJECTContent; } }
        private static short _FILTER_REJECTContent = default;
        private static bool _FILTER_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#FILTER_SKIP"/>
        /// </summary>
        public static short FILTER_SKIP { get { if (!_FILTER_SKIPReady) { _FILTER_SKIPContent = SGetField<short>(LocalBridgeClazz, "FILTER_SKIP"); _FILTER_SKIPReady = true; } return _FILTER_SKIPContent; } }
        private static short _FILTER_SKIPContent = default;
        private static bool _FILTER_SKIPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#getWhatToShow()"/> 
        /// </summary>
        public int WhatToShow
        {
            get { return IExecute<int>("getWhatToShow"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#acceptNode(org.w3c.dom.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.W3c.Dom.Node"/></param>
        /// <returns><see cref="short"/></returns>
        public short AcceptNode(Org.W3c.Dom.Node arg0)
        {
            return IExecute<short>("acceptNode", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.xml/org/w3c/dom/ls/LSParserFilter.html#startElement(org.w3c.dom.Element)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.W3c.Dom.Element"/></param>
        /// <returns><see cref="short"/></returns>
        public short StartElement(Org.W3c.Dom.Element arg0)
        {
            return IExecute<short>("startElement", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}