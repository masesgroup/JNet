/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.3.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang.Annotation
{
    #region ElementType
    public partial class ElementType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#ANNOTATION_TYPE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType ANNOTATION_TYPE { get { if (!_ANNOTATION_TYPEReady) { _ANNOTATION_TYPEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "ANNOTATION_TYPE"); _ANNOTATION_TYPEReady = true; } return _ANNOTATION_TYPEContent; } }
        private static Java.Lang.Annotation.ElementType _ANNOTATION_TYPEContent = default;
        private static bool _ANNOTATION_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#CONSTRUCTOR"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType CONSTRUCTOR { get { if (!_CONSTRUCTORReady) { _CONSTRUCTORContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "CONSTRUCTOR"); _CONSTRUCTORReady = true; } return _CONSTRUCTORContent; } }
        private static Java.Lang.Annotation.ElementType _CONSTRUCTORContent = default;
        private static bool _CONSTRUCTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#FIELD"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType FIELD { get { if (!_FIELDReady) { _FIELDContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "FIELD"); _FIELDReady = true; } return _FIELDContent; } }
        private static Java.Lang.Annotation.ElementType _FIELDContent = default;
        private static bool _FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#LOCAL_VARIABLE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType LOCAL_VARIABLE { get { if (!_LOCAL_VARIABLEReady) { _LOCAL_VARIABLEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "LOCAL_VARIABLE"); _LOCAL_VARIABLEReady = true; } return _LOCAL_VARIABLEContent; } }
        private static Java.Lang.Annotation.ElementType _LOCAL_VARIABLEContent = default;
        private static bool _LOCAL_VARIABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#METHOD"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType METHOD { get { if (!_METHODReady) { _METHODContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "METHOD"); _METHODReady = true; } return _METHODContent; } }
        private static Java.Lang.Annotation.ElementType _METHODContent = default;
        private static bool _METHODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#MODULE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType MODULE { get { if (!_MODULEReady) { _MODULEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "MODULE"); _MODULEReady = true; } return _MODULEContent; } }
        private static Java.Lang.Annotation.ElementType _MODULEContent = default;
        private static bool _MODULEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#PACKAGE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType PACKAGE { get { if (!_PACKAGEReady) { _PACKAGEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "PACKAGE"); _PACKAGEReady = true; } return _PACKAGEContent; } }
        private static Java.Lang.Annotation.ElementType _PACKAGEContent = default;
        private static bool _PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#PARAMETER"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType PARAMETER { get { if (!_PARAMETERReady) { _PARAMETERContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "PARAMETER"); _PARAMETERReady = true; } return _PARAMETERContent; } }
        private static Java.Lang.Annotation.ElementType _PARAMETERContent = default;
        private static bool _PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#TYPE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType TYPE { get { if (!_TYPEReady) { _TYPEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "TYPE"); _TYPEReady = true; } return _TYPEContent; } }
        private static Java.Lang.Annotation.ElementType _TYPEContent = default;
        private static bool _TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#TYPE_PARAMETER"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType TYPE_PARAMETER { get { if (!_TYPE_PARAMETERReady) { _TYPE_PARAMETERContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "TYPE_PARAMETER"); _TYPE_PARAMETERReady = true; } return _TYPE_PARAMETERContent; } }
        private static Java.Lang.Annotation.ElementType _TYPE_PARAMETERContent = default;
        private static bool _TYPE_PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#TYPE_USE"/>
        /// </summary>
        public static Java.Lang.Annotation.ElementType TYPE_USE { get { if (!_TYPE_USEReady) { _TYPE_USEContent = SGetField<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "TYPE_USE"); _TYPE_USEReady = true; } return _TYPE_USEContent; } }
        private static Java.Lang.Annotation.ElementType _TYPE_USEContent = default;
        private static bool _TYPE_USEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Annotation.ElementType"/></returns>
        public static Java.Lang.Annotation.ElementType ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/lang/annotation/ElementType;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/annotation/ElementType.html#values()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Annotation.ElementType"/></returns>
        public static Java.Lang.Annotation.ElementType[] Values()
        {
            return SExecuteWithSignatureArray<Java.Lang.Annotation.ElementType>(LocalBridgeClazz, "values", "()[Ljava/lang/annotation/ElementType;");
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}