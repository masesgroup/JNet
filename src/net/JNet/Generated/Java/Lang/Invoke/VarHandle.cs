/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.5.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang.Invoke
{
    #region VarHandle
    public partial class VarHandle
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#acquireFence()"/>
        /// </summary>
        public static void AcquireFence()
        {
            SExecute(LocalBridgeClazz, "acquireFence");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#fullFence()"/>
        /// </summary>
        public static void FullFence()
        {
            SExecute(LocalBridgeClazz, "fullFence");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#loadLoadFence()"/>
        /// </summary>
        public static void LoadLoadFence()
        {
            SExecute(LocalBridgeClazz, "loadLoadFence");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#releaseFence()"/>
        /// </summary>
        public static void ReleaseFence()
        {
            SExecute(LocalBridgeClazz, "releaseFence");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#storeStoreFence()"/>
        /// </summary>
        public static void StoreStoreFence()
        {
            SExecute(LocalBridgeClazz, "storeStoreFence");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessModeSupported(Java.Lang.Invoke.VarHandle.AccessMode arg0)
        {
            return IExecute<bool>("isAccessModeSupported", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#varType()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Class"/></returns>
        public Java.Lang.Class VarType()
        {
            return IExecute<Java.Lang.Class>("varType");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#toMethodHandle(java.lang.invoke.VarHandle.AccessMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public Java.Lang.Invoke.MethodHandle ToMethodHandle(Java.Lang.Invoke.VarHandle.AccessMode arg0)
        {
            return IExecute<Java.Lang.Invoke.MethodHandle>("toMethodHandle", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#accessModeType(java.lang.invoke.VarHandle.AccessMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodType"/></returns>
        public Java.Lang.Invoke.MethodType AccessModeType(Java.Lang.Invoke.VarHandle.AccessMode arg0)
        {
            return IExecute<Java.Lang.Invoke.MethodType>("accessModeType", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#coordinateTypes()"/>
        /// </summary>

        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.Class> CoordinateTypes()
        {
            return IExecute<Java.Util.List<Java.Lang.Class>>("coordinateTypes");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#compareAndSet(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CompareAndSet(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute<bool>("compareAndSet"); else return IExecute<bool>("compareAndSet", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#weakCompareAndSet(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool WeakCompareAndSet(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute<bool>("weakCompareAndSet"); else return IExecute<bool>("weakCompareAndSet", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#weakCompareAndSetAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool WeakCompareAndSetAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute<bool>("weakCompareAndSetAcquire"); else return IExecute<bool>("weakCompareAndSetAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#weakCompareAndSetPlain(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool WeakCompareAndSetPlain(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute<bool>("weakCompareAndSetPlain"); else return IExecute<bool>("weakCompareAndSetPlain", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#weakCompareAndSetRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool WeakCompareAndSetRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute<bool>("weakCompareAndSetRelease"); else return IExecute<bool>("weakCompareAndSetRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#compareAndExchange(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object CompareAndExchange(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("compareAndExchange"); else return IExecute("compareAndExchange", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#compareAndExchangeAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object CompareAndExchangeAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("compareAndExchangeAcquire"); else return IExecute("compareAndExchangeAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#compareAndExchangeRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object CompareAndExchangeRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("compareAndExchangeRelease"); else return IExecute("compareAndExchangeRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#get(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Get(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("get"); else return IExecute("get", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAcquire"); else return IExecute("getAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndAdd(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndAdd(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndAdd"); else return IExecute("getAndAdd", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndAddAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndAddAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndAddAcquire"); else return IExecute("getAndAddAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndAddRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndAddRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndAddRelease"); else return IExecute("getAndAddRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseAnd(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseAnd(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseAnd"); else return IExecute("getAndBitwiseAnd", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseAndAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseAndAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseAndAcquire"); else return IExecute("getAndBitwiseAndAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseAndRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseAndRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseAndRelease"); else return IExecute("getAndBitwiseAndRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseOr(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseOr(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseOr"); else return IExecute("getAndBitwiseOr", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseOrAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseOrAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseOrAcquire"); else return IExecute("getAndBitwiseOrAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseOrRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseOrRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseOrRelease"); else return IExecute("getAndBitwiseOrRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseXor(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseXor(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseXor"); else return IExecute("getAndBitwiseXor", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseXorAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseXorAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseXorAcquire"); else return IExecute("getAndBitwiseXorAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndBitwiseXorRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndBitwiseXorRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndBitwiseXorRelease"); else return IExecute("getAndBitwiseXorRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndSet(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndSet(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndSet"); else return IExecute("getAndSet", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndSetAcquire(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndSetAcquire(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndSetAcquire"); else return IExecute("getAndSetAcquire", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getAndSetRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndSetRelease(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getAndSetRelease"); else return IExecute("getAndSetRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getOpaque(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetOpaque(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getOpaque"); else return IExecute("getOpaque", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#getVolatile(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetVolatile(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("getVolatile"); else return IExecute("getVolatile", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#set(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void Set(params object[] arg0)
        {
            if (arg0.Length == 0) IExecute("set"); else IExecute("set", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#setOpaque(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void SetOpaque(params object[] arg0)
        {
            if (arg0.Length == 0) IExecute("setOpaque"); else IExecute("setOpaque", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#setRelease(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void SetRelease(params object[] arg0)
        {
            if (arg0.Length == 0) IExecute("setRelease"); else IExecute("setRelease", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.html#setVolatile(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void SetVolatile(params object[] arg0)
        {
            if (arg0.Length == 0) IExecute("setVolatile"); else IExecute("setVolatile", arg0);
        }

        #endregion

        #region Nested classes
        #region AccessMode
        public partial class AccessMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#COMPARE_AND_EXCHANGE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode COMPARE_AND_EXCHANGE { get { if (!_COMPARE_AND_EXCHANGEReady) { _COMPARE_AND_EXCHANGEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "COMPARE_AND_EXCHANGE"); _COMPARE_AND_EXCHANGEReady = true; } return _COMPARE_AND_EXCHANGEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _COMPARE_AND_EXCHANGEContent = default;
            private static bool _COMPARE_AND_EXCHANGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#COMPARE_AND_EXCHANGE_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode COMPARE_AND_EXCHANGE_ACQUIRE { get { if (!_COMPARE_AND_EXCHANGE_ACQUIREReady) { _COMPARE_AND_EXCHANGE_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "COMPARE_AND_EXCHANGE_ACQUIRE"); _COMPARE_AND_EXCHANGE_ACQUIREReady = true; } return _COMPARE_AND_EXCHANGE_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _COMPARE_AND_EXCHANGE_ACQUIREContent = default;
            private static bool _COMPARE_AND_EXCHANGE_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#COMPARE_AND_EXCHANGE_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode COMPARE_AND_EXCHANGE_RELEASE { get { if (!_COMPARE_AND_EXCHANGE_RELEASEReady) { _COMPARE_AND_EXCHANGE_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "COMPARE_AND_EXCHANGE_RELEASE"); _COMPARE_AND_EXCHANGE_RELEASEReady = true; } return _COMPARE_AND_EXCHANGE_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _COMPARE_AND_EXCHANGE_RELEASEContent = default;
            private static bool _COMPARE_AND_EXCHANGE_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#COMPARE_AND_SET"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode COMPARE_AND_SET { get { if (!_COMPARE_AND_SETReady) { _COMPARE_AND_SETContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "COMPARE_AND_SET"); _COMPARE_AND_SETReady = true; } return _COMPARE_AND_SETContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _COMPARE_AND_SETContent = default;
            private static bool _COMPARE_AND_SETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET { get { if (!_GETReady) { _GETContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET"); _GETReady = true; } return _GETContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GETContent = default;
            private static bool _GETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_ACQUIRE { get { if (!_GET_ACQUIREReady) { _GET_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_ACQUIRE"); _GET_ACQUIREReady = true; } return _GET_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_ACQUIREContent = default;
            private static bool _GET_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_ADD"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_ADD { get { if (!_GET_AND_ADDReady) { _GET_AND_ADDContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_ADD"); _GET_AND_ADDReady = true; } return _GET_AND_ADDContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_ADDContent = default;
            private static bool _GET_AND_ADDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_ADD_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_ADD_ACQUIRE { get { if (!_GET_AND_ADD_ACQUIREReady) { _GET_AND_ADD_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_ADD_ACQUIRE"); _GET_AND_ADD_ACQUIREReady = true; } return _GET_AND_ADD_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_ADD_ACQUIREContent = default;
            private static bool _GET_AND_ADD_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_ADD_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_ADD_RELEASE { get { if (!_GET_AND_ADD_RELEASEReady) { _GET_AND_ADD_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_ADD_RELEASE"); _GET_AND_ADD_RELEASEReady = true; } return _GET_AND_ADD_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_ADD_RELEASEContent = default;
            private static bool _GET_AND_ADD_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_AND"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_AND { get { if (!_GET_AND_BITWISE_ANDReady) { _GET_AND_BITWISE_ANDContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_AND"); _GET_AND_BITWISE_ANDReady = true; } return _GET_AND_BITWISE_ANDContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_ANDContent = default;
            private static bool _GET_AND_BITWISE_ANDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_AND_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_AND_ACQUIRE { get { if (!_GET_AND_BITWISE_AND_ACQUIREReady) { _GET_AND_BITWISE_AND_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_AND_ACQUIRE"); _GET_AND_BITWISE_AND_ACQUIREReady = true; } return _GET_AND_BITWISE_AND_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_AND_ACQUIREContent = default;
            private static bool _GET_AND_BITWISE_AND_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_AND_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_AND_RELEASE { get { if (!_GET_AND_BITWISE_AND_RELEASEReady) { _GET_AND_BITWISE_AND_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_AND_RELEASE"); _GET_AND_BITWISE_AND_RELEASEReady = true; } return _GET_AND_BITWISE_AND_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_AND_RELEASEContent = default;
            private static bool _GET_AND_BITWISE_AND_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_OR"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_OR { get { if (!_GET_AND_BITWISE_ORReady) { _GET_AND_BITWISE_ORContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_OR"); _GET_AND_BITWISE_ORReady = true; } return _GET_AND_BITWISE_ORContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_ORContent = default;
            private static bool _GET_AND_BITWISE_ORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_OR_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_OR_ACQUIRE { get { if (!_GET_AND_BITWISE_OR_ACQUIREReady) { _GET_AND_BITWISE_OR_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_OR_ACQUIRE"); _GET_AND_BITWISE_OR_ACQUIREReady = true; } return _GET_AND_BITWISE_OR_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_OR_ACQUIREContent = default;
            private static bool _GET_AND_BITWISE_OR_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_OR_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_OR_RELEASE { get { if (!_GET_AND_BITWISE_OR_RELEASEReady) { _GET_AND_BITWISE_OR_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_OR_RELEASE"); _GET_AND_BITWISE_OR_RELEASEReady = true; } return _GET_AND_BITWISE_OR_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_OR_RELEASEContent = default;
            private static bool _GET_AND_BITWISE_OR_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_XOR"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_XOR { get { if (!_GET_AND_BITWISE_XORReady) { _GET_AND_BITWISE_XORContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_XOR"); _GET_AND_BITWISE_XORReady = true; } return _GET_AND_BITWISE_XORContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_XORContent = default;
            private static bool _GET_AND_BITWISE_XORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_XOR_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_XOR_ACQUIRE { get { if (!_GET_AND_BITWISE_XOR_ACQUIREReady) { _GET_AND_BITWISE_XOR_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_XOR_ACQUIRE"); _GET_AND_BITWISE_XOR_ACQUIREReady = true; } return _GET_AND_BITWISE_XOR_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_XOR_ACQUIREContent = default;
            private static bool _GET_AND_BITWISE_XOR_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_BITWISE_XOR_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_BITWISE_XOR_RELEASE { get { if (!_GET_AND_BITWISE_XOR_RELEASEReady) { _GET_AND_BITWISE_XOR_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_BITWISE_XOR_RELEASE"); _GET_AND_BITWISE_XOR_RELEASEReady = true; } return _GET_AND_BITWISE_XOR_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_BITWISE_XOR_RELEASEContent = default;
            private static bool _GET_AND_BITWISE_XOR_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_SET"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_SET { get { if (!_GET_AND_SETReady) { _GET_AND_SETContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_SET"); _GET_AND_SETReady = true; } return _GET_AND_SETContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_SETContent = default;
            private static bool _GET_AND_SETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_SET_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_SET_ACQUIRE { get { if (!_GET_AND_SET_ACQUIREReady) { _GET_AND_SET_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_SET_ACQUIRE"); _GET_AND_SET_ACQUIREReady = true; } return _GET_AND_SET_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_SET_ACQUIREContent = default;
            private static bool _GET_AND_SET_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_AND_SET_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_AND_SET_RELEASE { get { if (!_GET_AND_SET_RELEASEReady) { _GET_AND_SET_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_AND_SET_RELEASE"); _GET_AND_SET_RELEASEReady = true; } return _GET_AND_SET_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_AND_SET_RELEASEContent = default;
            private static bool _GET_AND_SET_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_OPAQUE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_OPAQUE { get { if (!_GET_OPAQUEReady) { _GET_OPAQUEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_OPAQUE"); _GET_OPAQUEReady = true; } return _GET_OPAQUEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_OPAQUEContent = default;
            private static bool _GET_OPAQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#GET_VOLATILE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode GET_VOLATILE { get { if (!_GET_VOLATILEReady) { _GET_VOLATILEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "GET_VOLATILE"); _GET_VOLATILEReady = true; } return _GET_VOLATILEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _GET_VOLATILEContent = default;
            private static bool _GET_VOLATILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#SET"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode SET { get { if (!_SETReady) { _SETContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "SET"); _SETReady = true; } return _SETContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _SETContent = default;
            private static bool _SETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#SET_OPAQUE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode SET_OPAQUE { get { if (!_SET_OPAQUEReady) { _SET_OPAQUEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "SET_OPAQUE"); _SET_OPAQUEReady = true; } return _SET_OPAQUEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _SET_OPAQUEContent = default;
            private static bool _SET_OPAQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#SET_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode SET_RELEASE { get { if (!_SET_RELEASEReady) { _SET_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "SET_RELEASE"); _SET_RELEASEReady = true; } return _SET_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _SET_RELEASEContent = default;
            private static bool _SET_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#SET_VOLATILE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode SET_VOLATILE { get { if (!_SET_VOLATILEReady) { _SET_VOLATILEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "SET_VOLATILE"); _SET_VOLATILEReady = true; } return _SET_VOLATILEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _SET_VOLATILEContent = default;
            private static bool _SET_VOLATILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#WEAK_COMPARE_AND_SET"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode WEAK_COMPARE_AND_SET { get { if (!_WEAK_COMPARE_AND_SETReady) { _WEAK_COMPARE_AND_SETContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "WEAK_COMPARE_AND_SET"); _WEAK_COMPARE_AND_SETReady = true; } return _WEAK_COMPARE_AND_SETContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _WEAK_COMPARE_AND_SETContent = default;
            private static bool _WEAK_COMPARE_AND_SETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#WEAK_COMPARE_AND_SET_ACQUIRE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode WEAK_COMPARE_AND_SET_ACQUIRE { get { if (!_WEAK_COMPARE_AND_SET_ACQUIREReady) { _WEAK_COMPARE_AND_SET_ACQUIREContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "WEAK_COMPARE_AND_SET_ACQUIRE"); _WEAK_COMPARE_AND_SET_ACQUIREReady = true; } return _WEAK_COMPARE_AND_SET_ACQUIREContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _WEAK_COMPARE_AND_SET_ACQUIREContent = default;
            private static bool _WEAK_COMPARE_AND_SET_ACQUIREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#WEAK_COMPARE_AND_SET_PLAIN"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode WEAK_COMPARE_AND_SET_PLAIN { get { if (!_WEAK_COMPARE_AND_SET_PLAINReady) { _WEAK_COMPARE_AND_SET_PLAINContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "WEAK_COMPARE_AND_SET_PLAIN"); _WEAK_COMPARE_AND_SET_PLAINReady = true; } return _WEAK_COMPARE_AND_SET_PLAINContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _WEAK_COMPARE_AND_SET_PLAINContent = default;
            private static bool _WEAK_COMPARE_AND_SET_PLAINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#WEAK_COMPARE_AND_SET_RELEASE"/>
            /// </summary>
            public static Java.Lang.Invoke.VarHandle.AccessMode WEAK_COMPARE_AND_SET_RELEASE { get { if (!_WEAK_COMPARE_AND_SET_RELEASEReady) { _WEAK_COMPARE_AND_SET_RELEASEContent = SGetField<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "WEAK_COMPARE_AND_SET_RELEASE"); _WEAK_COMPARE_AND_SET_RELEASEReady = true; } return _WEAK_COMPARE_AND_SET_RELEASEContent; } }
            private static Java.Lang.Invoke.VarHandle.AccessMode _WEAK_COMPARE_AND_SET_RELEASEContent = default;
            private static bool _WEAK_COMPARE_AND_SET_RELEASEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#valueFromMethodName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></returns>
            public static Java.Lang.Invoke.VarHandle.AccessMode ValueFromMethodName(Java.Lang.String arg0)
            {
                return SExecute<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "valueFromMethodName", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></returns>
            public static Java.Lang.Invoke.VarHandle.AccessMode ValueOf(Java.Lang.String arg0)
            {
                return SExecute<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "valueOf", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#values()"/>
            /// </summary>

            /// <returns><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></returns>
            public static Java.Lang.Invoke.VarHandle.AccessMode[] Values()
            {
                return SExecuteArray<Java.Lang.Invoke.VarHandle.AccessMode>(LocalBridgeClazz, "values");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/VarHandle.AccessMode.html#methodName()"/>
            /// </summary>

            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String MethodName()
            {
                return IExecute<Java.Lang.String>("methodName");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}