/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.0.1.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang.Invoke
{
    #region MethodHandles
    public partial class MethodHandles
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#reflectAs(java.lang.Class,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <typeparam name="T"><see cref="Java.Lang.Reflect.IMember"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public static T ReflectAs<T>(Java.Lang.Class arg0, Java.Lang.Invoke.MethodHandle arg1) where T: Java.Lang.Reflect.IMember, new()
        {
            return SExecute<T>(LocalBridgeClazz, "reflectAs", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#arrayConstructor(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.MethodHandle ArrayConstructor(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "arrayConstructor", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#arrayElementGetter(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.MethodHandle ArrayElementGetter(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "arrayElementGetter", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#arrayElementSetter(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.MethodHandle ArrayElementSetter(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "arrayElementSetter", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#arrayLength(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.MethodHandle ArrayLength(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "arrayLength", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle CatchException(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Class arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "catchException", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle CollectArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "collectArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#constant(java.lang.Class,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Constant(Java.Lang.Class arg0, object arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "constant", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle CountedLoop(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2, Java.Lang.Invoke.MethodHandle arg3)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "countedLoop", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle CountedLoop(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "countedLoop", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#doWhileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle DoWhileLoop(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "doWhileLoop", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle DropArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, params Java.Lang.Class[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "dropArguments", arg0, arg1); else return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "dropArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle DropArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, Java.Util.List<Java.Lang.Class> arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "dropArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#dropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle DropArgumentsToMatch(Java.Lang.Invoke.MethodHandle arg0, int arg1, Java.Util.List<Java.Lang.Class> arg2, int arg3)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "dropArgumentsToMatch", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#empty(java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Empty(Java.Lang.Invoke.MethodType arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "empty", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#exactInvoker(java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle ExactInvoker(Java.Lang.Invoke.MethodType arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "exactInvoker", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle ExplicitCastArguments(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodType arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "explicitCastArguments", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle FilterArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, params Java.Lang.Invoke.MethodHandle[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "filterArguments", arg0, arg1); else return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "filterArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle FilterReturnValue(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "filterReturnValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#foldArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle FoldArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "foldArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle FoldArguments(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "foldArguments", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle GuardWithTest(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "guardWithTest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#identity(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Identity(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "identity", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle InsertArguments(Java.Lang.Invoke.MethodHandle arg0, int arg1, params object[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "insertArguments", arg0, arg1); else return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "insertArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#invoker(java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Invoker(Java.Lang.Invoke.MethodType arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "invoker", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#iteratedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle IteratedLoop(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "iteratedLoop", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#loop(java.lang.invoke.MethodHandle[][])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Loop(params Java.Lang.Invoke.MethodHandle[][] arg0)
        {
            if (arg0.Length == 0) return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "loop"); else return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "loop", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle PermuteArguments(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodType arg1, params int[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "permuteArguments", arg0, arg1); else return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "permuteArguments", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#spreadInvoker(java.lang.invoke.MethodType,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle SpreadInvoker(Java.Lang.Invoke.MethodType arg0, int arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "spreadInvoker", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#throwException(java.lang.Class,java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle ThrowException(Java.Lang.Class arg0, Java.Lang.Class arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "throwException", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#tryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle TryFinally(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "tryFinally", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle VarHandleExactInvoker(Java.Lang.Invoke.VarHandle.AccessMode arg0, Java.Lang.Invoke.MethodType arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "varHandleExactInvoker", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#varHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.VarHandle.AccessMode"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodType"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle VarHandleInvoker(Java.Lang.Invoke.VarHandle.AccessMode arg0, Java.Lang.Invoke.MethodType arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "varHandleInvoker", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#whileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle WhileLoop(Java.Lang.Invoke.MethodHandle arg0, Java.Lang.Invoke.MethodHandle arg1, Java.Lang.Invoke.MethodHandle arg2)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "whileLoop", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#zero(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
        public static Java.Lang.Invoke.MethodHandle Zero(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.MethodHandle>(LocalBridgeClazz, "zero", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#lookup()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></returns>
        public static Java.Lang.Invoke.MethodHandles.Lookup LookupMethod()
        {
            return SExecute<Java.Lang.Invoke.MethodHandles.Lookup>(LocalBridgeClazz, "lookup");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></param>
        /// <returns><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></returns>
        /// <exception cref="Java.Lang.IllegalAccessException"/>
        public static Java.Lang.Invoke.MethodHandles.Lookup PrivateLookupIn(Java.Lang.Class arg0, Java.Lang.Invoke.MethodHandles.Lookup arg1)
        {
            return SExecute<Java.Lang.Invoke.MethodHandles.Lookup>(LocalBridgeClazz, "privateLookupIn", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#publicLookup()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></returns>
        public static Java.Lang.Invoke.MethodHandles.Lookup PublicLookup()
        {
            return SExecute<Java.Lang.Invoke.MethodHandles.Lookup>(LocalBridgeClazz, "publicLookup");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#arrayElementVarHandle(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.VarHandle ArrayElementVarHandle(Java.Lang.Class arg0)
        {
            return SExecute<Java.Lang.Invoke.VarHandle>(LocalBridgeClazz, "arrayElementVarHandle", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#byteArrayViewVarHandle(java.lang.Class,java.nio.ByteOrder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteOrder"/></param>
        /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.VarHandle ByteArrayViewVarHandle(Java.Lang.Class arg0, Java.Nio.ByteOrder arg1)
        {
            return SExecute<Java.Lang.Invoke.VarHandle>(LocalBridgeClazz, "byteArrayViewVarHandle", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.html#byteBufferViewVarHandle(java.lang.Class,java.nio.ByteOrder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteOrder"/></param>
        /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public static Java.Lang.Invoke.VarHandle ByteBufferViewVarHandle(Java.Lang.Class arg0, Java.Nio.ByteOrder arg1)
        {
            return SExecute<Java.Lang.Invoke.VarHandle>(LocalBridgeClazz, "byteBufferViewVarHandle", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Lookup
        public partial class Lookup
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#MODULE"/>
            /// </summary>
            public static int MODULE { get { return SGetField<int>(LocalBridgeClazz, "MODULE"); } }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#PACKAGE"/>
            /// </summary>
            public static int PACKAGE { get { return SGetField<int>(LocalBridgeClazz, "PACKAGE"); } }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#PRIVATE"/>
            /// </summary>
            public static int PRIVATE { get { return SGetField<int>(LocalBridgeClazz, "PRIVATE"); } }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#PROTECTED"/>
            /// </summary>
            public static int PROTECTED { get { return SGetField<int>(LocalBridgeClazz, "PROTECTED"); } }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#PUBLIC"/>
            /// </summary>
            public static int PUBLIC { get { return SGetField<int>(LocalBridgeClazz, "PUBLIC"); } }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#UNCONDITIONAL"/>
            /// </summary>
            public static int UNCONDITIONAL { get { return SGetField<int>(LocalBridgeClazz, "UNCONDITIONAL"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#hasPrivateAccess()"/>
            /// </summary>

            /// <returns><see cref="bool"/></returns>
            public bool HasPrivateAccess()
            {
                return IExecute<bool>("hasPrivateAccess");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#lookupModes()"/>
            /// </summary>

            /// <returns><see cref="int"/></returns>
            public int LookupModes()
            {
                return IExecute<int>("lookupModes");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#accessClass(java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Class"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Class AccessClass(Java.Lang.Class arg0)
            {
                return IExecute<Java.Lang.Class>("accessClass", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#defineClass(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Java.Lang.Class"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Class DefineClass(byte[] arg0)
            {
                return IExecute<Java.Lang.Class>("defineClass", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findClass(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Java.Lang.Class"/></returns>
            /// <exception cref="Java.Lang.ClassNotFoundException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Class FindClass(string arg0)
            {
                return IExecute<Java.Lang.Class>("findClass", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#lookupClass()"/>
            /// </summary>

            /// <returns><see cref="Java.Lang.Class"/></returns>
            public Java.Lang.Class LookupClass()
            {
                return IExecute<Java.Lang.Class>("lookupClass");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodType"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchMethodException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle Bind(object arg0, string arg1, Java.Lang.Invoke.MethodType arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("bind", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findConstructor(java.lang.Class,java.lang.invoke.MethodType)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Invoke.MethodType"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchMethodException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindConstructor(Java.Lang.Class arg0, Java.Lang.Invoke.MethodType arg1)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findConstructor", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findGetter(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindGetter(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findGetter", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findSetter(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindSetter(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findSetter", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodType"/></param>
            /// <param name="arg3"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchMethodException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindSpecial(Java.Lang.Class arg0, string arg1, Java.Lang.Invoke.MethodType arg2, Java.Lang.Class arg3)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findSpecial", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodType"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchMethodException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindStatic(Java.Lang.Class arg0, string arg1, Java.Lang.Invoke.MethodType arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findStatic", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindStaticGetter(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findStaticGetter", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindStaticSetter(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findStaticSetter", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Invoke.MethodType"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchMethodException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle FindVirtual(Java.Lang.Class arg0, string arg1, Java.Lang.Invoke.MethodType arg2)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("findVirtual", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflect(java.lang.reflect.Method)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Method"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle Unreflect(Java.Lang.Reflect.Method arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("unreflect", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflectConstructor(java.lang.reflect.Constructor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Constructor"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle UnreflectConstructor(Java.Lang.Reflect.Constructor<object> arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("unreflectConstructor", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflectGetter(java.lang.reflect.Field)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Field"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle UnreflectGetter(Java.Lang.Reflect.Field arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("unreflectGetter", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflectSetter(java.lang.reflect.Field)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Field"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle UnreflectSetter(Java.Lang.Reflect.Field arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("unreflectSetter", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflectSpecial(java.lang.reflect.Method,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Method"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.MethodHandle UnreflectSpecial(Java.Lang.Reflect.Method arg0, Java.Lang.Class arg1)
            {
                return IExecute<Java.Lang.Invoke.MethodHandle>("unreflectSpecial", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#revealDirect(java.lang.invoke.MethodHandle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Invoke.MethodHandle"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandleInfo"/></returns>
            public Java.Lang.Invoke.MethodHandleInfo RevealDirect(Java.Lang.Invoke.MethodHandle arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandleInfo>("revealDirect", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#dropLookupMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></returns>
            public Java.Lang.Invoke.MethodHandles.Lookup DropLookupMode(int arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandles.Lookup>("dropLookupMode", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#in(java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.MethodHandles.Lookup"/></returns>
            public Java.Lang.Invoke.MethodHandles.Lookup In(Java.Lang.Class arg0)
            {
                return IExecute<Java.Lang.Invoke.MethodHandles.Lookup>("in", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findStaticVarHandle(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.VarHandle FindStaticVarHandle(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.VarHandle>("findStaticVarHandle", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#findVarHandle(java.lang.Class,java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
            /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
            /// <exception cref="Java.Lang.NoSuchFieldException"/>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.VarHandle FindVarHandle(Java.Lang.Class arg0, string arg1, Java.Lang.Class arg2)
            {
                return IExecute<Java.Lang.Invoke.VarHandle>("findVarHandle", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#unreflectVarHandle(java.lang.reflect.Field)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Reflect.Field"/></param>
            /// <returns><see cref="Java.Lang.Invoke.VarHandle"/></returns>
            /// <exception cref="Java.Lang.IllegalAccessException"/>
            public Java.Lang.Invoke.VarHandle UnreflectVarHandle(Java.Lang.Reflect.Field arg0)
            {
                return IExecute<Java.Lang.Invoke.VarHandle>("unreflectVarHandle", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}