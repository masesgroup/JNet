/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang.Invoke
{
    #region MethodHandle
    public partial class MethodHandle
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#isVarargsCollector()
        /// </summary>
        public bool IsVarargsCollector()
        {
            return IExecute<bool>("isVarargsCollector");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#invoke.MethodHandle.invoke(java.lang.Object...) throws java.lang.Throwable
        /// </summary>
        public object Invoke(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("invoke"); else return IExecute("invoke", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#invokeExact(java.lang.Object...) throws java.lang.Throwable
        /// </summary>
        public object InvokeExact(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("invokeExact"); else return IExecute("invokeExact", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#asFixedArity()
        /// </summary>
        public Java.Lang.Invoke.MethodHandle AsFixedArity()
        {
            return IExecute<Java.Lang.Invoke.MethodHandle>("asFixedArity");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType)
        /// </summary>
        public Java.Lang.Invoke.MethodHandle AsType(Java.Lang.Invoke.MethodType arg0)
        {
            return IExecute<Java.Lang.Invoke.MethodHandle>("asType", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#bindTo(java.lang.Object)
        /// </summary>
        public Java.Lang.Invoke.MethodHandle BindTo(object arg0)
        {
            return IExecute<Java.Lang.Invoke.MethodHandle>("bindTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#withVarargs(boolean)
        /// </summary>
        public Java.Lang.Invoke.MethodHandle WithVarargs(bool arg0)
        {
            return IExecute<Java.Lang.Invoke.MethodHandle>("withVarargs", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#type()
        /// </summary>
        public Java.Lang.Invoke.MethodType Type()
        {
            return IExecute<Java.Lang.Invoke.MethodType>("type");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandle.html#invokeWithArguments(java.lang.Object...) throws java.lang.Throwable
        /// </summary>
        public object InvokeWithArguments(params object[] arg0)
        {
            if (arg0.Length == 0) return IExecute("invokeWithArguments"); else return IExecute("invokeWithArguments", arg0);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}