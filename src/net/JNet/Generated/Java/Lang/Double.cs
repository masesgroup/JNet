/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang
{
    #region Double
    public partial class Double
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#MAX_VALUE
        /// </summary>
        public static double MAX_VALUE => Clazz.GetField<double>("MAX_VALUE");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#MIN_NORMAL
        /// </summary>
        public static double MIN_NORMAL => Clazz.GetField<double>("MIN_NORMAL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#MIN_VALUE
        /// </summary>
        public static double MIN_VALUE => Clazz.GetField<double>("MIN_VALUE");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#NaN
        /// </summary>
        public static double NaN => Clazz.GetField<double>("NaN");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#NEGATIVE_INFINITY
        /// </summary>
        public static double NEGATIVE_INFINITY => Clazz.GetField<double>("NEGATIVE_INFINITY");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#POSITIVE_INFINITY
        /// </summary>
        public static double POSITIVE_INFINITY => Clazz.GetField<double>("POSITIVE_INFINITY");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#BYTES
        /// </summary>
        public static int BYTES => Clazz.GetField<int>("BYTES");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#MAX_EXPONENT
        /// </summary>
        public static int MAX_EXPONENT => Clazz.GetField<int>("MAX_EXPONENT");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#MIN_EXPONENT
        /// </summary>
        public static int MIN_EXPONENT => Clazz.GetField<int>("MIN_EXPONENT");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#SIZE
        /// </summary>
        public static int SIZE => Clazz.GetField<int>("SIZE");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#TYPE
        /// </summary>
        public static Java.Lang.Class TYPE => Clazz.GetField<Java.Lang.Class>("TYPE");
        
        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#isFinite(double)
        /// </summary>
        public static bool IsFinite(double arg0)
        {
            return SExecute<bool>("isFinite", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#isInfinite(double)
        /// </summary>
        public static bool IsInfinite(double arg0)
        {
            return SExecute<bool>("isInfinite", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#isNaN(double)
        /// </summary>
        public static bool IsNaN(double arg0)
        {
            return SExecute<bool>("isNaN", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#max(double,double)
        /// </summary>
        public static double Max(double arg0, double arg1)
        {
            return SExecute<double>("max", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#min(double,double)
        /// </summary>
        public static double Min(double arg0, double arg1)
        {
            return SExecute<double>("min", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#parseDouble(java.lang.String) throws java.lang.NumberFormatException
        /// </summary>
        public static double ParseDouble(string arg0)
        {
            return SExecute<double>("parseDouble", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#sum(double,double)
        /// </summary>
        public static double Sum(double arg0, double arg1)
        {
            return SExecute<double>("sum", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#compare(double,double)
        /// </summary>
        public static int Compare(double arg0, double arg1)
        {
            return SExecute<int>("compare", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#hashCode(double)
        /// </summary>
        public static int HashCode(double arg0)
        {
            return SExecute<int>("hashCode", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#valueOf(double)
        /// </summary>
        public static double? ValueOf(double arg0)
        {
            return SExecute<double?>("valueOf", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#valueOf(java.lang.String) throws java.lang.NumberFormatException
        /// </summary>
        public static double? ValueOf(string arg0)
        {
            return SExecute<double?>("valueOf", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#toHexString(double)
        /// </summary>
        public static string ToHexString(double arg0)
        {
            return SExecute<string>("toHexString", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#toString(double)
        /// </summary>
        public static string ToString(double arg0)
        {
            return SExecute<string>("toString", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#doubleToLongBits(double)
        /// </summary>
        public static long DoubleToLongBits(double arg0)
        {
            return SExecute<long>("doubleToLongBits", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#longBitsToDouble(long)
        /// </summary>
        public static double LongBitsToDouble(long arg0)
        {
            return SExecute<double>("longBitsToDouble", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#doubleToRawLongBits(double)
        /// </summary>
        public static long DoubleToRawLongBits(double arg0)
        {
            return SExecute<long>("doubleToRawLongBits", arg0);
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#isInfinite()
        /// </summary>
        public bool IsInfinite()
        {
            return IExecute<bool>("isInfinite");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#isNaN()
        /// </summary>
        public bool IsNaN()
        {
            return IExecute<bool>("isNaN");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#compareTo(java.lang.Double)
        /// </summary>
        public int CompareTo(double? arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html#compareTo(java.lang.Object)
        /// </summary>
        public int CompareTo(object arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}