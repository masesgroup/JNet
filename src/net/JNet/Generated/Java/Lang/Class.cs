/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang
{
    #region Class declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html"/>
    /// </summary>
    public partial class Class : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Class>
    {
        const string _bridgeClassName = "java.lang.Class";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Class() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Class(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Class<T> declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html"/>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class Class<T> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Class<T>>
    {
        const string _bridgeClassName = "java.lang.Class";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Class() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Class(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region Class implementation
    public partial class Class
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Lang.Class t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class"/> to <see cref="Java.Lang.Reflect.GenericDeclaration"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.GenericDeclaration(Java.Lang.Class t) => t.Cast<Java.Lang.Reflect.GenericDeclaration>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class"/> to <see cref="Java.Lang.Reflect.Type"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.Type(Java.Lang.Class t) => t.Cast<Java.Lang.Reflect.Type>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class"/> to <see cref="Java.Lang.Reflect.AnnotatedElement"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.AnnotatedElement(Java.Lang.Class t) => t.Cast<Java.Lang.Reflect.AnnotatedElement>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.Module,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Module"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        public static Java.Lang.Class ForName(Java.Lang.Module arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.String,boolean,java.lang.ClassLoader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Lang.ClassLoader"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        /// <exception cref="Java.Lang.ClassNotFoundException"/>
        public static Java.Lang.Class ForName(Java.Lang.String arg0, bool arg1, Java.Lang.ClassLoader arg2)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        /// <exception cref="Java.Lang.ClassNotFoundException"/>
        public static Java.Lang.Class ForName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/String;)Ljava/lang/Class;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotatedInterfaces()"/> 
        /// </summary>
        public Java.Lang.Reflect.AnnotatedType[] AnnotatedInterfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.AnnotatedType>("getAnnotatedInterfaces", "()[Ljava/lang/reflect/AnnotatedType;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotatedSuperclass()"/> 
        /// </summary>
        public Java.Lang.Reflect.AnnotatedType AnnotatedSuperclass
        {
            get { return IExecute<Java.Lang.Reflect.AnnotatedType>("getAnnotatedSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotations()"/> 
        /// </summary>
        public Java.Lang.Annotation.Annotation[] Annotations
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Annotation.Annotation>("getAnnotations", "()[Ljava/lang/annotation/Annotation;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getCanonicalName()"/> 
        /// </summary>
        public Java.Lang.String CanonicalName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCanonicalName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getClasses()"/> 
        /// </summary>
        public Java.Lang.Class[] Classes
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getClasses", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getClassLoader()"/> 
        /// </summary>
        public Java.Lang.ClassLoader ClassLoader
        {
            get { return IExecuteWithSignature<Java.Lang.ClassLoader>("getClassLoader", "()Ljava/lang/ClassLoader;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getComponentType()"/> 
        /// </summary>
        public Java.Lang.Class ComponentType
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getComponentType", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getConstructors()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor[] Constructors
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Constructor>("getConstructors", "()[Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotations()"/> 
        /// </summary>
        public Java.Lang.Annotation.Annotation[] DeclaredAnnotations
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Annotation.Annotation>("getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredClasses()"/> 
        /// </summary>
        public Java.Lang.Class[] DeclaredClasses
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getDeclaredClasses", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredConstructors()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor[] DeclaredConstructors
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Constructor>("getDeclaredConstructors", "()[Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredFields()"/> 
        /// </summary>
        public Java.Lang.Reflect.Field[] DeclaredFields
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Field>("getDeclaredFields", "()[Ljava/lang/reflect/Field;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredMethods()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method[] DeclaredMethods
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Method>("getDeclaredMethods", "()[Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaringClass()"/> 
        /// </summary>
        public Java.Lang.Class DeclaringClass
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getDeclaringClass", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingClass()"/> 
        /// </summary>
        public Java.Lang.Class EnclosingClass
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getEnclosingClass", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingConstructor()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor EnclosingConstructor
        {
            get { return IExecuteWithSignature<Java.Lang.Reflect.Constructor>("getEnclosingConstructor", "()Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingMethod()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method EnclosingMethod
        {
            get { return IExecuteWithSignature<Java.Lang.Reflect.Method>("getEnclosingMethod", "()Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnumConstants()"/> 
        /// </summary>
        public object[] EnumConstants
        {
            get { return IExecuteWithSignatureArray<object>("getEnumConstants", "()[Ljava/lang/Object;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getFields()"/> 
        /// </summary>
        public Java.Lang.Reflect.Field[] Fields
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Field>("getFields", "()[Ljava/lang/reflect/Field;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getGenericInterfaces()"/> 
        /// </summary>
        public Java.Lang.Reflect.Type[] GenericInterfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Type>("getGenericInterfaces", "()[Ljava/lang/reflect/Type;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getGenericSuperclass()"/> 
        /// </summary>
        public Java.Lang.Reflect.Type GenericSuperclass
        {
            get { return IExecute<Java.Lang.Reflect.Type>("getGenericSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getInterfaces()"/> 
        /// </summary>
        public Java.Lang.Class[] Interfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getInterfaces", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getMethods()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method[] Methods
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Method>("getMethods", "()[Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getModifiers()"/> 
        /// </summary>
        public int Modifiers
        {
            get { return IExecuteWithSignature<int>("getModifiers", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getModule()"/> 
        /// </summary>
        public Java.Lang.Module Module
        {
            get { return IExecuteWithSignature<Java.Lang.Module>("getModule", "()Ljava/lang/Module;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getNestHost()"/> 
        /// </summary>
        public Java.Lang.Class NestHost
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getNestHost", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getNestMembers()"/> 
        /// </summary>
        public Java.Lang.Class[] NestMembers
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getNestMembers", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getPackage()"/> 
        /// </summary>
        public Java.Lang.Package Package
        {
            get { return IExecuteWithSignature<Java.Lang.Package>("getPackage", "()Ljava/lang/Package;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getPackageName()"/> 
        /// </summary>
        public Java.Lang.String PackageName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getPackageName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getProtectionDomain()"/> 
        /// </summary>
        public Java.Security.ProtectionDomain ProtectionDomain
        {
            get { return IExecuteWithSignature<Java.Security.ProtectionDomain>("getProtectionDomain", "()Ljava/security/ProtectionDomain;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSigners()"/> 
        /// </summary>
        public object[] Signers
        {
            get { return IExecuteWithSignatureArray<object>("getSigners", "()[Ljava/lang/Object;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSimpleName()"/> 
        /// </summary>
        public Java.Lang.String SimpleName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSimpleName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSuperclass()"/> 
        /// </summary>
        public Java.Lang.Class Superclass
        {
            get { return IExecute<Java.Lang.Class>("getSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getTypeName()"/> 
        /// </summary>
        public Java.Lang.String TypeName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getTypeName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getTypeParameters()"/> 
        /// </summary>
        public Java.Lang.Reflect.TypeVariable[] TypeParameters
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.TypeVariable>("getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotation(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Annotation.Annotation"/></returns>
        public Java.Lang.Annotation.Annotation GetAnnotation(Java.Lang.Class arg0)
        {
            return IExecute<Java.Lang.Annotation.Annotation>("getAnnotation", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotation(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Annotation.Annotation"/></returns>
        public Java.Lang.Annotation.Annotation GetDeclaredAnnotation(Java.Lang.Class arg0)
        {
            return IExecute<Java.Lang.Annotation.Annotation>("getDeclaredAnnotation", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotationsByType(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Annotation.Annotation"/></returns>
        public Java.Lang.Annotation.Annotation[] GetAnnotationsByType(Java.Lang.Class arg0)
        {
            return IExecuteArray<Java.Lang.Annotation.Annotation>("getAnnotationsByType", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotationsByType(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Annotation.Annotation"/></returns>
        public Java.Lang.Annotation.Annotation[] GetDeclaredAnnotationsByType(Java.Lang.Class arg0)
        {
            return IExecuteArray<Java.Lang.Annotation.Annotation>("getDeclaredAnnotationsByType", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#asSubclass(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        public Java.Lang.Class AsSubclass(Java.Lang.Class arg0)
        {
            return IExecute<Java.Lang.Class>("asSubclass", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#desiredAssertionStatus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DesiredAssertionStatus()
        {
            return IExecuteWithSignature<bool>("desiredAssertionStatus", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnnotation()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnnotation()
        {
            return IExecuteWithSignature<bool>("isAnnotation", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnnotationPresent(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnnotationPresent(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isAnnotationPresent", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnonymousClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnonymousClass()
        {
            return IExecuteWithSignature<bool>("isAnonymousClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isEnum()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnum()
        {
            return IExecuteWithSignature<bool>("isEnum", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isLocalClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLocalClass()
        {
            return IExecuteWithSignature<bool>("isLocalClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isMemberClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMemberClass()
        {
            return IExecuteWithSignature<bool>("isMemberClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isNestmateOf(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsNestmateOf(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isNestmateOf", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isSynthetic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSynthetic()
        {
            return IExecuteWithSignature<bool>("isSynthetic", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        public Java.Io.InputStream GetResourceAsStream(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Io.InputStream>("getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getConstructor(java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Constructor"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Constructor GetConstructor(params Java.Lang.Class[] arg0)
        {
            if (arg0.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Constructor>("getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"); else return IExecuteWithSignature<Java.Lang.Reflect.Constructor>("getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredConstructor(java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Constructor"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Constructor GetDeclaredConstructor(params Java.Lang.Class[] arg0)
        {
            if (arg0.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Constructor>("getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"); else return IExecuteWithSignature<Java.Lang.Reflect.Constructor>("getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredField(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Field"/></returns>
        /// <exception cref="Java.Lang.NoSuchFieldException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Field GetDeclaredField(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.Reflect.Field>("getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getField(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Field"/></returns>
        /// <exception cref="Java.Lang.NoSuchFieldException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Field GetField(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.Reflect.Field>("getField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredMethod(java.lang.String,java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Method"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Method GetDeclaredMethod(Java.Lang.String arg0, params Java.Lang.Class[] arg1)
        {
            if (arg1.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Method>("getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0); else return IExecuteWithSignature<Java.Lang.Reflect.Method>("getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getMethod(java.lang.String,java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Method"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Method GetMethod(Java.Lang.String arg0, params Java.Lang.Class[] arg1)
        {
            if (arg1.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Method>("getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0); else return IExecuteWithSignature<Java.Lang.Reflect.Method>("getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#toGenericString()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToGenericString()
        {
            return IExecuteWithSignature<Java.Lang.String>("toGenericString", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getResource(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Net.URL"/></returns>
        public Java.Net.URL GetResource(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Net.URL>("getResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isArray()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArray()
        {
            return IExecuteWithSignature<bool>("isArray", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAssignableFrom(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAssignableFrom(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isAssignableFrom", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isInstance(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsInstance(object arg0)
        {
            return IExecuteWithSignature<bool>("isInstance", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isInterface()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInterface()
        {
            return IExecuteWithSignature<bool>("isInterface", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isPrimitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrimitive()
        {
            return IExecuteWithSignature<bool>("isPrimitive", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#cast(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Cast(object arg0)
        {
            return IExecuteWithSignature("cast", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Class<T> implementation
    public partial class Class<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class{T}"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Lang.Class<T> t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class{T}"/> to <see cref="Java.Lang.Reflect.GenericDeclaration"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.GenericDeclaration(Java.Lang.Class<T> t) => t.Cast<Java.Lang.Reflect.GenericDeclaration>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class{T}"/> to <see cref="Java.Lang.Reflect.Type"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.Type(Java.Lang.Class<T> t) => t.Cast<Java.Lang.Reflect.Type>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class{T}"/> to <see cref="Java.Lang.Reflect.AnnotatedElement"/>
        /// </summary>
        public static implicit operator Java.Lang.Reflect.AnnotatedElement(Java.Lang.Class<T> t) => t.Cast<Java.Lang.Reflect.AnnotatedElement>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Class{T}"/> to <see cref="Java.Lang.Class"/>
        /// </summary>
        public static implicit operator Java.Lang.Class(Java.Lang.Class<T> t) => t.Cast<Java.Lang.Class>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.Module,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Module"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        public static Java.Lang.Class ForName(Java.Lang.Module arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.String,boolean,java.lang.ClassLoader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Lang.ClassLoader"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        /// <exception cref="Java.Lang.ClassNotFoundException"/>
        public static Java.Lang.Class ForName(Java.Lang.String arg0, bool arg1, Java.Lang.ClassLoader arg2)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#forName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        /// <exception cref="Java.Lang.ClassNotFoundException"/>
        public static Java.Lang.Class ForName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.Class>(LocalBridgeClazz, "forName", "(Ljava/lang/String;)Ljava/lang/Class;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotatedInterfaces()"/> 
        /// </summary>
        public Java.Lang.Reflect.AnnotatedType[] AnnotatedInterfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.AnnotatedType>("getAnnotatedInterfaces", "()[Ljava/lang/reflect/AnnotatedType;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotatedSuperclass()"/> 
        /// </summary>
        public Java.Lang.Reflect.AnnotatedType AnnotatedSuperclass
        {
            get { return IExecute<Java.Lang.Reflect.AnnotatedType>("getAnnotatedSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotations()"/> 
        /// </summary>
        public Java.Lang.Annotation.Annotation[] Annotations
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Annotation.Annotation>("getAnnotations", "()[Ljava/lang/annotation/Annotation;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getCanonicalName()"/> 
        /// </summary>
        public Java.Lang.String CanonicalName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCanonicalName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getClasses()"/> 
        /// </summary>
        public Java.Lang.Class[] Classes
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getClasses", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getClassLoader()"/> 
        /// </summary>
        public Java.Lang.ClassLoader ClassLoader
        {
            get { return IExecuteWithSignature<Java.Lang.ClassLoader>("getClassLoader", "()Ljava/lang/ClassLoader;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getComponentType()"/> 
        /// </summary>
        public Java.Lang.Class ComponentType
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getComponentType", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getConstructors()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor<object>[] Constructors
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Constructor<object>>("getConstructors", "()[Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotations()"/> 
        /// </summary>
        public Java.Lang.Annotation.Annotation[] DeclaredAnnotations
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Annotation.Annotation>("getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredClasses()"/> 
        /// </summary>
        public Java.Lang.Class[] DeclaredClasses
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getDeclaredClasses", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredConstructors()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor<object>[] DeclaredConstructors
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Constructor<object>>("getDeclaredConstructors", "()[Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredFields()"/> 
        /// </summary>
        public Java.Lang.Reflect.Field[] DeclaredFields
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Field>("getDeclaredFields", "()[Ljava/lang/reflect/Field;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredMethods()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method[] DeclaredMethods
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Method>("getDeclaredMethods", "()[Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaringClass()"/> 
        /// </summary>
        public Java.Lang.Class DeclaringClass
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getDeclaringClass", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingClass()"/> 
        /// </summary>
        public Java.Lang.Class EnclosingClass
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getEnclosingClass", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingConstructor()"/> 
        /// </summary>
        public Java.Lang.Reflect.Constructor<object> EnclosingConstructor
        {
            get { return IExecuteWithSignature<Java.Lang.Reflect.Constructor<object>>("getEnclosingConstructor", "()Ljava/lang/reflect/Constructor;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnclosingMethod()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method EnclosingMethod
        {
            get { return IExecuteWithSignature<Java.Lang.Reflect.Method>("getEnclosingMethod", "()Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getEnumConstants()"/> 
        /// </summary>
        public T[] EnumConstants
        {
            get { return IExecuteWithSignatureArray<T>("getEnumConstants", "()[Ljava/lang/Object;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getFields()"/> 
        /// </summary>
        public Java.Lang.Reflect.Field[] Fields
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Field>("getFields", "()[Ljava/lang/reflect/Field;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getGenericInterfaces()"/> 
        /// </summary>
        public Java.Lang.Reflect.Type[] GenericInterfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Type>("getGenericInterfaces", "()[Ljava/lang/reflect/Type;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getGenericSuperclass()"/> 
        /// </summary>
        public Java.Lang.Reflect.Type GenericSuperclass
        {
            get { return IExecute<Java.Lang.Reflect.Type>("getGenericSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getInterfaces()"/> 
        /// </summary>
        public Java.Lang.Class[] Interfaces
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getInterfaces", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getMethods()"/> 
        /// </summary>
        public Java.Lang.Reflect.Method[] Methods
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.Method>("getMethods", "()[Ljava/lang/reflect/Method;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getModifiers()"/> 
        /// </summary>
        public int Modifiers
        {
            get { return IExecuteWithSignature<int>("getModifiers", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getModule()"/> 
        /// </summary>
        public Java.Lang.Module Module
        {
            get { return IExecuteWithSignature<Java.Lang.Module>("getModule", "()Ljava/lang/Module;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getNestHost()"/> 
        /// </summary>
        public Java.Lang.Class NestHost
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getNestHost", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getNestMembers()"/> 
        /// </summary>
        public Java.Lang.Class[] NestMembers
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Class>("getNestMembers", "()[Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getPackage()"/> 
        /// </summary>
        public Java.Lang.Package Package
        {
            get { return IExecuteWithSignature<Java.Lang.Package>("getPackage", "()Ljava/lang/Package;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getPackageName()"/> 
        /// </summary>
        public Java.Lang.String PackageName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getPackageName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getProtectionDomain()"/> 
        /// </summary>
        public Java.Security.ProtectionDomain ProtectionDomain
        {
            get { return IExecuteWithSignature<Java.Security.ProtectionDomain>("getProtectionDomain", "()Ljava/security/ProtectionDomain;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSigners()"/> 
        /// </summary>
        public object[] Signers
        {
            get { return IExecuteWithSignatureArray<object>("getSigners", "()[Ljava/lang/Object;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSimpleName()"/> 
        /// </summary>
        public Java.Lang.String SimpleName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSimpleName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getSuperclass()"/> 
        /// </summary>
        public Java.Lang.Class Superclass
        {
            get { return IExecute<Java.Lang.Class>("getSuperclass"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getTypeName()"/> 
        /// </summary>
        public Java.Lang.String TypeName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getTypeName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getTypeParameters()"/> 
        /// </summary>
        public Java.Lang.Reflect.TypeVariable<Java.Lang.Class>[] TypeParameters
        {
            get { return IExecuteWithSignatureArray<Java.Lang.Reflect.TypeVariable<Java.Lang.Class>>("getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotation(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="A"><see cref="Java.Lang.Annotation.IAnnotation"/></typeparam>
        /// <returns><typeparamref name="A"/></returns>
        public A GetAnnotation<A>(Java.Lang.Class arg0) where A : Java.Lang.Annotation.IAnnotation, new()
        {
            return IExecute<A>("getAnnotation", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotation(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="A"><see cref="Java.Lang.Annotation.IAnnotation"/></typeparam>
        /// <returns><typeparamref name="A"/></returns>
        public A GetDeclaredAnnotation<A>(Java.Lang.Class arg0) where A : Java.Lang.Annotation.IAnnotation, new()
        {
            return IExecute<A>("getDeclaredAnnotation", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getAnnotationsByType(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="A"><see cref="Java.Lang.Annotation.IAnnotation"/></typeparam>
        /// <returns><typeparamref name="A"/></returns>
        public A[] GetAnnotationsByType<A>(Java.Lang.Class arg0) where A : Java.Lang.Annotation.IAnnotation, new()
        {
            return IExecuteArray<A>("getAnnotationsByType", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredAnnotationsByType(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="A"><see cref="Java.Lang.Annotation.IAnnotation"/></typeparam>
        /// <returns><typeparamref name="A"/></returns>
        public A[] GetDeclaredAnnotationsByType<A>(Java.Lang.Class arg0) where A : Java.Lang.Annotation.IAnnotation, new()
        {
            return IExecuteArray<A>("getDeclaredAnnotationsByType", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#asSubclass(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="ReturnExtendsU"><typeparamref name="U"/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <returns><see cref="Java.Lang.Class"/></returns>
        public Java.Lang.Class AsSubclass<ReturnExtendsU, U>(Java.Lang.Class arg0) where ReturnExtendsU : U
        {
            return IExecute<Java.Lang.Class>("asSubclass", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#desiredAssertionStatus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DesiredAssertionStatus()
        {
            return IExecuteWithSignature<bool>("desiredAssertionStatus", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnnotation()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnnotation()
        {
            return IExecuteWithSignature<bool>("isAnnotation", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnnotationPresent(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnnotationPresent(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isAnnotationPresent", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAnonymousClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnonymousClass()
        {
            return IExecuteWithSignature<bool>("isAnonymousClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isEnum()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnum()
        {
            return IExecuteWithSignature<bool>("isEnum", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isLocalClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLocalClass()
        {
            return IExecuteWithSignature<bool>("isLocalClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isMemberClass()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMemberClass()
        {
            return IExecuteWithSignature<bool>("isMemberClass", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isNestmateOf(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsNestmateOf(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isNestmateOf", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isSynthetic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSynthetic()
        {
            return IExecuteWithSignature<bool>("isSynthetic", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        public Java.Io.InputStream GetResourceAsStream(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Io.InputStream>("getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getConstructor(java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Constructor"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Constructor<T> GetConstructor(params Java.Lang.Class[] arg0)
        {
            if (arg0.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Constructor<T>>("getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"); else return IExecuteWithSignature<Java.Lang.Reflect.Constructor<T>>("getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredConstructor(java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Constructor"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Constructor<T> GetDeclaredConstructor(params Java.Lang.Class[] arg0)
        {
            if (arg0.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Constructor<T>>("getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"); else return IExecuteWithSignature<Java.Lang.Reflect.Constructor<T>>("getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredField(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Field"/></returns>
        /// <exception cref="Java.Lang.NoSuchFieldException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Field GetDeclaredField(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.Reflect.Field>("getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getField(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Field"/></returns>
        /// <exception cref="Java.Lang.NoSuchFieldException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Field GetField(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.Reflect.Field>("getField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getDeclaredMethod(java.lang.String,java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Method"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Method GetDeclaredMethod(Java.Lang.String arg0, params Java.Lang.Class[] arg1)
        {
            if (arg1.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Method>("getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0); else return IExecuteWithSignature<Java.Lang.Reflect.Method>("getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getMethod(java.lang.String,java.lang.Class[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="Java.Lang.Reflect.Method"/></returns>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Java.Lang.Reflect.Method GetMethod(Java.Lang.String arg0, params Java.Lang.Class[] arg1)
        {
            if (arg1.Length == 0) return IExecuteWithSignature<Java.Lang.Reflect.Method>("getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0); else return IExecuteWithSignature<Java.Lang.Reflect.Method>("getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#toGenericString()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToGenericString()
        {
            return IExecuteWithSignature<Java.Lang.String>("toGenericString", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#getResource(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Net.URL"/></returns>
        public Java.Net.URL GetResource(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Net.URL>("getResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isArray()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArray()
        {
            return IExecuteWithSignature<bool>("isArray", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isAssignableFrom(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAssignableFrom(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isAssignableFrom", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isInstance(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsInstance(object arg0)
        {
            return IExecuteWithSignature<bool>("isInstance", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isInterface()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInterface()
        {
            return IExecuteWithSignature<bool>("isInterface", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#isPrimitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrimitive()
        {
            return IExecuteWithSignature<bool>("isPrimitive", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html#cast(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><typeparamref name="T"/></returns>
        public T Cast(object arg0)
        {
            return IExecuteWithSignature<T>("cast", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}