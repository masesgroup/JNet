/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Lang
{
    #region Character
    public partial class Character
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Lang.Character"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Lang.Character t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Java.Lang.Character"/> to <see cref="Java.Lang.Comparable"/>
        /// </summary>
        public static implicit operator Java.Lang.Comparable(Java.Lang.Character t) => t.Cast<Java.Lang.Comparable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#COMBINING_SPACING_MARK"/>
        /// </summary>
        public static byte COMBINING_SPACING_MARK { get { if (!_COMBINING_SPACING_MARKReady) { _COMBINING_SPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "COMBINING_SPACING_MARK"); _COMBINING_SPACING_MARKReady = true; } return _COMBINING_SPACING_MARKContent; } }
        private static byte _COMBINING_SPACING_MARKContent = default;
        private static bool _COMBINING_SPACING_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#CONNECTOR_PUNCTUATION"/>
        /// </summary>
        public static byte CONNECTOR_PUNCTUATION { get { if (!_CONNECTOR_PUNCTUATIONReady) { _CONNECTOR_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "CONNECTOR_PUNCTUATION"); _CONNECTOR_PUNCTUATIONReady = true; } return _CONNECTOR_PUNCTUATIONContent; } }
        private static byte _CONNECTOR_PUNCTUATIONContent = default;
        private static bool _CONNECTOR_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#CONTROL"/>
        /// </summary>
        public static byte CONTROL { get { if (!_CONTROLReady) { _CONTROLContent = SGetField<byte>(LocalBridgeClazz, "CONTROL"); _CONTROLReady = true; } return _CONTROLContent; } }
        private static byte _CONTROLContent = default;
        private static bool _CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#CURRENCY_SYMBOL"/>
        /// </summary>
        public static byte CURRENCY_SYMBOL { get { if (!_CURRENCY_SYMBOLReady) { _CURRENCY_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "CURRENCY_SYMBOL"); _CURRENCY_SYMBOLReady = true; } return _CURRENCY_SYMBOLContent; } }
        private static byte _CURRENCY_SYMBOLContent = default;
        private static bool _CURRENCY_SYMBOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DASH_PUNCTUATION"/>
        /// </summary>
        public static byte DASH_PUNCTUATION { get { if (!_DASH_PUNCTUATIONReady) { _DASH_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "DASH_PUNCTUATION"); _DASH_PUNCTUATIONReady = true; } return _DASH_PUNCTUATIONContent; } }
        private static byte _DASH_PUNCTUATIONContent = default;
        private static bool _DASH_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DECIMAL_DIGIT_NUMBER"/>
        /// </summary>
        public static byte DECIMAL_DIGIT_NUMBER { get { if (!_DECIMAL_DIGIT_NUMBERReady) { _DECIMAL_DIGIT_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DECIMAL_DIGIT_NUMBER"); _DECIMAL_DIGIT_NUMBERReady = true; } return _DECIMAL_DIGIT_NUMBERContent; } }
        private static byte _DECIMAL_DIGIT_NUMBERContent = default;
        private static bool _DECIMAL_DIGIT_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_ARABIC_NUMBER"/>
        /// </summary>
        public static byte DIRECTIONALITY_ARABIC_NUMBER { get { if (!_DIRECTIONALITY_ARABIC_NUMBERReady) { _DIRECTIONALITY_ARABIC_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_ARABIC_NUMBER"); _DIRECTIONALITY_ARABIC_NUMBERReady = true; } return _DIRECTIONALITY_ARABIC_NUMBERContent; } }
        private static byte _DIRECTIONALITY_ARABIC_NUMBERContent = default;
        private static bool _DIRECTIONALITY_ARABIC_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_BOUNDARY_NEUTRAL"/>
        /// </summary>
        public static byte DIRECTIONALITY_BOUNDARY_NEUTRAL { get { if (!_DIRECTIONALITY_BOUNDARY_NEUTRALReady) { _DIRECTIONALITY_BOUNDARY_NEUTRALContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_BOUNDARY_NEUTRAL"); _DIRECTIONALITY_BOUNDARY_NEUTRALReady = true; } return _DIRECTIONALITY_BOUNDARY_NEUTRALContent; } }
        private static byte _DIRECTIONALITY_BOUNDARY_NEUTRALContent = default;
        private static bool _DIRECTIONALITY_BOUNDARY_NEUTRALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"/>
        /// </summary>
        public static byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR { get { if (!_DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady) { _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"); _DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady = true; } return _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent; } }
        private static byte _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent = default;
        private static bool _DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER"/>
        /// </summary>
        public static byte DIRECTIONALITY_EUROPEAN_NUMBER { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBERReady) { _DIRECTIONALITY_EUROPEAN_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER"); _DIRECTIONALITY_EUROPEAN_NUMBERReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBERContent; } }
        private static byte _DIRECTIONALITY_EUROPEAN_NUMBERContent = default;
        private static bool _DIRECTIONALITY_EUROPEAN_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"/>
        /// </summary>
        public static byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady) { _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"); _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent; } }
        private static byte _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent = default;
        private static bool _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"/>
        /// </summary>
        public static byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady) { _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"); _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent; } }
        private static byte _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent = default;
        private static bool _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_FIRST_STRONG_ISOLATE"/>
        /// </summary>
        public static byte DIRECTIONALITY_FIRST_STRONG_ISOLATE { get { if (!_DIRECTIONALITY_FIRST_STRONG_ISOLATEReady) { _DIRECTIONALITY_FIRST_STRONG_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_FIRST_STRONG_ISOLATE"); _DIRECTIONALITY_FIRST_STRONG_ISOLATEReady = true; } return _DIRECTIONALITY_FIRST_STRONG_ISOLATEContent; } }
        private static byte _DIRECTIONALITY_FIRST_STRONG_ISOLATEContent = default;
        private static bool _DIRECTIONALITY_FIRST_STRONG_ISOLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT"/>
        /// </summary>
        public static byte DIRECTIONALITY_LEFT_TO_RIGHT { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHTReady) { _DIRECTIONALITY_LEFT_TO_RIGHTContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT"); _DIRECTIONALITY_LEFT_TO_RIGHTReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHTContent; } }
        private static byte _DIRECTIONALITY_LEFT_TO_RIGHTContent = default;
        private static bool _DIRECTIONALITY_LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"/>
        /// </summary>
        public static byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady) { _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"); _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent; } }
        private static byte _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent = default;
        private static bool _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE"/>
        /// </summary>
        public static byte DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEReady) { _DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE"); _DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEContent; } }
        private static byte _DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEContent = default;
        private static bool _DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"/>
        /// </summary>
        public static byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady) { _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"); _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent; } }
        private static byte _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent = default;
        private static bool _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_NONSPACING_MARK"/>
        /// </summary>
        public static byte DIRECTIONALITY_NONSPACING_MARK { get { if (!_DIRECTIONALITY_NONSPACING_MARKReady) { _DIRECTIONALITY_NONSPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_NONSPACING_MARK"); _DIRECTIONALITY_NONSPACING_MARKReady = true; } return _DIRECTIONALITY_NONSPACING_MARKContent; } }
        private static byte _DIRECTIONALITY_NONSPACING_MARKContent = default;
        private static bool _DIRECTIONALITY_NONSPACING_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_OTHER_NEUTRALS"/>
        /// </summary>
        public static byte DIRECTIONALITY_OTHER_NEUTRALS { get { if (!_DIRECTIONALITY_OTHER_NEUTRALSReady) { _DIRECTIONALITY_OTHER_NEUTRALSContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_OTHER_NEUTRALS"); _DIRECTIONALITY_OTHER_NEUTRALSReady = true; } return _DIRECTIONALITY_OTHER_NEUTRALSContent; } }
        private static byte _DIRECTIONALITY_OTHER_NEUTRALSContent = default;
        private static bool _DIRECTIONALITY_OTHER_NEUTRALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_PARAGRAPH_SEPARATOR"/>
        /// </summary>
        public static byte DIRECTIONALITY_PARAGRAPH_SEPARATOR { get { if (!_DIRECTIONALITY_PARAGRAPH_SEPARATORReady) { _DIRECTIONALITY_PARAGRAPH_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_PARAGRAPH_SEPARATOR"); _DIRECTIONALITY_PARAGRAPH_SEPARATORReady = true; } return _DIRECTIONALITY_PARAGRAPH_SEPARATORContent; } }
        private static byte _DIRECTIONALITY_PARAGRAPH_SEPARATORContent = default;
        private static bool _DIRECTIONALITY_PARAGRAPH_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"/>
        /// </summary>
        public static byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT { get { if (!_DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady) { _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"); _DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady = true; } return _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent; } }
        private static byte _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent = default;
        private static bool _DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE"/>
        /// </summary>
        public static byte DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE { get { if (!_DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEReady) { _DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE"); _DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEReady = true; } return _DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEContent; } }
        private static byte _DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEContent = default;
        private static bool _DIRECTIONALITY_POP_DIRECTIONAL_ISOLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT"/>
        /// </summary>
        public static byte DIRECTIONALITY_RIGHT_TO_LEFT { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFTReady) { _DIRECTIONALITY_RIGHT_TO_LEFTContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT"); _DIRECTIONALITY_RIGHT_TO_LEFTReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFTContent; } }
        private static byte _DIRECTIONALITY_RIGHT_TO_LEFTContent = default;
        private static bool _DIRECTIONALITY_RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"/>
        /// </summary>
        public static byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"); _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent; } }
        private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent = default;
        private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"/>
        /// </summary>
        public static byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"); _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent; } }
        private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent = default;
        private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE"/>
        /// </summary>
        public static byte DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE"); _DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEContent; } }
        private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEContent = default;
        private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"/>
        /// </summary>
        public static byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"); _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent; } }
        private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent = default;
        private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_SEGMENT_SEPARATOR"/>
        /// </summary>
        public static byte DIRECTIONALITY_SEGMENT_SEPARATOR { get { if (!_DIRECTIONALITY_SEGMENT_SEPARATORReady) { _DIRECTIONALITY_SEGMENT_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_SEGMENT_SEPARATOR"); _DIRECTIONALITY_SEGMENT_SEPARATORReady = true; } return _DIRECTIONALITY_SEGMENT_SEPARATORContent; } }
        private static byte _DIRECTIONALITY_SEGMENT_SEPARATORContent = default;
        private static bool _DIRECTIONALITY_SEGMENT_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_UNDEFINED"/>
        /// </summary>
        public static byte DIRECTIONALITY_UNDEFINED { get { if (!_DIRECTIONALITY_UNDEFINEDReady) { _DIRECTIONALITY_UNDEFINEDContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_UNDEFINED"); _DIRECTIONALITY_UNDEFINEDReady = true; } return _DIRECTIONALITY_UNDEFINEDContent; } }
        private static byte _DIRECTIONALITY_UNDEFINEDContent = default;
        private static bool _DIRECTIONALITY_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_WHITESPACE"/>
        /// </summary>
        public static byte DIRECTIONALITY_WHITESPACE { get { if (!_DIRECTIONALITY_WHITESPACEReady) { _DIRECTIONALITY_WHITESPACEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_WHITESPACE"); _DIRECTIONALITY_WHITESPACEReady = true; } return _DIRECTIONALITY_WHITESPACEContent; } }
        private static byte _DIRECTIONALITY_WHITESPACEContent = default;
        private static bool _DIRECTIONALITY_WHITESPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#ENCLOSING_MARK"/>
        /// </summary>
        public static byte ENCLOSING_MARK { get { if (!_ENCLOSING_MARKReady) { _ENCLOSING_MARKContent = SGetField<byte>(LocalBridgeClazz, "ENCLOSING_MARK"); _ENCLOSING_MARKReady = true; } return _ENCLOSING_MARKContent; } }
        private static byte _ENCLOSING_MARKContent = default;
        private static bool _ENCLOSING_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#END_PUNCTUATION"/>
        /// </summary>
        public static byte END_PUNCTUATION { get { if (!_END_PUNCTUATIONReady) { _END_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "END_PUNCTUATION"); _END_PUNCTUATIONReady = true; } return _END_PUNCTUATIONContent; } }
        private static byte _END_PUNCTUATIONContent = default;
        private static bool _END_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#FINAL_QUOTE_PUNCTUATION"/>
        /// </summary>
        public static byte FINAL_QUOTE_PUNCTUATION { get { if (!_FINAL_QUOTE_PUNCTUATIONReady) { _FINAL_QUOTE_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "FINAL_QUOTE_PUNCTUATION"); _FINAL_QUOTE_PUNCTUATIONReady = true; } return _FINAL_QUOTE_PUNCTUATIONContent; } }
        private static byte _FINAL_QUOTE_PUNCTUATIONContent = default;
        private static bool _FINAL_QUOTE_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#FORMAT"/>
        /// </summary>
        public static byte FORMAT { get { if (!_FORMATReady) { _FORMATContent = SGetField<byte>(LocalBridgeClazz, "FORMAT"); _FORMATReady = true; } return _FORMATContent; } }
        private static byte _FORMATContent = default;
        private static bool _FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#INITIAL_QUOTE_PUNCTUATION"/>
        /// </summary>
        public static byte INITIAL_QUOTE_PUNCTUATION { get { if (!_INITIAL_QUOTE_PUNCTUATIONReady) { _INITIAL_QUOTE_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "INITIAL_QUOTE_PUNCTUATION"); _INITIAL_QUOTE_PUNCTUATIONReady = true; } return _INITIAL_QUOTE_PUNCTUATIONContent; } }
        private static byte _INITIAL_QUOTE_PUNCTUATIONContent = default;
        private static bool _INITIAL_QUOTE_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#LETTER_NUMBER"/>
        /// </summary>
        public static byte LETTER_NUMBER { get { if (!_LETTER_NUMBERReady) { _LETTER_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "LETTER_NUMBER"); _LETTER_NUMBERReady = true; } return _LETTER_NUMBERContent; } }
        private static byte _LETTER_NUMBERContent = default;
        private static bool _LETTER_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#LINE_SEPARATOR"/>
        /// </summary>
        public static byte LINE_SEPARATOR { get { if (!_LINE_SEPARATORReady) { _LINE_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "LINE_SEPARATOR"); _LINE_SEPARATORReady = true; } return _LINE_SEPARATORContent; } }
        private static byte _LINE_SEPARATORContent = default;
        private static bool _LINE_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#LOWERCASE_LETTER"/>
        /// </summary>
        public static byte LOWERCASE_LETTER { get { if (!_LOWERCASE_LETTERReady) { _LOWERCASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "LOWERCASE_LETTER"); _LOWERCASE_LETTERReady = true; } return _LOWERCASE_LETTERContent; } }
        private static byte _LOWERCASE_LETTERContent = default;
        private static bool _LOWERCASE_LETTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MATH_SYMBOL"/>
        /// </summary>
        public static byte MATH_SYMBOL { get { if (!_MATH_SYMBOLReady) { _MATH_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "MATH_SYMBOL"); _MATH_SYMBOLReady = true; } return _MATH_SYMBOLContent; } }
        private static byte _MATH_SYMBOLContent = default;
        private static bool _MATH_SYMBOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MODIFIER_LETTER"/>
        /// </summary>
        public static byte MODIFIER_LETTER { get { if (!_MODIFIER_LETTERReady) { _MODIFIER_LETTERContent = SGetField<byte>(LocalBridgeClazz, "MODIFIER_LETTER"); _MODIFIER_LETTERReady = true; } return _MODIFIER_LETTERContent; } }
        private static byte _MODIFIER_LETTERContent = default;
        private static bool _MODIFIER_LETTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MODIFIER_SYMBOL"/>
        /// </summary>
        public static byte MODIFIER_SYMBOL { get { if (!_MODIFIER_SYMBOLReady) { _MODIFIER_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "MODIFIER_SYMBOL"); _MODIFIER_SYMBOLReady = true; } return _MODIFIER_SYMBOLContent; } }
        private static byte _MODIFIER_SYMBOLContent = default;
        private static bool _MODIFIER_SYMBOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#NON_SPACING_MARK"/>
        /// </summary>
        public static byte NON_SPACING_MARK { get { if (!_NON_SPACING_MARKReady) { _NON_SPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "NON_SPACING_MARK"); _NON_SPACING_MARKReady = true; } return _NON_SPACING_MARKContent; } }
        private static byte _NON_SPACING_MARKContent = default;
        private static bool _NON_SPACING_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#OTHER_LETTER"/>
        /// </summary>
        public static byte OTHER_LETTER { get { if (!_OTHER_LETTERReady) { _OTHER_LETTERContent = SGetField<byte>(LocalBridgeClazz, "OTHER_LETTER"); _OTHER_LETTERReady = true; } return _OTHER_LETTERContent; } }
        private static byte _OTHER_LETTERContent = default;
        private static bool _OTHER_LETTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#OTHER_NUMBER"/>
        /// </summary>
        public static byte OTHER_NUMBER { get { if (!_OTHER_NUMBERReady) { _OTHER_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "OTHER_NUMBER"); _OTHER_NUMBERReady = true; } return _OTHER_NUMBERContent; } }
        private static byte _OTHER_NUMBERContent = default;
        private static bool _OTHER_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#OTHER_PUNCTUATION"/>
        /// </summary>
        public static byte OTHER_PUNCTUATION { get { if (!_OTHER_PUNCTUATIONReady) { _OTHER_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "OTHER_PUNCTUATION"); _OTHER_PUNCTUATIONReady = true; } return _OTHER_PUNCTUATIONContent; } }
        private static byte _OTHER_PUNCTUATIONContent = default;
        private static bool _OTHER_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#OTHER_SYMBOL"/>
        /// </summary>
        public static byte OTHER_SYMBOL { get { if (!_OTHER_SYMBOLReady) { _OTHER_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "OTHER_SYMBOL"); _OTHER_SYMBOLReady = true; } return _OTHER_SYMBOLContent; } }
        private static byte _OTHER_SYMBOLContent = default;
        private static bool _OTHER_SYMBOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#PARAGRAPH_SEPARATOR"/>
        /// </summary>
        public static byte PARAGRAPH_SEPARATOR { get { if (!_PARAGRAPH_SEPARATORReady) { _PARAGRAPH_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "PARAGRAPH_SEPARATOR"); _PARAGRAPH_SEPARATORReady = true; } return _PARAGRAPH_SEPARATORContent; } }
        private static byte _PARAGRAPH_SEPARATORContent = default;
        private static bool _PARAGRAPH_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#PRIVATE_USE"/>
        /// </summary>
        public static byte PRIVATE_USE { get { if (!_PRIVATE_USEReady) { _PRIVATE_USEContent = SGetField<byte>(LocalBridgeClazz, "PRIVATE_USE"); _PRIVATE_USEReady = true; } return _PRIVATE_USEContent; } }
        private static byte _PRIVATE_USEContent = default;
        private static bool _PRIVATE_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#SPACE_SEPARATOR"/>
        /// </summary>
        public static byte SPACE_SEPARATOR { get { if (!_SPACE_SEPARATORReady) { _SPACE_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "SPACE_SEPARATOR"); _SPACE_SEPARATORReady = true; } return _SPACE_SEPARATORContent; } }
        private static byte _SPACE_SEPARATORContent = default;
        private static bool _SPACE_SEPARATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#START_PUNCTUATION"/>
        /// </summary>
        public static byte START_PUNCTUATION { get { if (!_START_PUNCTUATIONReady) { _START_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "START_PUNCTUATION"); _START_PUNCTUATIONReady = true; } return _START_PUNCTUATIONContent; } }
        private static byte _START_PUNCTUATIONContent = default;
        private static bool _START_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#SURROGATE"/>
        /// </summary>
        public static byte SURROGATE { get { if (!_SURROGATEReady) { _SURROGATEContent = SGetField<byte>(LocalBridgeClazz, "SURROGATE"); _SURROGATEReady = true; } return _SURROGATEContent; } }
        private static byte _SURROGATEContent = default;
        private static bool _SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#TITLECASE_LETTER"/>
        /// </summary>
        public static byte TITLECASE_LETTER { get { if (!_TITLECASE_LETTERReady) { _TITLECASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "TITLECASE_LETTER"); _TITLECASE_LETTERReady = true; } return _TITLECASE_LETTERContent; } }
        private static byte _TITLECASE_LETTERContent = default;
        private static bool _TITLECASE_LETTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#UNASSIGNED"/>
        /// </summary>
        public static byte UNASSIGNED { get { if (!_UNASSIGNEDReady) { _UNASSIGNEDContent = SGetField<byte>(LocalBridgeClazz, "UNASSIGNED"); _UNASSIGNEDReady = true; } return _UNASSIGNEDContent; } }
        private static byte _UNASSIGNEDContent = default;
        private static bool _UNASSIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#UPPERCASE_LETTER"/>
        /// </summary>
        public static byte UPPERCASE_LETTER { get { if (!_UPPERCASE_LETTERReady) { _UPPERCASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "UPPERCASE_LETTER"); _UPPERCASE_LETTERReady = true; } return _UPPERCASE_LETTERContent; } }
        private static byte _UPPERCASE_LETTERContent = default;
        private static bool _UPPERCASE_LETTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_HIGH_SURROGATE"/>
        /// </summary>
        public static char MAX_HIGH_SURROGATE { get { if (!_MAX_HIGH_SURROGATEReady) { _MAX_HIGH_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MAX_HIGH_SURROGATE"); _MAX_HIGH_SURROGATEReady = true; } return _MAX_HIGH_SURROGATEContent; } }
        private static char _MAX_HIGH_SURROGATEContent = default;
        private static bool _MAX_HIGH_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_LOW_SURROGATE"/>
        /// </summary>
        public static char MAX_LOW_SURROGATE { get { if (!_MAX_LOW_SURROGATEReady) { _MAX_LOW_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MAX_LOW_SURROGATE"); _MAX_LOW_SURROGATEReady = true; } return _MAX_LOW_SURROGATEContent; } }
        private static char _MAX_LOW_SURROGATEContent = default;
        private static bool _MAX_LOW_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_SURROGATE"/>
        /// </summary>
        public static char MAX_SURROGATE { get { if (!_MAX_SURROGATEReady) { _MAX_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MAX_SURROGATE"); _MAX_SURROGATEReady = true; } return _MAX_SURROGATEContent; } }
        private static char _MAX_SURROGATEContent = default;
        private static bool _MAX_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_VALUE"/>
        /// </summary>
        public static char MAX_VALUE { get { if (!_MAX_VALUEReady) { _MAX_VALUEContent = SGetField<char>(LocalBridgeClazz, "MAX_VALUE"); _MAX_VALUEReady = true; } return _MAX_VALUEContent; } }
        private static char _MAX_VALUEContent = default;
        private static bool _MAX_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_HIGH_SURROGATE"/>
        /// </summary>
        public static char MIN_HIGH_SURROGATE { get { if (!_MIN_HIGH_SURROGATEReady) { _MIN_HIGH_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MIN_HIGH_SURROGATE"); _MIN_HIGH_SURROGATEReady = true; } return _MIN_HIGH_SURROGATEContent; } }
        private static char _MIN_HIGH_SURROGATEContent = default;
        private static bool _MIN_HIGH_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_LOW_SURROGATE"/>
        /// </summary>
        public static char MIN_LOW_SURROGATE { get { if (!_MIN_LOW_SURROGATEReady) { _MIN_LOW_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MIN_LOW_SURROGATE"); _MIN_LOW_SURROGATEReady = true; } return _MIN_LOW_SURROGATEContent; } }
        private static char _MIN_LOW_SURROGATEContent = default;
        private static bool _MIN_LOW_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_SURROGATE"/>
        /// </summary>
        public static char MIN_SURROGATE { get { if (!_MIN_SURROGATEReady) { _MIN_SURROGATEContent = SGetField<char>(LocalBridgeClazz, "MIN_SURROGATE"); _MIN_SURROGATEReady = true; } return _MIN_SURROGATEContent; } }
        private static char _MIN_SURROGATEContent = default;
        private static bool _MIN_SURROGATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_VALUE"/>
        /// </summary>
        public static char MIN_VALUE { get { if (!_MIN_VALUEReady) { _MIN_VALUEContent = SGetField<char>(LocalBridgeClazz, "MIN_VALUE"); _MIN_VALUEReady = true; } return _MIN_VALUEContent; } }
        private static char _MIN_VALUEContent = default;
        private static bool _MIN_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#BYTES"/>
        /// </summary>
        public static int BYTES { get { if (!_BYTESReady) { _BYTESContent = SGetField<int>(LocalBridgeClazz, "BYTES"); _BYTESReady = true; } return _BYTESContent; } }
        private static int _BYTESContent = default;
        private static bool _BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_CODE_POINT"/>
        /// </summary>
        public static int MAX_CODE_POINT { get { if (!_MAX_CODE_POINTReady) { _MAX_CODE_POINTContent = SGetField<int>(LocalBridgeClazz, "MAX_CODE_POINT"); _MAX_CODE_POINTReady = true; } return _MAX_CODE_POINTContent; } }
        private static int _MAX_CODE_POINTContent = default;
        private static bool _MAX_CODE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MAX_RADIX"/>
        /// </summary>
        public static int MAX_RADIX { get { if (!_MAX_RADIXReady) { _MAX_RADIXContent = SGetField<int>(LocalBridgeClazz, "MAX_RADIX"); _MAX_RADIXReady = true; } return _MAX_RADIXContent; } }
        private static int _MAX_RADIXContent = default;
        private static bool _MAX_RADIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_CODE_POINT"/>
        /// </summary>
        public static int MIN_CODE_POINT { get { if (!_MIN_CODE_POINTReady) { _MIN_CODE_POINTContent = SGetField<int>(LocalBridgeClazz, "MIN_CODE_POINT"); _MIN_CODE_POINTReady = true; } return _MIN_CODE_POINTContent; } }
        private static int _MIN_CODE_POINTContent = default;
        private static bool _MIN_CODE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_RADIX"/>
        /// </summary>
        public static int MIN_RADIX { get { if (!_MIN_RADIXReady) { _MIN_RADIXContent = SGetField<int>(LocalBridgeClazz, "MIN_RADIX"); _MIN_RADIXReady = true; } return _MIN_RADIXContent; } }
        private static int _MIN_RADIXContent = default;
        private static bool _MIN_RADIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#MIN_SUPPLEMENTARY_CODE_POINT"/>
        /// </summary>
        public static int MIN_SUPPLEMENTARY_CODE_POINT { get { if (!_MIN_SUPPLEMENTARY_CODE_POINTReady) { _MIN_SUPPLEMENTARY_CODE_POINTContent = SGetField<int>(LocalBridgeClazz, "MIN_SUPPLEMENTARY_CODE_POINT"); _MIN_SUPPLEMENTARY_CODE_POINTReady = true; } return _MIN_SUPPLEMENTARY_CODE_POINTContent; } }
        private static int _MIN_SUPPLEMENTARY_CODE_POINTContent = default;
        private static bool _MIN_SUPPLEMENTARY_CODE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#SIZE"/>
        /// </summary>
        public static int SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<int>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
        private static int _SIZEContent = default;
        private static bool _SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#TYPE"/>
        /// </summary>
        public static Java.Lang.Class TYPE { get { if (!_TYPEReady) { _TYPEContent = SGetField<Java.Lang.Class>(LocalBridgeClazz, "TYPE"); _TYPEReady = true; } return _TYPEContent; } }
        private static Java.Lang.Class _TYPEContent = default;
        private static bool _TYPEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isAlphabetic(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsAlphabetic(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isAlphabetic", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isBmpCodePoint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsBmpCodePoint(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isBmpCodePoint", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isDefined(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDefined(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDefined", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isDefined(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDefined(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDefined", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isDigit(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDigit(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDigit", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isDigit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDigit(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDigit", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isHighSurrogate(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsHighSurrogate(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isHighSurrogate", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsIdentifierIgnorable(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isIdentifierIgnorable", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsIdentifierIgnorable(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isIdentifierIgnorable", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isIdeographic(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsIdeographic(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isIdeographic", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isISOControl(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsISOControl(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isISOControl", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isISOControl(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsISOControl(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isISOControl", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsJavaIdentifierPart(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isJavaIdentifierPart", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsJavaIdentifierPart(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isJavaIdentifierPart", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsJavaIdentifierStart(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isJavaIdentifierStart", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsJavaIdentifierStart(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isJavaIdentifierStart", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLetter(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLetter(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLetter", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLetter(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLetter(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLetter", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLetterOrDigit(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLetterOrDigit", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLetterOrDigit(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLetterOrDigit", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLowerCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLowerCase(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLowerCase", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLowerCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLowerCase(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLowerCase", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isLowSurrogate(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLowSurrogate(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLowSurrogate", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isMirrored(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsMirrored(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isMirrored", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isMirrored(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsMirrored(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isMirrored", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isSpaceChar(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSpaceChar(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSpaceChar", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSpaceChar(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSpaceChar", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isSupplementaryCodePoint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSupplementaryCodePoint(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSupplementaryCodePoint", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isSurrogate(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSurrogate(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSurrogate", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isSurrogatePair(char,char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSurrogatePair(char arg0, char arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isSurrogatePair", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isTitleCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTitleCase(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isTitleCase", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isTitleCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTitleCase(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isTitleCase", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUnicodeIdentifierPart(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUnicodeIdentifierPart", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUnicodeIdentifierPart(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUnicodeIdentifierPart", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUnicodeIdentifierStart(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUnicodeIdentifierStart", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUnicodeIdentifierStart(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUnicodeIdentifierStart", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUpperCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUpperCase(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUpperCase", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isUpperCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUpperCase(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUpperCase", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isValidCodePoint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsValidCodePoint(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isValidCodePoint", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isWhitespace(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsWhitespace(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isWhitespace", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isWhitespace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsWhitespace(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isWhitespace", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getDirectionality(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte GetDirectionality(char arg0)
        {
            return SExecuteWithSignature<byte>(LocalBridgeClazz, "getDirectionality", "(C)B", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getDirectionality(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte GetDirectionality(int arg0)
        {
            return SExecuteWithSignature<byte>(LocalBridgeClazz, "getDirectionality", "(I)B", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#forDigit(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="char"/></returns>
        public static char ForDigit(int arg0, int arg1)
        {
            return SExecute<char>(LocalBridgeClazz, "forDigit", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#highSurrogate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="char"/></returns>
        public static char HighSurrogate(int arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "highSurrogate", "(I)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#lowSurrogate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="char"/></returns>
        public static char LowSurrogate(int arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "lowSurrogate", "(I)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#reverseBytes(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="char"/></returns>
        public static char ReverseBytes(char arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "reverseBytes", "(C)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toLowerCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="char"/></returns>
        public static char ToLowerCase(char arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "toLowerCase", "(C)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toTitleCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="char"/></returns>
        public static char ToTitleCase(char arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "toTitleCase", "(C)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toUpperCase(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="char"/></returns>
        public static char ToUpperCase(char arg0)
        {
            return SExecuteWithSignature<char>(LocalBridgeClazz, "toUpperCase", "(C)C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toChars(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="char"/></returns>
        public static char[] ToChars(int arg0)
        {
            return SExecuteWithSignatureArray<char>(LocalBridgeClazz, "toChars", "(I)[C", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#charCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CharCount(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "charCount", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointAt(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointAt(char[] arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointAt", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointAt(char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointAt(char[] arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointAt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointAt(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointAt(Java.Lang.CharSequence arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointAt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointBefore(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointBefore(char[] arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointBefore", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointBefore(char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointBefore(char[] arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointBefore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointBefore(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointBefore(Java.Lang.CharSequence arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointBefore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointCount(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointCount(char[] arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointCount", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointCount(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointCount(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "codePointCount", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#codePointOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CodePointOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "codePointOf", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#compare(char,char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(char arg0, char arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#digit(char,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Digit(char arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "digit", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#digit(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Digit(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "digit", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getNumericValue(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetNumericValue(char arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getNumericValue", "(C)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getNumericValue(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetNumericValue(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getNumericValue", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getType(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetType(char arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getType", "(C)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetType(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getType", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#hashCode(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int HashCode(char arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "hashCode", "(C)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#offsetByCodePoints(char[],int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int OffsetByCodePoints(char[] arg0, int arg1, int arg2, int arg3, int arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "offsetByCodePoints", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#offsetByCodePoints(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int OffsetByCodePoints(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "offsetByCodePoints", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toChars(int,char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ToChars(int arg0, char[] arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "toChars", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toCodePoint(char,char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ToCodePoint(char arg0, char arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "toCodePoint", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toLowerCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ToLowerCase(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "toLowerCase", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toTitleCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ToTitleCase(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "toTitleCase", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toUpperCase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ToUpperCase(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "toUpperCase", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#valueOf(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="Java.Lang.Character"/></returns>
        public static Java.Lang.Character ValueOf(char arg0)
        {
            return SExecuteWithSignature<Java.Lang.Character>(LocalBridgeClazz, "valueOf", "(C)Ljava/lang/Character;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#getName(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetName(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getName", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toString(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ToString(char arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "toString", "(C)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#toString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "toString", "(I)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#charValue()"/>
        /// </summary>
        /// <returns><see cref="char"/></returns>
        public char CharValue()
        {
            return IExecuteWithSignature<char>("charValue", "()C");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#compareTo(java.lang.Character)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Character"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(Java.Lang.Character arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Character;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(object arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
        }

        #endregion

        #region Nested classes
        #region Subset
        public partial class Subset
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UnicodeBlock
        public partial class UnicodeBlock
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ADLAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ADLAM { get { if (!_ADLAMReady) { _ADLAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ADLAM"); _ADLAMReady = true; } return _ADLAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _ADLAMContent = default;
            private static bool _ADLAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#AEGEAN_NUMBERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock AEGEAN_NUMBERS { get { if (!_AEGEAN_NUMBERSReady) { _AEGEAN_NUMBERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "AEGEAN_NUMBERS"); _AEGEAN_NUMBERSReady = true; } return _AEGEAN_NUMBERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _AEGEAN_NUMBERSContent = default;
            private static bool _AEGEAN_NUMBERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#AHOM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock AHOM { get { if (!_AHOMReady) { _AHOMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "AHOM"); _AHOMReady = true; } return _AHOMContent; } }
            private static Java.Lang.Character.UnicodeBlock _AHOMContent = default;
            private static bool _AHOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ALCHEMICAL_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ALCHEMICAL_SYMBOLS { get { if (!_ALCHEMICAL_SYMBOLSReady) { _ALCHEMICAL_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ALCHEMICAL_SYMBOLS"); _ALCHEMICAL_SYMBOLSReady = true; } return _ALCHEMICAL_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ALCHEMICAL_SYMBOLSContent = default;
            private static bool _ALCHEMICAL_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ALPHABETIC_PRESENTATION_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ALPHABETIC_PRESENTATION_FORMS { get { if (!_ALPHABETIC_PRESENTATION_FORMSReady) { _ALPHABETIC_PRESENTATION_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ALPHABETIC_PRESENTATION_FORMS"); _ALPHABETIC_PRESENTATION_FORMSReady = true; } return _ALPHABETIC_PRESENTATION_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ALPHABETIC_PRESENTATION_FORMSContent = default;
            private static bool _ALPHABETIC_PRESENTATION_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ANATOLIAN_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ANATOLIAN_HIEROGLYPHS { get { if (!_ANATOLIAN_HIEROGLYPHSReady) { _ANATOLIAN_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ANATOLIAN_HIEROGLYPHS"); _ANATOLIAN_HIEROGLYPHSReady = true; } return _ANATOLIAN_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ANATOLIAN_HIEROGLYPHSContent = default;
            private static bool _ANATOLIAN_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ANCIENT_GREEK_MUSICAL_NOTATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ANCIENT_GREEK_MUSICAL_NOTATION { get { if (!_ANCIENT_GREEK_MUSICAL_NOTATIONReady) { _ANCIENT_GREEK_MUSICAL_NOTATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ANCIENT_GREEK_MUSICAL_NOTATION"); _ANCIENT_GREEK_MUSICAL_NOTATIONReady = true; } return _ANCIENT_GREEK_MUSICAL_NOTATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _ANCIENT_GREEK_MUSICAL_NOTATIONContent = default;
            private static bool _ANCIENT_GREEK_MUSICAL_NOTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ANCIENT_GREEK_NUMBERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ANCIENT_GREEK_NUMBERS { get { if (!_ANCIENT_GREEK_NUMBERSReady) { _ANCIENT_GREEK_NUMBERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ANCIENT_GREEK_NUMBERS"); _ANCIENT_GREEK_NUMBERSReady = true; } return _ANCIENT_GREEK_NUMBERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ANCIENT_GREEK_NUMBERSContent = default;
            private static bool _ANCIENT_GREEK_NUMBERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ANCIENT_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ANCIENT_SYMBOLS { get { if (!_ANCIENT_SYMBOLSReady) { _ANCIENT_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ANCIENT_SYMBOLS"); _ANCIENT_SYMBOLSReady = true; } return _ANCIENT_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ANCIENT_SYMBOLSContent = default;
            private static bool _ANCIENT_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC { get { if (!_ARABICReady) { _ARABICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC"); _ARABICReady = true; } return _ARABICContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABICContent = default;
            private static bool _ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC_EXTENDED_A { get { if (!_ARABIC_EXTENDED_AReady) { _ARABIC_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC_EXTENDED_A"); _ARABIC_EXTENDED_AReady = true; } return _ARABIC_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABIC_EXTENDED_AContent = default;
            private static bool _ARABIC_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS { get { if (!_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSReady) { _ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"); _ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSReady = true; } return _ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSContent = default;
            private static bool _ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC_PRESENTATION_FORMS_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC_PRESENTATION_FORMS_A { get { if (!_ARABIC_PRESENTATION_FORMS_AReady) { _ARABIC_PRESENTATION_FORMS_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC_PRESENTATION_FORMS_A"); _ARABIC_PRESENTATION_FORMS_AReady = true; } return _ARABIC_PRESENTATION_FORMS_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABIC_PRESENTATION_FORMS_AContent = default;
            private static bool _ARABIC_PRESENTATION_FORMS_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC_PRESENTATION_FORMS_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC_PRESENTATION_FORMS_B { get { if (!_ARABIC_PRESENTATION_FORMS_BReady) { _ARABIC_PRESENTATION_FORMS_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC_PRESENTATION_FORMS_B"); _ARABIC_PRESENTATION_FORMS_BReady = true; } return _ARABIC_PRESENTATION_FORMS_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABIC_PRESENTATION_FORMS_BContent = default;
            private static bool _ARABIC_PRESENTATION_FORMS_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARABIC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARABIC_SUPPLEMENT { get { if (!_ARABIC_SUPPLEMENTReady) { _ARABIC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARABIC_SUPPLEMENT"); _ARABIC_SUPPLEMENTReady = true; } return _ARABIC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARABIC_SUPPLEMENTContent = default;
            private static bool _ARABIC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARMENIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARMENIAN { get { if (!_ARMENIANReady) { _ARMENIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARMENIAN"); _ARMENIANReady = true; } return _ARMENIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARMENIANContent = default;
            private static bool _ARMENIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ARROWS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ARROWS { get { if (!_ARROWSReady) { _ARROWSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ARROWS"); _ARROWSReady = true; } return _ARROWSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ARROWSContent = default;
            private static bool _ARROWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#AVESTAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock AVESTAN { get { if (!_AVESTANReady) { _AVESTANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "AVESTAN"); _AVESTANReady = true; } return _AVESTANContent; } }
            private static Java.Lang.Character.UnicodeBlock _AVESTANContent = default;
            private static bool _AVESTANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BALINESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BALINESE { get { if (!_BALINESEReady) { _BALINESEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BALINESE"); _BALINESEReady = true; } return _BALINESEContent; } }
            private static Java.Lang.Character.UnicodeBlock _BALINESEContent = default;
            private static bool _BALINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BAMUM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BAMUM { get { if (!_BAMUMReady) { _BAMUMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BAMUM"); _BAMUMReady = true; } return _BAMUMContent; } }
            private static Java.Lang.Character.UnicodeBlock _BAMUMContent = default;
            private static bool _BAMUMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BAMUM_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BAMUM_SUPPLEMENT { get { if (!_BAMUM_SUPPLEMENTReady) { _BAMUM_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BAMUM_SUPPLEMENT"); _BAMUM_SUPPLEMENTReady = true; } return _BAMUM_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _BAMUM_SUPPLEMENTContent = default;
            private static bool _BAMUM_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BASIC_LATIN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BASIC_LATIN { get { if (!_BASIC_LATINReady) { _BASIC_LATINContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BASIC_LATIN"); _BASIC_LATINReady = true; } return _BASIC_LATINContent; } }
            private static Java.Lang.Character.UnicodeBlock _BASIC_LATINContent = default;
            private static bool _BASIC_LATINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BASSA_VAH"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BASSA_VAH { get { if (!_BASSA_VAHReady) { _BASSA_VAHContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BASSA_VAH"); _BASSA_VAHReady = true; } return _BASSA_VAHContent; } }
            private static Java.Lang.Character.UnicodeBlock _BASSA_VAHContent = default;
            private static bool _BASSA_VAHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BATAK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BATAK { get { if (!_BATAKReady) { _BATAKContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BATAK"); _BATAKReady = true; } return _BATAKContent; } }
            private static Java.Lang.Character.UnicodeBlock _BATAKContent = default;
            private static bool _BATAKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BENGALI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BENGALI { get { if (!_BENGALIReady) { _BENGALIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BENGALI"); _BENGALIReady = true; } return _BENGALIContent; } }
            private static Java.Lang.Character.UnicodeBlock _BENGALIContent = default;
            private static bool _BENGALIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BHAIKSUKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BHAIKSUKI { get { if (!_BHAIKSUKIReady) { _BHAIKSUKIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BHAIKSUKI"); _BHAIKSUKIReady = true; } return _BHAIKSUKIContent; } }
            private static Java.Lang.Character.UnicodeBlock _BHAIKSUKIContent = default;
            private static bool _BHAIKSUKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BLOCK_ELEMENTS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BLOCK_ELEMENTS { get { if (!_BLOCK_ELEMENTSReady) { _BLOCK_ELEMENTSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BLOCK_ELEMENTS"); _BLOCK_ELEMENTSReady = true; } return _BLOCK_ELEMENTSContent; } }
            private static Java.Lang.Character.UnicodeBlock _BLOCK_ELEMENTSContent = default;
            private static bool _BLOCK_ELEMENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BOPOMOFO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BOPOMOFO { get { if (!_BOPOMOFOReady) { _BOPOMOFOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BOPOMOFO"); _BOPOMOFOReady = true; } return _BOPOMOFOContent; } }
            private static Java.Lang.Character.UnicodeBlock _BOPOMOFOContent = default;
            private static bool _BOPOMOFOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BOPOMOFO_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BOPOMOFO_EXTENDED { get { if (!_BOPOMOFO_EXTENDEDReady) { _BOPOMOFO_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BOPOMOFO_EXTENDED"); _BOPOMOFO_EXTENDEDReady = true; } return _BOPOMOFO_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _BOPOMOFO_EXTENDEDContent = default;
            private static bool _BOPOMOFO_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BOX_DRAWING"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BOX_DRAWING { get { if (!_BOX_DRAWINGReady) { _BOX_DRAWINGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BOX_DRAWING"); _BOX_DRAWINGReady = true; } return _BOX_DRAWINGContent; } }
            private static Java.Lang.Character.UnicodeBlock _BOX_DRAWINGContent = default;
            private static bool _BOX_DRAWINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BRAHMI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BRAHMI { get { if (!_BRAHMIReady) { _BRAHMIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BRAHMI"); _BRAHMIReady = true; } return _BRAHMIContent; } }
            private static Java.Lang.Character.UnicodeBlock _BRAHMIContent = default;
            private static bool _BRAHMIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BRAILLE_PATTERNS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BRAILLE_PATTERNS { get { if (!_BRAILLE_PATTERNSReady) { _BRAILLE_PATTERNSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BRAILLE_PATTERNS"); _BRAILLE_PATTERNSReady = true; } return _BRAILLE_PATTERNSContent; } }
            private static Java.Lang.Character.UnicodeBlock _BRAILLE_PATTERNSContent = default;
            private static bool _BRAILLE_PATTERNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BUGINESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BUGINESE { get { if (!_BUGINESEReady) { _BUGINESEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BUGINESE"); _BUGINESEReady = true; } return _BUGINESEContent; } }
            private static Java.Lang.Character.UnicodeBlock _BUGINESEContent = default;
            private static bool _BUGINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BUHID"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BUHID { get { if (!_BUHIDReady) { _BUHIDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BUHID"); _BUHIDReady = true; } return _BUHIDContent; } }
            private static Java.Lang.Character.UnicodeBlock _BUHIDContent = default;
            private static bool _BUHIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#BYZANTINE_MUSICAL_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock BYZANTINE_MUSICAL_SYMBOLS { get { if (!_BYZANTINE_MUSICAL_SYMBOLSReady) { _BYZANTINE_MUSICAL_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "BYZANTINE_MUSICAL_SYMBOLS"); _BYZANTINE_MUSICAL_SYMBOLSReady = true; } return _BYZANTINE_MUSICAL_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _BYZANTINE_MUSICAL_SYMBOLSContent = default;
            private static bool _BYZANTINE_MUSICAL_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CARIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CARIAN { get { if (!_CARIANReady) { _CARIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CARIAN"); _CARIANReady = true; } return _CARIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _CARIANContent = default;
            private static bool _CARIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CAUCASIAN_ALBANIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CAUCASIAN_ALBANIAN { get { if (!_CAUCASIAN_ALBANIANReady) { _CAUCASIAN_ALBANIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CAUCASIAN_ALBANIAN"); _CAUCASIAN_ALBANIANReady = true; } return _CAUCASIAN_ALBANIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _CAUCASIAN_ALBANIANContent = default;
            private static bool _CAUCASIAN_ALBANIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CHAKMA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CHAKMA { get { if (!_CHAKMAReady) { _CHAKMAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CHAKMA"); _CHAKMAReady = true; } return _CHAKMAContent; } }
            private static Java.Lang.Character.UnicodeBlock _CHAKMAContent = default;
            private static bool _CHAKMAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CHAM { get { if (!_CHAMReady) { _CHAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CHAM"); _CHAMReady = true; } return _CHAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _CHAMContent = default;
            private static bool _CHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CHEROKEE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CHEROKEE { get { if (!_CHEROKEEReady) { _CHEROKEEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CHEROKEE"); _CHEROKEEReady = true; } return _CHEROKEEContent; } }
            private static Java.Lang.Character.UnicodeBlock _CHEROKEEContent = default;
            private static bool _CHEROKEEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CHEROKEE_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CHEROKEE_SUPPLEMENT { get { if (!_CHEROKEE_SUPPLEMENTReady) { _CHEROKEE_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CHEROKEE_SUPPLEMENT"); _CHEROKEE_SUPPLEMENTReady = true; } return _CHEROKEE_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _CHEROKEE_SUPPLEMENTContent = default;
            private static bool _CHEROKEE_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_COMPATIBILITY"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_COMPATIBILITY { get { if (!_CJK_COMPATIBILITYReady) { _CJK_COMPATIBILITYContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_COMPATIBILITY"); _CJK_COMPATIBILITYReady = true; } return _CJK_COMPATIBILITYContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_COMPATIBILITYContent = default;
            private static bool _CJK_COMPATIBILITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_COMPATIBILITY_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_COMPATIBILITY_FORMS { get { if (!_CJK_COMPATIBILITY_FORMSReady) { _CJK_COMPATIBILITY_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_COMPATIBILITY_FORMS"); _CJK_COMPATIBILITY_FORMSReady = true; } return _CJK_COMPATIBILITY_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_COMPATIBILITY_FORMSContent = default;
            private static bool _CJK_COMPATIBILITY_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_COMPATIBILITY_IDEOGRAPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS { get { if (!_CJK_COMPATIBILITY_IDEOGRAPHSReady) { _CJK_COMPATIBILITY_IDEOGRAPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_COMPATIBILITY_IDEOGRAPHS"); _CJK_COMPATIBILITY_IDEOGRAPHSReady = true; } return _CJK_COMPATIBILITY_IDEOGRAPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_COMPATIBILITY_IDEOGRAPHSContent = default;
            private static bool _CJK_COMPATIBILITY_IDEOGRAPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT { get { if (!_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTReady) { _CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"); _CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTReady = true; } return _CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTContent = default;
            private static bool _CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_RADICALS_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_RADICALS_SUPPLEMENT { get { if (!_CJK_RADICALS_SUPPLEMENTReady) { _CJK_RADICALS_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_RADICALS_SUPPLEMENT"); _CJK_RADICALS_SUPPLEMENTReady = true; } return _CJK_RADICALS_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_RADICALS_SUPPLEMENTContent = default;
            private static bool _CJK_RADICALS_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_STROKES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_STROKES { get { if (!_CJK_STROKESReady) { _CJK_STROKESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_STROKES"); _CJK_STROKESReady = true; } return _CJK_STROKESContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_STROKESContent = default;
            private static bool _CJK_STROKESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_SYMBOLS_AND_PUNCTUATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION { get { if (!_CJK_SYMBOLS_AND_PUNCTUATIONReady) { _CJK_SYMBOLS_AND_PUNCTUATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_SYMBOLS_AND_PUNCTUATION"); _CJK_SYMBOLS_AND_PUNCTUATIONReady = true; } return _CJK_SYMBOLS_AND_PUNCTUATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_SYMBOLS_AND_PUNCTUATIONContent = default;
            private static bool _CJK_SYMBOLS_AND_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS { get { if (!_CJK_UNIFIED_IDEOGRAPHSReady) { _CJK_UNIFIED_IDEOGRAPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS"); _CJK_UNIFIED_IDEOGRAPHSReady = true; } return _CJK_UNIFIED_IDEOGRAPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHSContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_CReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_DReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_EReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F { get { if (!_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FReady) { _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F"); _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FReady = true; } return _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FContent; } }
            private static Java.Lang.Character.UnicodeBlock _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FContent = default;
            private static bool _CJK_UNIFIED_IDEOGRAPHS_EXTENSION_FReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMBINING_DIACRITICAL_MARKS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMBINING_DIACRITICAL_MARKS { get { if (!_COMBINING_DIACRITICAL_MARKSReady) { _COMBINING_DIACRITICAL_MARKSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMBINING_DIACRITICAL_MARKS"); _COMBINING_DIACRITICAL_MARKSReady = true; } return _COMBINING_DIACRITICAL_MARKSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMBINING_DIACRITICAL_MARKSContent = default;
            private static bool _COMBINING_DIACRITICAL_MARKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMBINING_DIACRITICAL_MARKS_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMBINING_DIACRITICAL_MARKS_EXTENDED { get { if (!_COMBINING_DIACRITICAL_MARKS_EXTENDEDReady) { _COMBINING_DIACRITICAL_MARKS_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMBINING_DIACRITICAL_MARKS_EXTENDED"); _COMBINING_DIACRITICAL_MARKS_EXTENDEDReady = true; } return _COMBINING_DIACRITICAL_MARKS_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMBINING_DIACRITICAL_MARKS_EXTENDEDContent = default;
            private static bool _COMBINING_DIACRITICAL_MARKS_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMBINING_DIACRITICAL_MARKS_SUPPLEMENT { get { if (!_COMBINING_DIACRITICAL_MARKS_SUPPLEMENTReady) { _COMBINING_DIACRITICAL_MARKS_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"); _COMBINING_DIACRITICAL_MARKS_SUPPLEMENTReady = true; } return _COMBINING_DIACRITICAL_MARKS_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMBINING_DIACRITICAL_MARKS_SUPPLEMENTContent = default;
            private static bool _COMBINING_DIACRITICAL_MARKS_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMBINING_HALF_MARKS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMBINING_HALF_MARKS { get { if (!_COMBINING_HALF_MARKSReady) { _COMBINING_HALF_MARKSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMBINING_HALF_MARKS"); _COMBINING_HALF_MARKSReady = true; } return _COMBINING_HALF_MARKSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMBINING_HALF_MARKSContent = default;
            private static bool _COMBINING_HALF_MARKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMBINING_MARKS_FOR_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS { get { if (!_COMBINING_MARKS_FOR_SYMBOLSReady) { _COMBINING_MARKS_FOR_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMBINING_MARKS_FOR_SYMBOLS"); _COMBINING_MARKS_FOR_SYMBOLSReady = true; } return _COMBINING_MARKS_FOR_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMBINING_MARKS_FOR_SYMBOLSContent = default;
            private static bool _COMBINING_MARKS_FOR_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COMMON_INDIC_NUMBER_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COMMON_INDIC_NUMBER_FORMS { get { if (!_COMMON_INDIC_NUMBER_FORMSReady) { _COMMON_INDIC_NUMBER_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COMMON_INDIC_NUMBER_FORMS"); _COMMON_INDIC_NUMBER_FORMSReady = true; } return _COMMON_INDIC_NUMBER_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COMMON_INDIC_NUMBER_FORMSContent = default;
            private static bool _COMMON_INDIC_NUMBER_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CONTROL_PICTURES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CONTROL_PICTURES { get { if (!_CONTROL_PICTURESReady) { _CONTROL_PICTURESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CONTROL_PICTURES"); _CONTROL_PICTURESReady = true; } return _CONTROL_PICTURESContent; } }
            private static Java.Lang.Character.UnicodeBlock _CONTROL_PICTURESContent = default;
            private static bool _CONTROL_PICTURESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COPTIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COPTIC { get { if (!_COPTICReady) { _COPTICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COPTIC"); _COPTICReady = true; } return _COPTICContent; } }
            private static Java.Lang.Character.UnicodeBlock _COPTICContent = default;
            private static bool _COPTICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COPTIC_EPACT_NUMBERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COPTIC_EPACT_NUMBERS { get { if (!_COPTIC_EPACT_NUMBERSReady) { _COPTIC_EPACT_NUMBERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COPTIC_EPACT_NUMBERS"); _COPTIC_EPACT_NUMBERSReady = true; } return _COPTIC_EPACT_NUMBERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COPTIC_EPACT_NUMBERSContent = default;
            private static bool _COPTIC_EPACT_NUMBERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#COUNTING_ROD_NUMERALS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock COUNTING_ROD_NUMERALS { get { if (!_COUNTING_ROD_NUMERALSReady) { _COUNTING_ROD_NUMERALSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "COUNTING_ROD_NUMERALS"); _COUNTING_ROD_NUMERALSReady = true; } return _COUNTING_ROD_NUMERALSContent; } }
            private static Java.Lang.Character.UnicodeBlock _COUNTING_ROD_NUMERALSContent = default;
            private static bool _COUNTING_ROD_NUMERALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CUNEIFORM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CUNEIFORM { get { if (!_CUNEIFORMReady) { _CUNEIFORMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CUNEIFORM"); _CUNEIFORMReady = true; } return _CUNEIFORMContent; } }
            private static Java.Lang.Character.UnicodeBlock _CUNEIFORMContent = default;
            private static bool _CUNEIFORMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CUNEIFORM_NUMBERS_AND_PUNCTUATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CUNEIFORM_NUMBERS_AND_PUNCTUATION { get { if (!_CUNEIFORM_NUMBERS_AND_PUNCTUATIONReady) { _CUNEIFORM_NUMBERS_AND_PUNCTUATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CUNEIFORM_NUMBERS_AND_PUNCTUATION"); _CUNEIFORM_NUMBERS_AND_PUNCTUATIONReady = true; } return _CUNEIFORM_NUMBERS_AND_PUNCTUATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _CUNEIFORM_NUMBERS_AND_PUNCTUATIONContent = default;
            private static bool _CUNEIFORM_NUMBERS_AND_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CURRENCY_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CURRENCY_SYMBOLS { get { if (!_CURRENCY_SYMBOLSReady) { _CURRENCY_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CURRENCY_SYMBOLS"); _CURRENCY_SYMBOLSReady = true; } return _CURRENCY_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _CURRENCY_SYMBOLSContent = default;
            private static bool _CURRENCY_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYPRIOT_SYLLABARY"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYPRIOT_SYLLABARY { get { if (!_CYPRIOT_SYLLABARYReady) { _CYPRIOT_SYLLABARYContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYPRIOT_SYLLABARY"); _CYPRIOT_SYLLABARYReady = true; } return _CYPRIOT_SYLLABARYContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYPRIOT_SYLLABARYContent = default;
            private static bool _CYPRIOT_SYLLABARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYRILLIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYRILLIC { get { if (!_CYRILLICReady) { _CYRILLICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYRILLIC"); _CYRILLICReady = true; } return _CYRILLICContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYRILLICContent = default;
            private static bool _CYRILLICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYRILLIC_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYRILLIC_EXTENDED_A { get { if (!_CYRILLIC_EXTENDED_AReady) { _CYRILLIC_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYRILLIC_EXTENDED_A"); _CYRILLIC_EXTENDED_AReady = true; } return _CYRILLIC_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYRILLIC_EXTENDED_AContent = default;
            private static bool _CYRILLIC_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYRILLIC_EXTENDED_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYRILLIC_EXTENDED_B { get { if (!_CYRILLIC_EXTENDED_BReady) { _CYRILLIC_EXTENDED_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYRILLIC_EXTENDED_B"); _CYRILLIC_EXTENDED_BReady = true; } return _CYRILLIC_EXTENDED_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYRILLIC_EXTENDED_BContent = default;
            private static bool _CYRILLIC_EXTENDED_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYRILLIC_EXTENDED_C"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYRILLIC_EXTENDED_C { get { if (!_CYRILLIC_EXTENDED_CReady) { _CYRILLIC_EXTENDED_CContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYRILLIC_EXTENDED_C"); _CYRILLIC_EXTENDED_CReady = true; } return _CYRILLIC_EXTENDED_CContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYRILLIC_EXTENDED_CContent = default;
            private static bool _CYRILLIC_EXTENDED_CReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#CYRILLIC_SUPPLEMENTARY"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock CYRILLIC_SUPPLEMENTARY { get { if (!_CYRILLIC_SUPPLEMENTARYReady) { _CYRILLIC_SUPPLEMENTARYContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "CYRILLIC_SUPPLEMENTARY"); _CYRILLIC_SUPPLEMENTARYReady = true; } return _CYRILLIC_SUPPLEMENTARYContent; } }
            private static Java.Lang.Character.UnicodeBlock _CYRILLIC_SUPPLEMENTARYContent = default;
            private static bool _CYRILLIC_SUPPLEMENTARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DESERET"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DESERET { get { if (!_DESERETReady) { _DESERETContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DESERET"); _DESERETReady = true; } return _DESERETContent; } }
            private static Java.Lang.Character.UnicodeBlock _DESERETContent = default;
            private static bool _DESERETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DEVANAGARI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DEVANAGARI { get { if (!_DEVANAGARIReady) { _DEVANAGARIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DEVANAGARI"); _DEVANAGARIReady = true; } return _DEVANAGARIContent; } }
            private static Java.Lang.Character.UnicodeBlock _DEVANAGARIContent = default;
            private static bool _DEVANAGARIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DEVANAGARI_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DEVANAGARI_EXTENDED { get { if (!_DEVANAGARI_EXTENDEDReady) { _DEVANAGARI_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DEVANAGARI_EXTENDED"); _DEVANAGARI_EXTENDEDReady = true; } return _DEVANAGARI_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _DEVANAGARI_EXTENDEDContent = default;
            private static bool _DEVANAGARI_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DINGBATS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DINGBATS { get { if (!_DINGBATSReady) { _DINGBATSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DINGBATS"); _DINGBATSReady = true; } return _DINGBATSContent; } }
            private static Java.Lang.Character.UnicodeBlock _DINGBATSContent = default;
            private static bool _DINGBATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DOMINO_TILES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DOMINO_TILES { get { if (!_DOMINO_TILESReady) { _DOMINO_TILESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DOMINO_TILES"); _DOMINO_TILESReady = true; } return _DOMINO_TILESContent; } }
            private static Java.Lang.Character.UnicodeBlock _DOMINO_TILESContent = default;
            private static bool _DOMINO_TILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#DUPLOYAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock DUPLOYAN { get { if (!_DUPLOYANReady) { _DUPLOYANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "DUPLOYAN"); _DUPLOYANReady = true; } return _DUPLOYANContent; } }
            private static Java.Lang.Character.UnicodeBlock _DUPLOYANContent = default;
            private static bool _DUPLOYANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#EARLY_DYNASTIC_CUNEIFORM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock EARLY_DYNASTIC_CUNEIFORM { get { if (!_EARLY_DYNASTIC_CUNEIFORMReady) { _EARLY_DYNASTIC_CUNEIFORMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "EARLY_DYNASTIC_CUNEIFORM"); _EARLY_DYNASTIC_CUNEIFORMReady = true; } return _EARLY_DYNASTIC_CUNEIFORMContent; } }
            private static Java.Lang.Character.UnicodeBlock _EARLY_DYNASTIC_CUNEIFORMContent = default;
            private static bool _EARLY_DYNASTIC_CUNEIFORMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#EGYPTIAN_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock EGYPTIAN_HIEROGLYPHS { get { if (!_EGYPTIAN_HIEROGLYPHSReady) { _EGYPTIAN_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "EGYPTIAN_HIEROGLYPHS"); _EGYPTIAN_HIEROGLYPHSReady = true; } return _EGYPTIAN_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _EGYPTIAN_HIEROGLYPHSContent = default;
            private static bool _EGYPTIAN_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ELBASAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ELBASAN { get { if (!_ELBASANReady) { _ELBASANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ELBASAN"); _ELBASANReady = true; } return _ELBASANContent; } }
            private static Java.Lang.Character.UnicodeBlock _ELBASANContent = default;
            private static bool _ELBASANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#EMOTICONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock EMOTICONS { get { if (!_EMOTICONSReady) { _EMOTICONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "EMOTICONS"); _EMOTICONSReady = true; } return _EMOTICONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _EMOTICONSContent = default;
            private static bool _EMOTICONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ENCLOSED_ALPHANUMERIC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ENCLOSED_ALPHANUMERIC_SUPPLEMENT { get { if (!_ENCLOSED_ALPHANUMERIC_SUPPLEMENTReady) { _ENCLOSED_ALPHANUMERIC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ENCLOSED_ALPHANUMERIC_SUPPLEMENT"); _ENCLOSED_ALPHANUMERIC_SUPPLEMENTReady = true; } return _ENCLOSED_ALPHANUMERIC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _ENCLOSED_ALPHANUMERIC_SUPPLEMENTContent = default;
            private static bool _ENCLOSED_ALPHANUMERIC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ENCLOSED_ALPHANUMERICS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ENCLOSED_ALPHANUMERICS { get { if (!_ENCLOSED_ALPHANUMERICSReady) { _ENCLOSED_ALPHANUMERICSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ENCLOSED_ALPHANUMERICS"); _ENCLOSED_ALPHANUMERICSReady = true; } return _ENCLOSED_ALPHANUMERICSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ENCLOSED_ALPHANUMERICSContent = default;
            private static bool _ENCLOSED_ALPHANUMERICSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ENCLOSED_CJK_LETTERS_AND_MONTHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS { get { if (!_ENCLOSED_CJK_LETTERS_AND_MONTHSReady) { _ENCLOSED_CJK_LETTERS_AND_MONTHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ENCLOSED_CJK_LETTERS_AND_MONTHS"); _ENCLOSED_CJK_LETTERS_AND_MONTHSReady = true; } return _ENCLOSED_CJK_LETTERS_AND_MONTHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ENCLOSED_CJK_LETTERS_AND_MONTHSContent = default;
            private static bool _ENCLOSED_CJK_LETTERS_AND_MONTHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ENCLOSED_IDEOGRAPHIC_SUPPLEMENT { get { if (!_ENCLOSED_IDEOGRAPHIC_SUPPLEMENTReady) { _ENCLOSED_IDEOGRAPHIC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"); _ENCLOSED_IDEOGRAPHIC_SUPPLEMENTReady = true; } return _ENCLOSED_IDEOGRAPHIC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _ENCLOSED_IDEOGRAPHIC_SUPPLEMENTContent = default;
            private static bool _ENCLOSED_IDEOGRAPHIC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ETHIOPIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ETHIOPIC { get { if (!_ETHIOPICReady) { _ETHIOPICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ETHIOPIC"); _ETHIOPICReady = true; } return _ETHIOPICContent; } }
            private static Java.Lang.Character.UnicodeBlock _ETHIOPICContent = default;
            private static bool _ETHIOPICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ETHIOPIC_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ETHIOPIC_EXTENDED { get { if (!_ETHIOPIC_EXTENDEDReady) { _ETHIOPIC_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ETHIOPIC_EXTENDED"); _ETHIOPIC_EXTENDEDReady = true; } return _ETHIOPIC_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _ETHIOPIC_EXTENDEDContent = default;
            private static bool _ETHIOPIC_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ETHIOPIC_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ETHIOPIC_EXTENDED_A { get { if (!_ETHIOPIC_EXTENDED_AReady) { _ETHIOPIC_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ETHIOPIC_EXTENDED_A"); _ETHIOPIC_EXTENDED_AReady = true; } return _ETHIOPIC_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _ETHIOPIC_EXTENDED_AContent = default;
            private static bool _ETHIOPIC_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ETHIOPIC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ETHIOPIC_SUPPLEMENT { get { if (!_ETHIOPIC_SUPPLEMENTReady) { _ETHIOPIC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ETHIOPIC_SUPPLEMENT"); _ETHIOPIC_SUPPLEMENTReady = true; } return _ETHIOPIC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _ETHIOPIC_SUPPLEMENTContent = default;
            private static bool _ETHIOPIC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GENERAL_PUNCTUATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GENERAL_PUNCTUATION { get { if (!_GENERAL_PUNCTUATIONReady) { _GENERAL_PUNCTUATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GENERAL_PUNCTUATION"); _GENERAL_PUNCTUATIONReady = true; } return _GENERAL_PUNCTUATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _GENERAL_PUNCTUATIONContent = default;
            private static bool _GENERAL_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GEOMETRIC_SHAPES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GEOMETRIC_SHAPES { get { if (!_GEOMETRIC_SHAPESReady) { _GEOMETRIC_SHAPESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GEOMETRIC_SHAPES"); _GEOMETRIC_SHAPESReady = true; } return _GEOMETRIC_SHAPESContent; } }
            private static Java.Lang.Character.UnicodeBlock _GEOMETRIC_SHAPESContent = default;
            private static bool _GEOMETRIC_SHAPESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GEOMETRIC_SHAPES_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GEOMETRIC_SHAPES_EXTENDED { get { if (!_GEOMETRIC_SHAPES_EXTENDEDReady) { _GEOMETRIC_SHAPES_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GEOMETRIC_SHAPES_EXTENDED"); _GEOMETRIC_SHAPES_EXTENDEDReady = true; } return _GEOMETRIC_SHAPES_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _GEOMETRIC_SHAPES_EXTENDEDContent = default;
            private static bool _GEOMETRIC_SHAPES_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GEORGIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GEORGIAN { get { if (!_GEORGIANReady) { _GEORGIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GEORGIAN"); _GEORGIANReady = true; } return _GEORGIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _GEORGIANContent = default;
            private static bool _GEORGIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GEORGIAN_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GEORGIAN_SUPPLEMENT { get { if (!_GEORGIAN_SUPPLEMENTReady) { _GEORGIAN_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GEORGIAN_SUPPLEMENT"); _GEORGIAN_SUPPLEMENTReady = true; } return _GEORGIAN_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _GEORGIAN_SUPPLEMENTContent = default;
            private static bool _GEORGIAN_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GLAGOLITIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GLAGOLITIC { get { if (!_GLAGOLITICReady) { _GLAGOLITICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GLAGOLITIC"); _GLAGOLITICReady = true; } return _GLAGOLITICContent; } }
            private static Java.Lang.Character.UnicodeBlock _GLAGOLITICContent = default;
            private static bool _GLAGOLITICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GLAGOLITIC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GLAGOLITIC_SUPPLEMENT { get { if (!_GLAGOLITIC_SUPPLEMENTReady) { _GLAGOLITIC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GLAGOLITIC_SUPPLEMENT"); _GLAGOLITIC_SUPPLEMENTReady = true; } return _GLAGOLITIC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _GLAGOLITIC_SUPPLEMENTContent = default;
            private static bool _GLAGOLITIC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GOTHIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GOTHIC { get { if (!_GOTHICReady) { _GOTHICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GOTHIC"); _GOTHICReady = true; } return _GOTHICContent; } }
            private static Java.Lang.Character.UnicodeBlock _GOTHICContent = default;
            private static bool _GOTHICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GRANTHA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GRANTHA { get { if (!_GRANTHAReady) { _GRANTHAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GRANTHA"); _GRANTHAReady = true; } return _GRANTHAContent; } }
            private static Java.Lang.Character.UnicodeBlock _GRANTHAContent = default;
            private static bool _GRANTHAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GREEK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GREEK { get { if (!_GREEKReady) { _GREEKContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GREEK"); _GREEKReady = true; } return _GREEKContent; } }
            private static Java.Lang.Character.UnicodeBlock _GREEKContent = default;
            private static bool _GREEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GREEK_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GREEK_EXTENDED { get { if (!_GREEK_EXTENDEDReady) { _GREEK_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GREEK_EXTENDED"); _GREEK_EXTENDEDReady = true; } return _GREEK_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _GREEK_EXTENDEDContent = default;
            private static bool _GREEK_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GUJARATI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GUJARATI { get { if (!_GUJARATIReady) { _GUJARATIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GUJARATI"); _GUJARATIReady = true; } return _GUJARATIContent; } }
            private static Java.Lang.Character.UnicodeBlock _GUJARATIContent = default;
            private static bool _GUJARATIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#GURMUKHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock GURMUKHI { get { if (!_GURMUKHIReady) { _GURMUKHIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "GURMUKHI"); _GURMUKHIReady = true; } return _GURMUKHIContent; } }
            private static Java.Lang.Character.UnicodeBlock _GURMUKHIContent = default;
            private static bool _GURMUKHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HALFWIDTH_AND_FULLWIDTH_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS { get { if (!_HALFWIDTH_AND_FULLWIDTH_FORMSReady) { _HALFWIDTH_AND_FULLWIDTH_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HALFWIDTH_AND_FULLWIDTH_FORMS"); _HALFWIDTH_AND_FULLWIDTH_FORMSReady = true; } return _HALFWIDTH_AND_FULLWIDTH_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _HALFWIDTH_AND_FULLWIDTH_FORMSContent = default;
            private static bool _HALFWIDTH_AND_FULLWIDTH_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANGUL_COMPATIBILITY_JAMO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANGUL_COMPATIBILITY_JAMO { get { if (!_HANGUL_COMPATIBILITY_JAMOReady) { _HANGUL_COMPATIBILITY_JAMOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANGUL_COMPATIBILITY_JAMO"); _HANGUL_COMPATIBILITY_JAMOReady = true; } return _HANGUL_COMPATIBILITY_JAMOContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANGUL_COMPATIBILITY_JAMOContent = default;
            private static bool _HANGUL_COMPATIBILITY_JAMOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANGUL_JAMO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANGUL_JAMO { get { if (!_HANGUL_JAMOReady) { _HANGUL_JAMOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANGUL_JAMO"); _HANGUL_JAMOReady = true; } return _HANGUL_JAMOContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANGUL_JAMOContent = default;
            private static bool _HANGUL_JAMOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANGUL_JAMO_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANGUL_JAMO_EXTENDED_A { get { if (!_HANGUL_JAMO_EXTENDED_AReady) { _HANGUL_JAMO_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANGUL_JAMO_EXTENDED_A"); _HANGUL_JAMO_EXTENDED_AReady = true; } return _HANGUL_JAMO_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANGUL_JAMO_EXTENDED_AContent = default;
            private static bool _HANGUL_JAMO_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANGUL_JAMO_EXTENDED_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANGUL_JAMO_EXTENDED_B { get { if (!_HANGUL_JAMO_EXTENDED_BReady) { _HANGUL_JAMO_EXTENDED_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANGUL_JAMO_EXTENDED_B"); _HANGUL_JAMO_EXTENDED_BReady = true; } return _HANGUL_JAMO_EXTENDED_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANGUL_JAMO_EXTENDED_BContent = default;
            private static bool _HANGUL_JAMO_EXTENDED_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANGUL_SYLLABLES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANGUL_SYLLABLES { get { if (!_HANGUL_SYLLABLESReady) { _HANGUL_SYLLABLESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANGUL_SYLLABLES"); _HANGUL_SYLLABLESReady = true; } return _HANGUL_SYLLABLESContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANGUL_SYLLABLESContent = default;
            private static bool _HANGUL_SYLLABLESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HANUNOO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HANUNOO { get { if (!_HANUNOOReady) { _HANUNOOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HANUNOO"); _HANUNOOReady = true; } return _HANUNOOContent; } }
            private static Java.Lang.Character.UnicodeBlock _HANUNOOContent = default;
            private static bool _HANUNOOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HATRAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HATRAN { get { if (!_HATRANReady) { _HATRANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HATRAN"); _HATRANReady = true; } return _HATRANContent; } }
            private static Java.Lang.Character.UnicodeBlock _HATRANContent = default;
            private static bool _HATRANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HEBREW"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HEBREW { get { if (!_HEBREWReady) { _HEBREWContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HEBREW"); _HEBREWReady = true; } return _HEBREWContent; } }
            private static Java.Lang.Character.UnicodeBlock _HEBREWContent = default;
            private static bool _HEBREWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HIGH_PRIVATE_USE_SURROGATES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HIGH_PRIVATE_USE_SURROGATES { get { if (!_HIGH_PRIVATE_USE_SURROGATESReady) { _HIGH_PRIVATE_USE_SURROGATESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HIGH_PRIVATE_USE_SURROGATES"); _HIGH_PRIVATE_USE_SURROGATESReady = true; } return _HIGH_PRIVATE_USE_SURROGATESContent; } }
            private static Java.Lang.Character.UnicodeBlock _HIGH_PRIVATE_USE_SURROGATESContent = default;
            private static bool _HIGH_PRIVATE_USE_SURROGATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HIGH_SURROGATES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HIGH_SURROGATES { get { if (!_HIGH_SURROGATESReady) { _HIGH_SURROGATESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HIGH_SURROGATES"); _HIGH_SURROGATESReady = true; } return _HIGH_SURROGATESContent; } }
            private static Java.Lang.Character.UnicodeBlock _HIGH_SURROGATESContent = default;
            private static bool _HIGH_SURROGATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#HIRAGANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock HIRAGANA { get { if (!_HIRAGANAReady) { _HIRAGANAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "HIRAGANA"); _HIRAGANAReady = true; } return _HIRAGANAContent; } }
            private static Java.Lang.Character.UnicodeBlock _HIRAGANAContent = default;
            private static bool _HIRAGANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#IDEOGRAPHIC_DESCRIPTION_CHARACTERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS { get { if (!_IDEOGRAPHIC_DESCRIPTION_CHARACTERSReady) { _IDEOGRAPHIC_DESCRIPTION_CHARACTERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "IDEOGRAPHIC_DESCRIPTION_CHARACTERS"); _IDEOGRAPHIC_DESCRIPTION_CHARACTERSReady = true; } return _IDEOGRAPHIC_DESCRIPTION_CHARACTERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _IDEOGRAPHIC_DESCRIPTION_CHARACTERSContent = default;
            private static bool _IDEOGRAPHIC_DESCRIPTION_CHARACTERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION { get { if (!_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONReady) { _IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION"); _IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONReady = true; } return _IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONContent = default;
            private static bool _IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#IMPERIAL_ARAMAIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock IMPERIAL_ARAMAIC { get { if (!_IMPERIAL_ARAMAICReady) { _IMPERIAL_ARAMAICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "IMPERIAL_ARAMAIC"); _IMPERIAL_ARAMAICReady = true; } return _IMPERIAL_ARAMAICContent; } }
            private static Java.Lang.Character.UnicodeBlock _IMPERIAL_ARAMAICContent = default;
            private static bool _IMPERIAL_ARAMAICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#INSCRIPTIONAL_PAHLAVI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock INSCRIPTIONAL_PAHLAVI { get { if (!_INSCRIPTIONAL_PAHLAVIReady) { _INSCRIPTIONAL_PAHLAVIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "INSCRIPTIONAL_PAHLAVI"); _INSCRIPTIONAL_PAHLAVIReady = true; } return _INSCRIPTIONAL_PAHLAVIContent; } }
            private static Java.Lang.Character.UnicodeBlock _INSCRIPTIONAL_PAHLAVIContent = default;
            private static bool _INSCRIPTIONAL_PAHLAVIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#INSCRIPTIONAL_PARTHIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock INSCRIPTIONAL_PARTHIAN { get { if (!_INSCRIPTIONAL_PARTHIANReady) { _INSCRIPTIONAL_PARTHIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "INSCRIPTIONAL_PARTHIAN"); _INSCRIPTIONAL_PARTHIANReady = true; } return _INSCRIPTIONAL_PARTHIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _INSCRIPTIONAL_PARTHIANContent = default;
            private static bool _INSCRIPTIONAL_PARTHIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#IPA_EXTENSIONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock IPA_EXTENSIONS { get { if (!_IPA_EXTENSIONSReady) { _IPA_EXTENSIONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "IPA_EXTENSIONS"); _IPA_EXTENSIONSReady = true; } return _IPA_EXTENSIONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _IPA_EXTENSIONSContent = default;
            private static bool _IPA_EXTENSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#JAVANESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock JAVANESE { get { if (!_JAVANESEReady) { _JAVANESEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "JAVANESE"); _JAVANESEReady = true; } return _JAVANESEContent; } }
            private static Java.Lang.Character.UnicodeBlock _JAVANESEContent = default;
            private static bool _JAVANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KAITHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KAITHI { get { if (!_KAITHIReady) { _KAITHIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KAITHI"); _KAITHIReady = true; } return _KAITHIContent; } }
            private static Java.Lang.Character.UnicodeBlock _KAITHIContent = default;
            private static bool _KAITHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KANA_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KANA_EXTENDED_A { get { if (!_KANA_EXTENDED_AReady) { _KANA_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KANA_EXTENDED_A"); _KANA_EXTENDED_AReady = true; } return _KANA_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _KANA_EXTENDED_AContent = default;
            private static bool _KANA_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KANA_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KANA_SUPPLEMENT { get { if (!_KANA_SUPPLEMENTReady) { _KANA_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KANA_SUPPLEMENT"); _KANA_SUPPLEMENTReady = true; } return _KANA_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _KANA_SUPPLEMENTContent = default;
            private static bool _KANA_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KANBUN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KANBUN { get { if (!_KANBUNReady) { _KANBUNContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KANBUN"); _KANBUNReady = true; } return _KANBUNContent; } }
            private static Java.Lang.Character.UnicodeBlock _KANBUNContent = default;
            private static bool _KANBUNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KANGXI_RADICALS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KANGXI_RADICALS { get { if (!_KANGXI_RADICALSReady) { _KANGXI_RADICALSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KANGXI_RADICALS"); _KANGXI_RADICALSReady = true; } return _KANGXI_RADICALSContent; } }
            private static Java.Lang.Character.UnicodeBlock _KANGXI_RADICALSContent = default;
            private static bool _KANGXI_RADICALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KANNADA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KANNADA { get { if (!_KANNADAReady) { _KANNADAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KANNADA"); _KANNADAReady = true; } return _KANNADAContent; } }
            private static Java.Lang.Character.UnicodeBlock _KANNADAContent = default;
            private static bool _KANNADAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KATAKANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KATAKANA { get { if (!_KATAKANAReady) { _KATAKANAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KATAKANA"); _KATAKANAReady = true; } return _KATAKANAContent; } }
            private static Java.Lang.Character.UnicodeBlock _KATAKANAContent = default;
            private static bool _KATAKANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KATAKANA_PHONETIC_EXTENSIONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KATAKANA_PHONETIC_EXTENSIONS { get { if (!_KATAKANA_PHONETIC_EXTENSIONSReady) { _KATAKANA_PHONETIC_EXTENSIONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KATAKANA_PHONETIC_EXTENSIONS"); _KATAKANA_PHONETIC_EXTENSIONSReady = true; } return _KATAKANA_PHONETIC_EXTENSIONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _KATAKANA_PHONETIC_EXTENSIONSContent = default;
            private static bool _KATAKANA_PHONETIC_EXTENSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KAYAH_LI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KAYAH_LI { get { if (!_KAYAH_LIReady) { _KAYAH_LIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KAYAH_LI"); _KAYAH_LIReady = true; } return _KAYAH_LIContent; } }
            private static Java.Lang.Character.UnicodeBlock _KAYAH_LIContent = default;
            private static bool _KAYAH_LIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KHAROSHTHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KHAROSHTHI { get { if (!_KHAROSHTHIReady) { _KHAROSHTHIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KHAROSHTHI"); _KHAROSHTHIReady = true; } return _KHAROSHTHIContent; } }
            private static Java.Lang.Character.UnicodeBlock _KHAROSHTHIContent = default;
            private static bool _KHAROSHTHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KHMER"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KHMER { get { if (!_KHMERReady) { _KHMERContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KHMER"); _KHMERReady = true; } return _KHMERContent; } }
            private static Java.Lang.Character.UnicodeBlock _KHMERContent = default;
            private static bool _KHMERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KHMER_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KHMER_SYMBOLS { get { if (!_KHMER_SYMBOLSReady) { _KHMER_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KHMER_SYMBOLS"); _KHMER_SYMBOLSReady = true; } return _KHMER_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _KHMER_SYMBOLSContent = default;
            private static bool _KHMER_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KHOJKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KHOJKI { get { if (!_KHOJKIReady) { _KHOJKIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KHOJKI"); _KHOJKIReady = true; } return _KHOJKIContent; } }
            private static Java.Lang.Character.UnicodeBlock _KHOJKIContent = default;
            private static bool _KHOJKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#KHUDAWADI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock KHUDAWADI { get { if (!_KHUDAWADIReady) { _KHUDAWADIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "KHUDAWADI"); _KHUDAWADIReady = true; } return _KHUDAWADIContent; } }
            private static Java.Lang.Character.UnicodeBlock _KHUDAWADIContent = default;
            private static bool _KHUDAWADIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LAO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LAO { get { if (!_LAOReady) { _LAOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LAO"); _LAOReady = true; } return _LAOContent; } }
            private static Java.Lang.Character.UnicodeBlock _LAOContent = default;
            private static bool _LAOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_1_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_1_SUPPLEMENT { get { if (!_LATIN_1_SUPPLEMENTReady) { _LATIN_1_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_1_SUPPLEMENT"); _LATIN_1_SUPPLEMENTReady = true; } return _LATIN_1_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_1_SUPPLEMENTContent = default;
            private static bool _LATIN_1_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_A { get { if (!_LATIN_EXTENDED_AReady) { _LATIN_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_A"); _LATIN_EXTENDED_AReady = true; } return _LATIN_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_AContent = default;
            private static bool _LATIN_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_ADDITIONAL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_ADDITIONAL { get { if (!_LATIN_EXTENDED_ADDITIONALReady) { _LATIN_EXTENDED_ADDITIONALContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_ADDITIONAL"); _LATIN_EXTENDED_ADDITIONALReady = true; } return _LATIN_EXTENDED_ADDITIONALContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_ADDITIONALContent = default;
            private static bool _LATIN_EXTENDED_ADDITIONALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_B { get { if (!_LATIN_EXTENDED_BReady) { _LATIN_EXTENDED_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_B"); _LATIN_EXTENDED_BReady = true; } return _LATIN_EXTENDED_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_BContent = default;
            private static bool _LATIN_EXTENDED_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_C"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_C { get { if (!_LATIN_EXTENDED_CReady) { _LATIN_EXTENDED_CContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_C"); _LATIN_EXTENDED_CReady = true; } return _LATIN_EXTENDED_CContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_CContent = default;
            private static bool _LATIN_EXTENDED_CReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_D"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_D { get { if (!_LATIN_EXTENDED_DReady) { _LATIN_EXTENDED_DContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_D"); _LATIN_EXTENDED_DReady = true; } return _LATIN_EXTENDED_DContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_DContent = default;
            private static bool _LATIN_EXTENDED_DReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LATIN_EXTENDED_E"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LATIN_EXTENDED_E { get { if (!_LATIN_EXTENDED_EReady) { _LATIN_EXTENDED_EContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LATIN_EXTENDED_E"); _LATIN_EXTENDED_EReady = true; } return _LATIN_EXTENDED_EContent; } }
            private static Java.Lang.Character.UnicodeBlock _LATIN_EXTENDED_EContent = default;
            private static bool _LATIN_EXTENDED_EReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LEPCHA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LEPCHA { get { if (!_LEPCHAReady) { _LEPCHAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LEPCHA"); _LEPCHAReady = true; } return _LEPCHAContent; } }
            private static Java.Lang.Character.UnicodeBlock _LEPCHAContent = default;
            private static bool _LEPCHAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LETTERLIKE_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LETTERLIKE_SYMBOLS { get { if (!_LETTERLIKE_SYMBOLSReady) { _LETTERLIKE_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LETTERLIKE_SYMBOLS"); _LETTERLIKE_SYMBOLSReady = true; } return _LETTERLIKE_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _LETTERLIKE_SYMBOLSContent = default;
            private static bool _LETTERLIKE_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LIMBU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LIMBU { get { if (!_LIMBUReady) { _LIMBUContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LIMBU"); _LIMBUReady = true; } return _LIMBUContent; } }
            private static Java.Lang.Character.UnicodeBlock _LIMBUContent = default;
            private static bool _LIMBUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LINEAR_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LINEAR_A { get { if (!_LINEAR_AReady) { _LINEAR_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LINEAR_A"); _LINEAR_AReady = true; } return _LINEAR_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _LINEAR_AContent = default;
            private static bool _LINEAR_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LINEAR_B_IDEOGRAMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LINEAR_B_IDEOGRAMS { get { if (!_LINEAR_B_IDEOGRAMSReady) { _LINEAR_B_IDEOGRAMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LINEAR_B_IDEOGRAMS"); _LINEAR_B_IDEOGRAMSReady = true; } return _LINEAR_B_IDEOGRAMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _LINEAR_B_IDEOGRAMSContent = default;
            private static bool _LINEAR_B_IDEOGRAMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LINEAR_B_SYLLABARY"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LINEAR_B_SYLLABARY { get { if (!_LINEAR_B_SYLLABARYReady) { _LINEAR_B_SYLLABARYContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LINEAR_B_SYLLABARY"); _LINEAR_B_SYLLABARYReady = true; } return _LINEAR_B_SYLLABARYContent; } }
            private static Java.Lang.Character.UnicodeBlock _LINEAR_B_SYLLABARYContent = default;
            private static bool _LINEAR_B_SYLLABARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LISU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LISU { get { if (!_LISUReady) { _LISUContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LISU"); _LISUReady = true; } return _LISUContent; } }
            private static Java.Lang.Character.UnicodeBlock _LISUContent = default;
            private static bool _LISUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LOW_SURROGATES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LOW_SURROGATES { get { if (!_LOW_SURROGATESReady) { _LOW_SURROGATESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LOW_SURROGATES"); _LOW_SURROGATESReady = true; } return _LOW_SURROGATESContent; } }
            private static Java.Lang.Character.UnicodeBlock _LOW_SURROGATESContent = default;
            private static bool _LOW_SURROGATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LYCIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LYCIAN { get { if (!_LYCIANReady) { _LYCIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LYCIAN"); _LYCIANReady = true; } return _LYCIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _LYCIANContent = default;
            private static bool _LYCIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#LYDIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock LYDIAN { get { if (!_LYDIANReady) { _LYDIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "LYDIAN"); _LYDIANReady = true; } return _LYDIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _LYDIANContent = default;
            private static bool _LYDIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MAHAJANI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MAHAJANI { get { if (!_MAHAJANIReady) { _MAHAJANIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MAHAJANI"); _MAHAJANIReady = true; } return _MAHAJANIContent; } }
            private static Java.Lang.Character.UnicodeBlock _MAHAJANIContent = default;
            private static bool _MAHAJANIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MAHJONG_TILES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MAHJONG_TILES { get { if (!_MAHJONG_TILESReady) { _MAHJONG_TILESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MAHJONG_TILES"); _MAHJONG_TILESReady = true; } return _MAHJONG_TILESContent; } }
            private static Java.Lang.Character.UnicodeBlock _MAHJONG_TILESContent = default;
            private static bool _MAHJONG_TILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MALAYALAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MALAYALAM { get { if (!_MALAYALAMReady) { _MALAYALAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MALAYALAM"); _MALAYALAMReady = true; } return _MALAYALAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _MALAYALAMContent = default;
            private static bool _MALAYALAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MANDAIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MANDAIC { get { if (!_MANDAICReady) { _MANDAICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MANDAIC"); _MANDAICReady = true; } return _MANDAICContent; } }
            private static Java.Lang.Character.UnicodeBlock _MANDAICContent = default;
            private static bool _MANDAICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MANICHAEAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MANICHAEAN { get { if (!_MANICHAEANReady) { _MANICHAEANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MANICHAEAN"); _MANICHAEANReady = true; } return _MANICHAEANContent; } }
            private static Java.Lang.Character.UnicodeBlock _MANICHAEANContent = default;
            private static bool _MANICHAEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MARCHEN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MARCHEN { get { if (!_MARCHENReady) { _MARCHENContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MARCHEN"); _MARCHENReady = true; } return _MARCHENContent; } }
            private static Java.Lang.Character.UnicodeBlock _MARCHENContent = default;
            private static bool _MARCHENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MASARAM_GONDI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MASARAM_GONDI { get { if (!_MASARAM_GONDIReady) { _MASARAM_GONDIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MASARAM_GONDI"); _MASARAM_GONDIReady = true; } return _MASARAM_GONDIContent; } }
            private static Java.Lang.Character.UnicodeBlock _MASARAM_GONDIContent = default;
            private static bool _MASARAM_GONDIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MATHEMATICAL_ALPHANUMERIC_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MATHEMATICAL_ALPHANUMERIC_SYMBOLS { get { if (!_MATHEMATICAL_ALPHANUMERIC_SYMBOLSReady) { _MATHEMATICAL_ALPHANUMERIC_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MATHEMATICAL_ALPHANUMERIC_SYMBOLS"); _MATHEMATICAL_ALPHANUMERIC_SYMBOLSReady = true; } return _MATHEMATICAL_ALPHANUMERIC_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MATHEMATICAL_ALPHANUMERIC_SYMBOLSContent = default;
            private static bool _MATHEMATICAL_ALPHANUMERIC_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MATHEMATICAL_OPERATORS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MATHEMATICAL_OPERATORS { get { if (!_MATHEMATICAL_OPERATORSReady) { _MATHEMATICAL_OPERATORSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MATHEMATICAL_OPERATORS"); _MATHEMATICAL_OPERATORSReady = true; } return _MATHEMATICAL_OPERATORSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MATHEMATICAL_OPERATORSContent = default;
            private static bool _MATHEMATICAL_OPERATORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MEETEI_MAYEK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MEETEI_MAYEK { get { if (!_MEETEI_MAYEKReady) { _MEETEI_MAYEKContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MEETEI_MAYEK"); _MEETEI_MAYEKReady = true; } return _MEETEI_MAYEKContent; } }
            private static Java.Lang.Character.UnicodeBlock _MEETEI_MAYEKContent = default;
            private static bool _MEETEI_MAYEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MEETEI_MAYEK_EXTENSIONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MEETEI_MAYEK_EXTENSIONS { get { if (!_MEETEI_MAYEK_EXTENSIONSReady) { _MEETEI_MAYEK_EXTENSIONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MEETEI_MAYEK_EXTENSIONS"); _MEETEI_MAYEK_EXTENSIONSReady = true; } return _MEETEI_MAYEK_EXTENSIONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MEETEI_MAYEK_EXTENSIONSContent = default;
            private static bool _MEETEI_MAYEK_EXTENSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MENDE_KIKAKUI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MENDE_KIKAKUI { get { if (!_MENDE_KIKAKUIReady) { _MENDE_KIKAKUIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MENDE_KIKAKUI"); _MENDE_KIKAKUIReady = true; } return _MENDE_KIKAKUIContent; } }
            private static Java.Lang.Character.UnicodeBlock _MENDE_KIKAKUIContent = default;
            private static bool _MENDE_KIKAKUIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MEROITIC_CURSIVE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MEROITIC_CURSIVE { get { if (!_MEROITIC_CURSIVEReady) { _MEROITIC_CURSIVEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MEROITIC_CURSIVE"); _MEROITIC_CURSIVEReady = true; } return _MEROITIC_CURSIVEContent; } }
            private static Java.Lang.Character.UnicodeBlock _MEROITIC_CURSIVEContent = default;
            private static bool _MEROITIC_CURSIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MEROITIC_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MEROITIC_HIEROGLYPHS { get { if (!_MEROITIC_HIEROGLYPHSReady) { _MEROITIC_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MEROITIC_HIEROGLYPHS"); _MEROITIC_HIEROGLYPHSReady = true; } return _MEROITIC_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MEROITIC_HIEROGLYPHSContent = default;
            private static bool _MEROITIC_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MIAO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MIAO { get { if (!_MIAOReady) { _MIAOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MIAO"); _MIAOReady = true; } return _MIAOContent; } }
            private static Java.Lang.Character.UnicodeBlock _MIAOContent = default;
            private static bool _MIAOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A { get { if (!_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AReady) { _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"); _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AReady = true; } return _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AContent = default;
            private static bool _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B { get { if (!_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BReady) { _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"); _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BReady = true; } return _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BContent = default;
            private static bool _MISCELLANEOUS_MATHEMATICAL_SYMBOLS_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS { get { if (!_MISCELLANEOUS_SYMBOLSReady) { _MISCELLANEOUS_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_SYMBOLS"); _MISCELLANEOUS_SYMBOLSReady = true; } return _MISCELLANEOUS_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_SYMBOLSContent = default;
            private static bool _MISCELLANEOUS_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_SYMBOLS_AND_ARROWS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_ARROWS { get { if (!_MISCELLANEOUS_SYMBOLS_AND_ARROWSReady) { _MISCELLANEOUS_SYMBOLS_AND_ARROWSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_SYMBOLS_AND_ARROWS"); _MISCELLANEOUS_SYMBOLS_AND_ARROWSReady = true; } return _MISCELLANEOUS_SYMBOLS_AND_ARROWSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_SYMBOLS_AND_ARROWSContent = default;
            private static bool _MISCELLANEOUS_SYMBOLS_AND_ARROWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS { get { if (!_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSReady) { _MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"); _MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSReady = true; } return _MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSContent = default;
            private static bool _MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MISCELLANEOUS_TECHNICAL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MISCELLANEOUS_TECHNICAL { get { if (!_MISCELLANEOUS_TECHNICALReady) { _MISCELLANEOUS_TECHNICALContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MISCELLANEOUS_TECHNICAL"); _MISCELLANEOUS_TECHNICALReady = true; } return _MISCELLANEOUS_TECHNICALContent; } }
            private static Java.Lang.Character.UnicodeBlock _MISCELLANEOUS_TECHNICALContent = default;
            private static bool _MISCELLANEOUS_TECHNICALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MODI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MODI { get { if (!_MODIReady) { _MODIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MODI"); _MODIReady = true; } return _MODIContent; } }
            private static Java.Lang.Character.UnicodeBlock _MODIContent = default;
            private static bool _MODIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MODIFIER_TONE_LETTERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MODIFIER_TONE_LETTERS { get { if (!_MODIFIER_TONE_LETTERSReady) { _MODIFIER_TONE_LETTERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MODIFIER_TONE_LETTERS"); _MODIFIER_TONE_LETTERSReady = true; } return _MODIFIER_TONE_LETTERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MODIFIER_TONE_LETTERSContent = default;
            private static bool _MODIFIER_TONE_LETTERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MONGOLIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MONGOLIAN { get { if (!_MONGOLIANReady) { _MONGOLIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MONGOLIAN"); _MONGOLIANReady = true; } return _MONGOLIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _MONGOLIANContent = default;
            private static bool _MONGOLIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MONGOLIAN_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MONGOLIAN_SUPPLEMENT { get { if (!_MONGOLIAN_SUPPLEMENTReady) { _MONGOLIAN_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MONGOLIAN_SUPPLEMENT"); _MONGOLIAN_SUPPLEMENTReady = true; } return _MONGOLIAN_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _MONGOLIAN_SUPPLEMENTContent = default;
            private static bool _MONGOLIAN_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MRO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MRO { get { if (!_MROReady) { _MROContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MRO"); _MROReady = true; } return _MROContent; } }
            private static Java.Lang.Character.UnicodeBlock _MROContent = default;
            private static bool _MROReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MULTANI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MULTANI { get { if (!_MULTANIReady) { _MULTANIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MULTANI"); _MULTANIReady = true; } return _MULTANIContent; } }
            private static Java.Lang.Character.UnicodeBlock _MULTANIContent = default;
            private static bool _MULTANIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MUSICAL_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MUSICAL_SYMBOLS { get { if (!_MUSICAL_SYMBOLSReady) { _MUSICAL_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MUSICAL_SYMBOLS"); _MUSICAL_SYMBOLSReady = true; } return _MUSICAL_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _MUSICAL_SYMBOLSContent = default;
            private static bool _MUSICAL_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MYANMAR"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MYANMAR { get { if (!_MYANMARReady) { _MYANMARContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MYANMAR"); _MYANMARReady = true; } return _MYANMARContent; } }
            private static Java.Lang.Character.UnicodeBlock _MYANMARContent = default;
            private static bool _MYANMARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MYANMAR_EXTENDED_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MYANMAR_EXTENDED_A { get { if (!_MYANMAR_EXTENDED_AReady) { _MYANMAR_EXTENDED_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MYANMAR_EXTENDED_A"); _MYANMAR_EXTENDED_AReady = true; } return _MYANMAR_EXTENDED_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _MYANMAR_EXTENDED_AContent = default;
            private static bool _MYANMAR_EXTENDED_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#MYANMAR_EXTENDED_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock MYANMAR_EXTENDED_B { get { if (!_MYANMAR_EXTENDED_BReady) { _MYANMAR_EXTENDED_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "MYANMAR_EXTENDED_B"); _MYANMAR_EXTENDED_BReady = true; } return _MYANMAR_EXTENDED_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _MYANMAR_EXTENDED_BContent = default;
            private static bool _MYANMAR_EXTENDED_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NABATAEAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NABATAEAN { get { if (!_NABATAEANReady) { _NABATAEANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NABATAEAN"); _NABATAEANReady = true; } return _NABATAEANContent; } }
            private static Java.Lang.Character.UnicodeBlock _NABATAEANContent = default;
            private static bool _NABATAEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NEW_TAI_LUE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NEW_TAI_LUE { get { if (!_NEW_TAI_LUEReady) { _NEW_TAI_LUEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NEW_TAI_LUE"); _NEW_TAI_LUEReady = true; } return _NEW_TAI_LUEContent; } }
            private static Java.Lang.Character.UnicodeBlock _NEW_TAI_LUEContent = default;
            private static bool _NEW_TAI_LUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NEWA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NEWA { get { if (!_NEWAReady) { _NEWAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NEWA"); _NEWAReady = true; } return _NEWAContent; } }
            private static Java.Lang.Character.UnicodeBlock _NEWAContent = default;
            private static bool _NEWAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NKO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NKO { get { if (!_NKOReady) { _NKOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NKO"); _NKOReady = true; } return _NKOContent; } }
            private static Java.Lang.Character.UnicodeBlock _NKOContent = default;
            private static bool _NKOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NUMBER_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NUMBER_FORMS { get { if (!_NUMBER_FORMSReady) { _NUMBER_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NUMBER_FORMS"); _NUMBER_FORMSReady = true; } return _NUMBER_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _NUMBER_FORMSContent = default;
            private static bool _NUMBER_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#NUSHU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock NUSHU { get { if (!_NUSHUReady) { _NUSHUContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "NUSHU"); _NUSHUReady = true; } return _NUSHUContent; } }
            private static Java.Lang.Character.UnicodeBlock _NUSHUContent = default;
            private static bool _NUSHUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OGHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OGHAM { get { if (!_OGHAMReady) { _OGHAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OGHAM"); _OGHAMReady = true; } return _OGHAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _OGHAMContent = default;
            private static bool _OGHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OL_CHIKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OL_CHIKI { get { if (!_OL_CHIKIReady) { _OL_CHIKIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OL_CHIKI"); _OL_CHIKIReady = true; } return _OL_CHIKIContent; } }
            private static Java.Lang.Character.UnicodeBlock _OL_CHIKIContent = default;
            private static bool _OL_CHIKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_HUNGARIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_HUNGARIAN { get { if (!_OLD_HUNGARIANReady) { _OLD_HUNGARIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_HUNGARIAN"); _OLD_HUNGARIANReady = true; } return _OLD_HUNGARIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_HUNGARIANContent = default;
            private static bool _OLD_HUNGARIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_ITALIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_ITALIC { get { if (!_OLD_ITALICReady) { _OLD_ITALICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_ITALIC"); _OLD_ITALICReady = true; } return _OLD_ITALICContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_ITALICContent = default;
            private static bool _OLD_ITALICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_NORTH_ARABIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_NORTH_ARABIAN { get { if (!_OLD_NORTH_ARABIANReady) { _OLD_NORTH_ARABIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_NORTH_ARABIAN"); _OLD_NORTH_ARABIANReady = true; } return _OLD_NORTH_ARABIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_NORTH_ARABIANContent = default;
            private static bool _OLD_NORTH_ARABIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_PERMIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_PERMIC { get { if (!_OLD_PERMICReady) { _OLD_PERMICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_PERMIC"); _OLD_PERMICReady = true; } return _OLD_PERMICContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_PERMICContent = default;
            private static bool _OLD_PERMICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_PERSIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_PERSIAN { get { if (!_OLD_PERSIANReady) { _OLD_PERSIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_PERSIAN"); _OLD_PERSIANReady = true; } return _OLD_PERSIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_PERSIANContent = default;
            private static bool _OLD_PERSIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_SOUTH_ARABIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_SOUTH_ARABIAN { get { if (!_OLD_SOUTH_ARABIANReady) { _OLD_SOUTH_ARABIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_SOUTH_ARABIAN"); _OLD_SOUTH_ARABIANReady = true; } return _OLD_SOUTH_ARABIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_SOUTH_ARABIANContent = default;
            private static bool _OLD_SOUTH_ARABIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OLD_TURKIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OLD_TURKIC { get { if (!_OLD_TURKICReady) { _OLD_TURKICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OLD_TURKIC"); _OLD_TURKICReady = true; } return _OLD_TURKICContent; } }
            private static Java.Lang.Character.UnicodeBlock _OLD_TURKICContent = default;
            private static bool _OLD_TURKICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OPTICAL_CHARACTER_RECOGNITION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OPTICAL_CHARACTER_RECOGNITION { get { if (!_OPTICAL_CHARACTER_RECOGNITIONReady) { _OPTICAL_CHARACTER_RECOGNITIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OPTICAL_CHARACTER_RECOGNITION"); _OPTICAL_CHARACTER_RECOGNITIONReady = true; } return _OPTICAL_CHARACTER_RECOGNITIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _OPTICAL_CHARACTER_RECOGNITIONContent = default;
            private static bool _OPTICAL_CHARACTER_RECOGNITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ORIYA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ORIYA { get { if (!_ORIYAReady) { _ORIYAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ORIYA"); _ORIYAReady = true; } return _ORIYAContent; } }
            private static Java.Lang.Character.UnicodeBlock _ORIYAContent = default;
            private static bool _ORIYAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ORNAMENTAL_DINGBATS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ORNAMENTAL_DINGBATS { get { if (!_ORNAMENTAL_DINGBATSReady) { _ORNAMENTAL_DINGBATSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ORNAMENTAL_DINGBATS"); _ORNAMENTAL_DINGBATSReady = true; } return _ORNAMENTAL_DINGBATSContent; } }
            private static Java.Lang.Character.UnicodeBlock _ORNAMENTAL_DINGBATSContent = default;
            private static bool _ORNAMENTAL_DINGBATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OSAGE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OSAGE { get { if (!_OSAGEReady) { _OSAGEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OSAGE"); _OSAGEReady = true; } return _OSAGEContent; } }
            private static Java.Lang.Character.UnicodeBlock _OSAGEContent = default;
            private static bool _OSAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#OSMANYA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock OSMANYA { get { if (!_OSMANYAReady) { _OSMANYAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "OSMANYA"); _OSMANYAReady = true; } return _OSMANYAContent; } }
            private static Java.Lang.Character.UnicodeBlock _OSMANYAContent = default;
            private static bool _OSMANYAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PAHAWH_HMONG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PAHAWH_HMONG { get { if (!_PAHAWH_HMONGReady) { _PAHAWH_HMONGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PAHAWH_HMONG"); _PAHAWH_HMONGReady = true; } return _PAHAWH_HMONGContent; } }
            private static Java.Lang.Character.UnicodeBlock _PAHAWH_HMONGContent = default;
            private static bool _PAHAWH_HMONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PALMYRENE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PALMYRENE { get { if (!_PALMYRENEReady) { _PALMYRENEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PALMYRENE"); _PALMYRENEReady = true; } return _PALMYRENEContent; } }
            private static Java.Lang.Character.UnicodeBlock _PALMYRENEContent = default;
            private static bool _PALMYRENEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PAU_CIN_HAU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PAU_CIN_HAU { get { if (!_PAU_CIN_HAUReady) { _PAU_CIN_HAUContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PAU_CIN_HAU"); _PAU_CIN_HAUReady = true; } return _PAU_CIN_HAUContent; } }
            private static Java.Lang.Character.UnicodeBlock _PAU_CIN_HAUContent = default;
            private static bool _PAU_CIN_HAUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PHAGS_PA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PHAGS_PA { get { if (!_PHAGS_PAReady) { _PHAGS_PAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PHAGS_PA"); _PHAGS_PAReady = true; } return _PHAGS_PAContent; } }
            private static Java.Lang.Character.UnicodeBlock _PHAGS_PAContent = default;
            private static bool _PHAGS_PAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PHAISTOS_DISC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PHAISTOS_DISC { get { if (!_PHAISTOS_DISCReady) { _PHAISTOS_DISCContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PHAISTOS_DISC"); _PHAISTOS_DISCReady = true; } return _PHAISTOS_DISCContent; } }
            private static Java.Lang.Character.UnicodeBlock _PHAISTOS_DISCContent = default;
            private static bool _PHAISTOS_DISCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PHOENICIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PHOENICIAN { get { if (!_PHOENICIANReady) { _PHOENICIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PHOENICIAN"); _PHOENICIANReady = true; } return _PHOENICIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _PHOENICIANContent = default;
            private static bool _PHOENICIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PHONETIC_EXTENSIONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PHONETIC_EXTENSIONS { get { if (!_PHONETIC_EXTENSIONSReady) { _PHONETIC_EXTENSIONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PHONETIC_EXTENSIONS"); _PHONETIC_EXTENSIONSReady = true; } return _PHONETIC_EXTENSIONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _PHONETIC_EXTENSIONSContent = default;
            private static bool _PHONETIC_EXTENSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PHONETIC_EXTENSIONS_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PHONETIC_EXTENSIONS_SUPPLEMENT { get { if (!_PHONETIC_EXTENSIONS_SUPPLEMENTReady) { _PHONETIC_EXTENSIONS_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PHONETIC_EXTENSIONS_SUPPLEMENT"); _PHONETIC_EXTENSIONS_SUPPLEMENTReady = true; } return _PHONETIC_EXTENSIONS_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _PHONETIC_EXTENSIONS_SUPPLEMENTContent = default;
            private static bool _PHONETIC_EXTENSIONS_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PLAYING_CARDS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PLAYING_CARDS { get { if (!_PLAYING_CARDSReady) { _PLAYING_CARDSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PLAYING_CARDS"); _PLAYING_CARDSReady = true; } return _PLAYING_CARDSContent; } }
            private static Java.Lang.Character.UnicodeBlock _PLAYING_CARDSContent = default;
            private static bool _PLAYING_CARDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PRIVATE_USE_AREA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PRIVATE_USE_AREA { get { if (!_PRIVATE_USE_AREAReady) { _PRIVATE_USE_AREAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PRIVATE_USE_AREA"); _PRIVATE_USE_AREAReady = true; } return _PRIVATE_USE_AREAContent; } }
            private static Java.Lang.Character.UnicodeBlock _PRIVATE_USE_AREAContent = default;
            private static bool _PRIVATE_USE_AREAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#PSALTER_PAHLAVI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock PSALTER_PAHLAVI { get { if (!_PSALTER_PAHLAVIReady) { _PSALTER_PAHLAVIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "PSALTER_PAHLAVI"); _PSALTER_PAHLAVIReady = true; } return _PSALTER_PAHLAVIContent; } }
            private static Java.Lang.Character.UnicodeBlock _PSALTER_PAHLAVIContent = default;
            private static bool _PSALTER_PAHLAVIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#REJANG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock REJANG { get { if (!_REJANGReady) { _REJANGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "REJANG"); _REJANGReady = true; } return _REJANGContent; } }
            private static Java.Lang.Character.UnicodeBlock _REJANGContent = default;
            private static bool _REJANGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#RUMI_NUMERAL_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock RUMI_NUMERAL_SYMBOLS { get { if (!_RUMI_NUMERAL_SYMBOLSReady) { _RUMI_NUMERAL_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "RUMI_NUMERAL_SYMBOLS"); _RUMI_NUMERAL_SYMBOLSReady = true; } return _RUMI_NUMERAL_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _RUMI_NUMERAL_SYMBOLSContent = default;
            private static bool _RUMI_NUMERAL_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#RUNIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock RUNIC { get { if (!_RUNICReady) { _RUNICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "RUNIC"); _RUNICReady = true; } return _RUNICContent; } }
            private static Java.Lang.Character.UnicodeBlock _RUNICContent = default;
            private static bool _RUNICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SAMARITAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SAMARITAN { get { if (!_SAMARITANReady) { _SAMARITANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SAMARITAN"); _SAMARITANReady = true; } return _SAMARITANContent; } }
            private static Java.Lang.Character.UnicodeBlock _SAMARITANContent = default;
            private static bool _SAMARITANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SAURASHTRA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SAURASHTRA { get { if (!_SAURASHTRAReady) { _SAURASHTRAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SAURASHTRA"); _SAURASHTRAReady = true; } return _SAURASHTRAContent; } }
            private static Java.Lang.Character.UnicodeBlock _SAURASHTRAContent = default;
            private static bool _SAURASHTRAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SHARADA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SHARADA { get { if (!_SHARADAReady) { _SHARADAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SHARADA"); _SHARADAReady = true; } return _SHARADAContent; } }
            private static Java.Lang.Character.UnicodeBlock _SHARADAContent = default;
            private static bool _SHARADAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SHAVIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SHAVIAN { get { if (!_SHAVIANReady) { _SHAVIANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SHAVIAN"); _SHAVIANReady = true; } return _SHAVIANContent; } }
            private static Java.Lang.Character.UnicodeBlock _SHAVIANContent = default;
            private static bool _SHAVIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SHORTHAND_FORMAT_CONTROLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SHORTHAND_FORMAT_CONTROLS { get { if (!_SHORTHAND_FORMAT_CONTROLSReady) { _SHORTHAND_FORMAT_CONTROLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SHORTHAND_FORMAT_CONTROLS"); _SHORTHAND_FORMAT_CONTROLSReady = true; } return _SHORTHAND_FORMAT_CONTROLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SHORTHAND_FORMAT_CONTROLSContent = default;
            private static bool _SHORTHAND_FORMAT_CONTROLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SIDDHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SIDDHAM { get { if (!_SIDDHAMReady) { _SIDDHAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SIDDHAM"); _SIDDHAMReady = true; } return _SIDDHAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _SIDDHAMContent = default;
            private static bool _SIDDHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SINHALA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SINHALA { get { if (!_SINHALAReady) { _SINHALAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SINHALA"); _SINHALAReady = true; } return _SINHALAContent; } }
            private static Java.Lang.Character.UnicodeBlock _SINHALAContent = default;
            private static bool _SINHALAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SINHALA_ARCHAIC_NUMBERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SINHALA_ARCHAIC_NUMBERS { get { if (!_SINHALA_ARCHAIC_NUMBERSReady) { _SINHALA_ARCHAIC_NUMBERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SINHALA_ARCHAIC_NUMBERS"); _SINHALA_ARCHAIC_NUMBERSReady = true; } return _SINHALA_ARCHAIC_NUMBERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SINHALA_ARCHAIC_NUMBERSContent = default;
            private static bool _SINHALA_ARCHAIC_NUMBERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SMALL_FORM_VARIANTS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SMALL_FORM_VARIANTS { get { if (!_SMALL_FORM_VARIANTSReady) { _SMALL_FORM_VARIANTSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SMALL_FORM_VARIANTS"); _SMALL_FORM_VARIANTSReady = true; } return _SMALL_FORM_VARIANTSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SMALL_FORM_VARIANTSContent = default;
            private static bool _SMALL_FORM_VARIANTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SORA_SOMPENG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SORA_SOMPENG { get { if (!_SORA_SOMPENGReady) { _SORA_SOMPENGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SORA_SOMPENG"); _SORA_SOMPENGReady = true; } return _SORA_SOMPENGContent; } }
            private static Java.Lang.Character.UnicodeBlock _SORA_SOMPENGContent = default;
            private static bool _SORA_SOMPENGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SOYOMBO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SOYOMBO { get { if (!_SOYOMBOReady) { _SOYOMBOContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SOYOMBO"); _SOYOMBOReady = true; } return _SOYOMBOContent; } }
            private static Java.Lang.Character.UnicodeBlock _SOYOMBOContent = default;
            private static bool _SOYOMBOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SPACING_MODIFIER_LETTERS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SPACING_MODIFIER_LETTERS { get { if (!_SPACING_MODIFIER_LETTERSReady) { _SPACING_MODIFIER_LETTERSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SPACING_MODIFIER_LETTERS"); _SPACING_MODIFIER_LETTERSReady = true; } return _SPACING_MODIFIER_LETTERSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SPACING_MODIFIER_LETTERSContent = default;
            private static bool _SPACING_MODIFIER_LETTERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SPECIALS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SPECIALS { get { if (!_SPECIALSReady) { _SPECIALSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SPECIALS"); _SPECIALSReady = true; } return _SPECIALSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SPECIALSContent = default;
            private static bool _SPECIALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUNDANESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUNDANESE { get { if (!_SUNDANESEReady) { _SUNDANESEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUNDANESE"); _SUNDANESEReady = true; } return _SUNDANESEContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUNDANESEContent = default;
            private static bool _SUNDANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUNDANESE_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUNDANESE_SUPPLEMENT { get { if (!_SUNDANESE_SUPPLEMENTReady) { _SUNDANESE_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUNDANESE_SUPPLEMENT"); _SUNDANESE_SUPPLEMENTReady = true; } return _SUNDANESE_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUNDANESE_SUPPLEMENTContent = default;
            private static bool _SUNDANESE_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPERSCRIPTS_AND_SUBSCRIPTS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS { get { if (!_SUPERSCRIPTS_AND_SUBSCRIPTSReady) { _SUPERSCRIPTS_AND_SUBSCRIPTSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPERSCRIPTS_AND_SUBSCRIPTS"); _SUPERSCRIPTS_AND_SUBSCRIPTSReady = true; } return _SUPERSCRIPTS_AND_SUBSCRIPTSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPERSCRIPTS_AND_SUBSCRIPTSContent = default;
            private static bool _SUPERSCRIPTS_AND_SUBSCRIPTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_ARROWS_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_ARROWS_A { get { if (!_SUPPLEMENTAL_ARROWS_AReady) { _SUPPLEMENTAL_ARROWS_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_ARROWS_A"); _SUPPLEMENTAL_ARROWS_AReady = true; } return _SUPPLEMENTAL_ARROWS_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_ARROWS_AContent = default;
            private static bool _SUPPLEMENTAL_ARROWS_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_ARROWS_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_ARROWS_B { get { if (!_SUPPLEMENTAL_ARROWS_BReady) { _SUPPLEMENTAL_ARROWS_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_ARROWS_B"); _SUPPLEMENTAL_ARROWS_BReady = true; } return _SUPPLEMENTAL_ARROWS_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_ARROWS_BContent = default;
            private static bool _SUPPLEMENTAL_ARROWS_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_ARROWS_C"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_ARROWS_C { get { if (!_SUPPLEMENTAL_ARROWS_CReady) { _SUPPLEMENTAL_ARROWS_CContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_ARROWS_C"); _SUPPLEMENTAL_ARROWS_CReady = true; } return _SUPPLEMENTAL_ARROWS_CContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_ARROWS_CContent = default;
            private static bool _SUPPLEMENTAL_ARROWS_CReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_MATHEMATICAL_OPERATORS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_MATHEMATICAL_OPERATORS { get { if (!_SUPPLEMENTAL_MATHEMATICAL_OPERATORSReady) { _SUPPLEMENTAL_MATHEMATICAL_OPERATORSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_MATHEMATICAL_OPERATORS"); _SUPPLEMENTAL_MATHEMATICAL_OPERATORSReady = true; } return _SUPPLEMENTAL_MATHEMATICAL_OPERATORSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_MATHEMATICAL_OPERATORSContent = default;
            private static bool _SUPPLEMENTAL_MATHEMATICAL_OPERATORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_PUNCTUATION"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_PUNCTUATION { get { if (!_SUPPLEMENTAL_PUNCTUATIONReady) { _SUPPLEMENTAL_PUNCTUATIONContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_PUNCTUATION"); _SUPPLEMENTAL_PUNCTUATIONReady = true; } return _SUPPLEMENTAL_PUNCTUATIONContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_PUNCTUATIONContent = default;
            private static bool _SUPPLEMENTAL_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS { get { if (!_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSReady) { _SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS"); _SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSReady = true; } return _SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSContent = default;
            private static bool _SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTARY_PRIVATE_USE_AREA_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_A { get { if (!_SUPPLEMENTARY_PRIVATE_USE_AREA_AReady) { _SUPPLEMENTARY_PRIVATE_USE_AREA_AContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTARY_PRIVATE_USE_AREA_A"); _SUPPLEMENTARY_PRIVATE_USE_AREA_AReady = true; } return _SUPPLEMENTARY_PRIVATE_USE_AREA_AContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTARY_PRIVATE_USE_AREA_AContent = default;
            private static bool _SUPPLEMENTARY_PRIVATE_USE_AREA_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUPPLEMENTARY_PRIVATE_USE_AREA_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_B { get { if (!_SUPPLEMENTARY_PRIVATE_USE_AREA_BReady) { _SUPPLEMENTARY_PRIVATE_USE_AREA_BContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUPPLEMENTARY_PRIVATE_USE_AREA_B"); _SUPPLEMENTARY_PRIVATE_USE_AREA_BReady = true; } return _SUPPLEMENTARY_PRIVATE_USE_AREA_BContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUPPLEMENTARY_PRIVATE_USE_AREA_BContent = default;
            private static bool _SUPPLEMENTARY_PRIVATE_USE_AREA_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SUTTON_SIGNWRITING"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SUTTON_SIGNWRITING { get { if (!_SUTTON_SIGNWRITINGReady) { _SUTTON_SIGNWRITINGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SUTTON_SIGNWRITING"); _SUTTON_SIGNWRITINGReady = true; } return _SUTTON_SIGNWRITINGContent; } }
            private static Java.Lang.Character.UnicodeBlock _SUTTON_SIGNWRITINGContent = default;
            private static bool _SUTTON_SIGNWRITINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SYLOTI_NAGRI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SYLOTI_NAGRI { get { if (!_SYLOTI_NAGRIReady) { _SYLOTI_NAGRIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SYLOTI_NAGRI"); _SYLOTI_NAGRIReady = true; } return _SYLOTI_NAGRIContent; } }
            private static Java.Lang.Character.UnicodeBlock _SYLOTI_NAGRIContent = default;
            private static bool _SYLOTI_NAGRIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SYRIAC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SYRIAC { get { if (!_SYRIACReady) { _SYRIACContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SYRIAC"); _SYRIACReady = true; } return _SYRIACContent; } }
            private static Java.Lang.Character.UnicodeBlock _SYRIACContent = default;
            private static bool _SYRIACReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#SYRIAC_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock SYRIAC_SUPPLEMENT { get { if (!_SYRIAC_SUPPLEMENTReady) { _SYRIAC_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "SYRIAC_SUPPLEMENT"); _SYRIAC_SUPPLEMENTReady = true; } return _SYRIAC_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _SYRIAC_SUPPLEMENTContent = default;
            private static bool _SYRIAC_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAGALOG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAGALOG { get { if (!_TAGALOGReady) { _TAGALOGContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAGALOG"); _TAGALOGReady = true; } return _TAGALOGContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAGALOGContent = default;
            private static bool _TAGALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAGBANWA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAGBANWA { get { if (!_TAGBANWAReady) { _TAGBANWAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAGBANWA"); _TAGBANWAReady = true; } return _TAGBANWAContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAGBANWAContent = default;
            private static bool _TAGBANWAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAGS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAGS { get { if (!_TAGSReady) { _TAGSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAGS"); _TAGSReady = true; } return _TAGSContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAGSContent = default;
            private static bool _TAGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAI_LE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAI_LE { get { if (!_TAI_LEReady) { _TAI_LEContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAI_LE"); _TAI_LEReady = true; } return _TAI_LEContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAI_LEContent = default;
            private static bool _TAI_LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAI_THAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAI_THAM { get { if (!_TAI_THAMReady) { _TAI_THAMContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAI_THAM"); _TAI_THAMReady = true; } return _TAI_THAMContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAI_THAMContent = default;
            private static bool _TAI_THAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAI_VIET"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAI_VIET { get { if (!_TAI_VIETReady) { _TAI_VIETContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAI_VIET"); _TAI_VIETReady = true; } return _TAI_VIETContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAI_VIETContent = default;
            private static bool _TAI_VIETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAI_XUAN_JING_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAI_XUAN_JING_SYMBOLS { get { if (!_TAI_XUAN_JING_SYMBOLSReady) { _TAI_XUAN_JING_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAI_XUAN_JING_SYMBOLS"); _TAI_XUAN_JING_SYMBOLSReady = true; } return _TAI_XUAN_JING_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAI_XUAN_JING_SYMBOLSContent = default;
            private static bool _TAI_XUAN_JING_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAKRI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAKRI { get { if (!_TAKRIReady) { _TAKRIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAKRI"); _TAKRIReady = true; } return _TAKRIContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAKRIContent = default;
            private static bool _TAKRIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TAMIL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TAMIL { get { if (!_TAMILReady) { _TAMILContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TAMIL"); _TAMILReady = true; } return _TAMILContent; } }
            private static Java.Lang.Character.UnicodeBlock _TAMILContent = default;
            private static bool _TAMILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TANGUT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TANGUT { get { if (!_TANGUTReady) { _TANGUTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TANGUT"); _TANGUTReady = true; } return _TANGUTContent; } }
            private static Java.Lang.Character.UnicodeBlock _TANGUTContent = default;
            private static bool _TANGUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TANGUT_COMPONENTS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TANGUT_COMPONENTS { get { if (!_TANGUT_COMPONENTSReady) { _TANGUT_COMPONENTSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TANGUT_COMPONENTS"); _TANGUT_COMPONENTSReady = true; } return _TANGUT_COMPONENTSContent; } }
            private static Java.Lang.Character.UnicodeBlock _TANGUT_COMPONENTSContent = default;
            private static bool _TANGUT_COMPONENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TELUGU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TELUGU { get { if (!_TELUGUReady) { _TELUGUContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TELUGU"); _TELUGUReady = true; } return _TELUGUContent; } }
            private static Java.Lang.Character.UnicodeBlock _TELUGUContent = default;
            private static bool _TELUGUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#THAANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock THAANA { get { if (!_THAANAReady) { _THAANAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "THAANA"); _THAANAReady = true; } return _THAANAContent; } }
            private static Java.Lang.Character.UnicodeBlock _THAANAContent = default;
            private static bool _THAANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#THAI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock THAI { get { if (!_THAIReady) { _THAIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "THAI"); _THAIReady = true; } return _THAIContent; } }
            private static Java.Lang.Character.UnicodeBlock _THAIContent = default;
            private static bool _THAIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TIBETAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TIBETAN { get { if (!_TIBETANReady) { _TIBETANContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TIBETAN"); _TIBETANReady = true; } return _TIBETANContent; } }
            private static Java.Lang.Character.UnicodeBlock _TIBETANContent = default;
            private static bool _TIBETANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TIFINAGH"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TIFINAGH { get { if (!_TIFINAGHReady) { _TIFINAGHContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TIFINAGH"); _TIFINAGHReady = true; } return _TIFINAGHContent; } }
            private static Java.Lang.Character.UnicodeBlock _TIFINAGHContent = default;
            private static bool _TIFINAGHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TIRHUTA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TIRHUTA { get { if (!_TIRHUTAReady) { _TIRHUTAContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TIRHUTA"); _TIRHUTAReady = true; } return _TIRHUTAContent; } }
            private static Java.Lang.Character.UnicodeBlock _TIRHUTAContent = default;
            private static bool _TIRHUTAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#TRANSPORT_AND_MAP_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock TRANSPORT_AND_MAP_SYMBOLS { get { if (!_TRANSPORT_AND_MAP_SYMBOLSReady) { _TRANSPORT_AND_MAP_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "TRANSPORT_AND_MAP_SYMBOLS"); _TRANSPORT_AND_MAP_SYMBOLSReady = true; } return _TRANSPORT_AND_MAP_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _TRANSPORT_AND_MAP_SYMBOLSContent = default;
            private static bool _TRANSPORT_AND_MAP_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#UGARITIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock UGARITIC { get { if (!_UGARITICReady) { _UGARITICContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "UGARITIC"); _UGARITICReady = true; } return _UGARITICContent; } }
            private static Java.Lang.Character.UnicodeBlock _UGARITICContent = default;
            private static bool _UGARITICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS { get { if (!_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSReady) { _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"); _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSReady = true; } return _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSContent; } }
            private static Java.Lang.Character.UnicodeBlock _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSContent = default;
            private static bool _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED { get { if (!_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDReady) { _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"); _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDReady = true; } return _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDContent; } }
            private static Java.Lang.Character.UnicodeBlock _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDContent = default;
            private static bool _UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#VAI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock VAI { get { if (!_VAIReady) { _VAIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "VAI"); _VAIReady = true; } return _VAIContent; } }
            private static Java.Lang.Character.UnicodeBlock _VAIContent = default;
            private static bool _VAIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#VARIATION_SELECTORS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock VARIATION_SELECTORS { get { if (!_VARIATION_SELECTORSReady) { _VARIATION_SELECTORSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "VARIATION_SELECTORS"); _VARIATION_SELECTORSReady = true; } return _VARIATION_SELECTORSContent; } }
            private static Java.Lang.Character.UnicodeBlock _VARIATION_SELECTORSContent = default;
            private static bool _VARIATION_SELECTORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#VARIATION_SELECTORS_SUPPLEMENT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock VARIATION_SELECTORS_SUPPLEMENT { get { if (!_VARIATION_SELECTORS_SUPPLEMENTReady) { _VARIATION_SELECTORS_SUPPLEMENTContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "VARIATION_SELECTORS_SUPPLEMENT"); _VARIATION_SELECTORS_SUPPLEMENTReady = true; } return _VARIATION_SELECTORS_SUPPLEMENTContent; } }
            private static Java.Lang.Character.UnicodeBlock _VARIATION_SELECTORS_SUPPLEMENTContent = default;
            private static bool _VARIATION_SELECTORS_SUPPLEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#VEDIC_EXTENSIONS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock VEDIC_EXTENSIONS { get { if (!_VEDIC_EXTENSIONSReady) { _VEDIC_EXTENSIONSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "VEDIC_EXTENSIONS"); _VEDIC_EXTENSIONSReady = true; } return _VEDIC_EXTENSIONSContent; } }
            private static Java.Lang.Character.UnicodeBlock _VEDIC_EXTENSIONSContent = default;
            private static bool _VEDIC_EXTENSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#VERTICAL_FORMS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock VERTICAL_FORMS { get { if (!_VERTICAL_FORMSReady) { _VERTICAL_FORMSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "VERTICAL_FORMS"); _VERTICAL_FORMSReady = true; } return _VERTICAL_FORMSContent; } }
            private static Java.Lang.Character.UnicodeBlock _VERTICAL_FORMSContent = default;
            private static bool _VERTICAL_FORMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#WARANG_CITI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock WARANG_CITI { get { if (!_WARANG_CITIReady) { _WARANG_CITIContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "WARANG_CITI"); _WARANG_CITIReady = true; } return _WARANG_CITIContent; } }
            private static Java.Lang.Character.UnicodeBlock _WARANG_CITIContent = default;
            private static bool _WARANG_CITIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#YI_RADICALS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock YI_RADICALS { get { if (!_YI_RADICALSReady) { _YI_RADICALSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "YI_RADICALS"); _YI_RADICALSReady = true; } return _YI_RADICALSContent; } }
            private static Java.Lang.Character.UnicodeBlock _YI_RADICALSContent = default;
            private static bool _YI_RADICALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#YI_SYLLABLES"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock YI_SYLLABLES { get { if (!_YI_SYLLABLESReady) { _YI_SYLLABLESContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "YI_SYLLABLES"); _YI_SYLLABLESReady = true; } return _YI_SYLLABLESContent; } }
            private static Java.Lang.Character.UnicodeBlock _YI_SYLLABLESContent = default;
            private static bool _YI_SYLLABLESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#YIJING_HEXAGRAM_SYMBOLS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock YIJING_HEXAGRAM_SYMBOLS { get { if (!_YIJING_HEXAGRAM_SYMBOLSReady) { _YIJING_HEXAGRAM_SYMBOLSContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "YIJING_HEXAGRAM_SYMBOLS"); _YIJING_HEXAGRAM_SYMBOLSReady = true; } return _YIJING_HEXAGRAM_SYMBOLSContent; } }
            private static Java.Lang.Character.UnicodeBlock _YIJING_HEXAGRAM_SYMBOLSContent = default;
            private static bool _YIJING_HEXAGRAM_SYMBOLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#ZANABAZAR_SQUARE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeBlock ZANABAZAR_SQUARE { get { if (!_ZANABAZAR_SQUAREReady) { _ZANABAZAR_SQUAREContent = SGetField<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "ZANABAZAR_SQUARE"); _ZANABAZAR_SQUAREReady = true; } return _ZANABAZAR_SQUAREContent; } }
            private static Java.Lang.Character.UnicodeBlock _ZANABAZAR_SQUAREContent = default;
            private static bool _ZANABAZAR_SQUAREReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#forName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeBlock"/></returns>
            public static Java.Lang.Character.UnicodeBlock ForName(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "forName", "(Ljava/lang/String;)Ljava/lang/Character$UnicodeBlock;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#of(char)"/>
            /// </summary>
            /// <param name="arg0"><see cref="char"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeBlock"/></returns>
            public static Java.Lang.Character.UnicodeBlock Of(char arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "of", "(C)Ljava/lang/Character$UnicodeBlock;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeBlock.html#of(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeBlock"/></returns>
            public static Java.Lang.Character.UnicodeBlock Of(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeBlock>(LocalBridgeClazz, "of", "(I)Ljava/lang/Character$UnicodeBlock;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UnicodeScript
        public partial class UnicodeScript
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ADLAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ADLAM { get { if (!_ADLAMReady) { _ADLAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ADLAM"); _ADLAMReady = true; } return _ADLAMContent; } }
            private static Java.Lang.Character.UnicodeScript _ADLAMContent = default;
            private static bool _ADLAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#AHOM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript AHOM { get { if (!_AHOMReady) { _AHOMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "AHOM"); _AHOMReady = true; } return _AHOMContent; } }
            private static Java.Lang.Character.UnicodeScript _AHOMContent = default;
            private static bool _AHOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ANATOLIAN_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ANATOLIAN_HIEROGLYPHS { get { if (!_ANATOLIAN_HIEROGLYPHSReady) { _ANATOLIAN_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ANATOLIAN_HIEROGLYPHS"); _ANATOLIAN_HIEROGLYPHSReady = true; } return _ANATOLIAN_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeScript _ANATOLIAN_HIEROGLYPHSContent = default;
            private static bool _ANATOLIAN_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ARABIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ARABIC { get { if (!_ARABICReady) { _ARABICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ARABIC"); _ARABICReady = true; } return _ARABICContent; } }
            private static Java.Lang.Character.UnicodeScript _ARABICContent = default;
            private static bool _ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ARMENIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ARMENIAN { get { if (!_ARMENIANReady) { _ARMENIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ARMENIAN"); _ARMENIANReady = true; } return _ARMENIANContent; } }
            private static Java.Lang.Character.UnicodeScript _ARMENIANContent = default;
            private static bool _ARMENIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#AVESTAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript AVESTAN { get { if (!_AVESTANReady) { _AVESTANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "AVESTAN"); _AVESTANReady = true; } return _AVESTANContent; } }
            private static Java.Lang.Character.UnicodeScript _AVESTANContent = default;
            private static bool _AVESTANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BALINESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BALINESE { get { if (!_BALINESEReady) { _BALINESEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BALINESE"); _BALINESEReady = true; } return _BALINESEContent; } }
            private static Java.Lang.Character.UnicodeScript _BALINESEContent = default;
            private static bool _BALINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BAMUM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BAMUM { get { if (!_BAMUMReady) { _BAMUMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BAMUM"); _BAMUMReady = true; } return _BAMUMContent; } }
            private static Java.Lang.Character.UnicodeScript _BAMUMContent = default;
            private static bool _BAMUMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BASSA_VAH"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BASSA_VAH { get { if (!_BASSA_VAHReady) { _BASSA_VAHContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BASSA_VAH"); _BASSA_VAHReady = true; } return _BASSA_VAHContent; } }
            private static Java.Lang.Character.UnicodeScript _BASSA_VAHContent = default;
            private static bool _BASSA_VAHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BATAK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BATAK { get { if (!_BATAKReady) { _BATAKContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BATAK"); _BATAKReady = true; } return _BATAKContent; } }
            private static Java.Lang.Character.UnicodeScript _BATAKContent = default;
            private static bool _BATAKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BENGALI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BENGALI { get { if (!_BENGALIReady) { _BENGALIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BENGALI"); _BENGALIReady = true; } return _BENGALIContent; } }
            private static Java.Lang.Character.UnicodeScript _BENGALIContent = default;
            private static bool _BENGALIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BHAIKSUKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BHAIKSUKI { get { if (!_BHAIKSUKIReady) { _BHAIKSUKIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BHAIKSUKI"); _BHAIKSUKIReady = true; } return _BHAIKSUKIContent; } }
            private static Java.Lang.Character.UnicodeScript _BHAIKSUKIContent = default;
            private static bool _BHAIKSUKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BOPOMOFO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BOPOMOFO { get { if (!_BOPOMOFOReady) { _BOPOMOFOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BOPOMOFO"); _BOPOMOFOReady = true; } return _BOPOMOFOContent; } }
            private static Java.Lang.Character.UnicodeScript _BOPOMOFOContent = default;
            private static bool _BOPOMOFOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BRAHMI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BRAHMI { get { if (!_BRAHMIReady) { _BRAHMIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BRAHMI"); _BRAHMIReady = true; } return _BRAHMIContent; } }
            private static Java.Lang.Character.UnicodeScript _BRAHMIContent = default;
            private static bool _BRAHMIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BRAILLE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BRAILLE { get { if (!_BRAILLEReady) { _BRAILLEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BRAILLE"); _BRAILLEReady = true; } return _BRAILLEContent; } }
            private static Java.Lang.Character.UnicodeScript _BRAILLEContent = default;
            private static bool _BRAILLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BUGINESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BUGINESE { get { if (!_BUGINESEReady) { _BUGINESEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BUGINESE"); _BUGINESEReady = true; } return _BUGINESEContent; } }
            private static Java.Lang.Character.UnicodeScript _BUGINESEContent = default;
            private static bool _BUGINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#BUHID"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript BUHID { get { if (!_BUHIDReady) { _BUHIDContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "BUHID"); _BUHIDReady = true; } return _BUHIDContent; } }
            private static Java.Lang.Character.UnicodeScript _BUHIDContent = default;
            private static bool _BUHIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CANADIAN_ABORIGINAL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CANADIAN_ABORIGINAL { get { if (!_CANADIAN_ABORIGINALReady) { _CANADIAN_ABORIGINALContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CANADIAN_ABORIGINAL"); _CANADIAN_ABORIGINALReady = true; } return _CANADIAN_ABORIGINALContent; } }
            private static Java.Lang.Character.UnicodeScript _CANADIAN_ABORIGINALContent = default;
            private static bool _CANADIAN_ABORIGINALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CARIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CARIAN { get { if (!_CARIANReady) { _CARIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CARIAN"); _CARIANReady = true; } return _CARIANContent; } }
            private static Java.Lang.Character.UnicodeScript _CARIANContent = default;
            private static bool _CARIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CAUCASIAN_ALBANIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CAUCASIAN_ALBANIAN { get { if (!_CAUCASIAN_ALBANIANReady) { _CAUCASIAN_ALBANIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CAUCASIAN_ALBANIAN"); _CAUCASIAN_ALBANIANReady = true; } return _CAUCASIAN_ALBANIANContent; } }
            private static Java.Lang.Character.UnicodeScript _CAUCASIAN_ALBANIANContent = default;
            private static bool _CAUCASIAN_ALBANIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CHAKMA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CHAKMA { get { if (!_CHAKMAReady) { _CHAKMAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CHAKMA"); _CHAKMAReady = true; } return _CHAKMAContent; } }
            private static Java.Lang.Character.UnicodeScript _CHAKMAContent = default;
            private static bool _CHAKMAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CHAM { get { if (!_CHAMReady) { _CHAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CHAM"); _CHAMReady = true; } return _CHAMContent; } }
            private static Java.Lang.Character.UnicodeScript _CHAMContent = default;
            private static bool _CHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CHEROKEE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CHEROKEE { get { if (!_CHEROKEEReady) { _CHEROKEEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CHEROKEE"); _CHEROKEEReady = true; } return _CHEROKEEContent; } }
            private static Java.Lang.Character.UnicodeScript _CHEROKEEContent = default;
            private static bool _CHEROKEEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#COMMON"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript COMMON { get { if (!_COMMONReady) { _COMMONContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "COMMON"); _COMMONReady = true; } return _COMMONContent; } }
            private static Java.Lang.Character.UnicodeScript _COMMONContent = default;
            private static bool _COMMONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#COPTIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript COPTIC { get { if (!_COPTICReady) { _COPTICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "COPTIC"); _COPTICReady = true; } return _COPTICContent; } }
            private static Java.Lang.Character.UnicodeScript _COPTICContent = default;
            private static bool _COPTICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CUNEIFORM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CUNEIFORM { get { if (!_CUNEIFORMReady) { _CUNEIFORMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CUNEIFORM"); _CUNEIFORMReady = true; } return _CUNEIFORMContent; } }
            private static Java.Lang.Character.UnicodeScript _CUNEIFORMContent = default;
            private static bool _CUNEIFORMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CYPRIOT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CYPRIOT { get { if (!_CYPRIOTReady) { _CYPRIOTContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CYPRIOT"); _CYPRIOTReady = true; } return _CYPRIOTContent; } }
            private static Java.Lang.Character.UnicodeScript _CYPRIOTContent = default;
            private static bool _CYPRIOTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#CYRILLIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript CYRILLIC { get { if (!_CYRILLICReady) { _CYRILLICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "CYRILLIC"); _CYRILLICReady = true; } return _CYRILLICContent; } }
            private static Java.Lang.Character.UnicodeScript _CYRILLICContent = default;
            private static bool _CYRILLICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#DESERET"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript DESERET { get { if (!_DESERETReady) { _DESERETContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "DESERET"); _DESERETReady = true; } return _DESERETContent; } }
            private static Java.Lang.Character.UnicodeScript _DESERETContent = default;
            private static bool _DESERETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#DEVANAGARI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript DEVANAGARI { get { if (!_DEVANAGARIReady) { _DEVANAGARIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "DEVANAGARI"); _DEVANAGARIReady = true; } return _DEVANAGARIContent; } }
            private static Java.Lang.Character.UnicodeScript _DEVANAGARIContent = default;
            private static bool _DEVANAGARIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#DUPLOYAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript DUPLOYAN { get { if (!_DUPLOYANReady) { _DUPLOYANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "DUPLOYAN"); _DUPLOYANReady = true; } return _DUPLOYANContent; } }
            private static Java.Lang.Character.UnicodeScript _DUPLOYANContent = default;
            private static bool _DUPLOYANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#EGYPTIAN_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript EGYPTIAN_HIEROGLYPHS { get { if (!_EGYPTIAN_HIEROGLYPHSReady) { _EGYPTIAN_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "EGYPTIAN_HIEROGLYPHS"); _EGYPTIAN_HIEROGLYPHSReady = true; } return _EGYPTIAN_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeScript _EGYPTIAN_HIEROGLYPHSContent = default;
            private static bool _EGYPTIAN_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ELBASAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ELBASAN { get { if (!_ELBASANReady) { _ELBASANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ELBASAN"); _ELBASANReady = true; } return _ELBASANContent; } }
            private static Java.Lang.Character.UnicodeScript _ELBASANContent = default;
            private static bool _ELBASANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ETHIOPIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ETHIOPIC { get { if (!_ETHIOPICReady) { _ETHIOPICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ETHIOPIC"); _ETHIOPICReady = true; } return _ETHIOPICContent; } }
            private static Java.Lang.Character.UnicodeScript _ETHIOPICContent = default;
            private static bool _ETHIOPICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GEORGIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GEORGIAN { get { if (!_GEORGIANReady) { _GEORGIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GEORGIAN"); _GEORGIANReady = true; } return _GEORGIANContent; } }
            private static Java.Lang.Character.UnicodeScript _GEORGIANContent = default;
            private static bool _GEORGIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GLAGOLITIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GLAGOLITIC { get { if (!_GLAGOLITICReady) { _GLAGOLITICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GLAGOLITIC"); _GLAGOLITICReady = true; } return _GLAGOLITICContent; } }
            private static Java.Lang.Character.UnicodeScript _GLAGOLITICContent = default;
            private static bool _GLAGOLITICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GOTHIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GOTHIC { get { if (!_GOTHICReady) { _GOTHICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GOTHIC"); _GOTHICReady = true; } return _GOTHICContent; } }
            private static Java.Lang.Character.UnicodeScript _GOTHICContent = default;
            private static bool _GOTHICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GRANTHA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GRANTHA { get { if (!_GRANTHAReady) { _GRANTHAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GRANTHA"); _GRANTHAReady = true; } return _GRANTHAContent; } }
            private static Java.Lang.Character.UnicodeScript _GRANTHAContent = default;
            private static bool _GRANTHAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GREEK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GREEK { get { if (!_GREEKReady) { _GREEKContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GREEK"); _GREEKReady = true; } return _GREEKContent; } }
            private static Java.Lang.Character.UnicodeScript _GREEKContent = default;
            private static bool _GREEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GUJARATI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GUJARATI { get { if (!_GUJARATIReady) { _GUJARATIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GUJARATI"); _GUJARATIReady = true; } return _GUJARATIContent; } }
            private static Java.Lang.Character.UnicodeScript _GUJARATIContent = default;
            private static bool _GUJARATIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#GURMUKHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript GURMUKHI { get { if (!_GURMUKHIReady) { _GURMUKHIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "GURMUKHI"); _GURMUKHIReady = true; } return _GURMUKHIContent; } }
            private static Java.Lang.Character.UnicodeScript _GURMUKHIContent = default;
            private static bool _GURMUKHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HAN { get { if (!_HANReady) { _HANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HAN"); _HANReady = true; } return _HANContent; } }
            private static Java.Lang.Character.UnicodeScript _HANContent = default;
            private static bool _HANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HANGUL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HANGUL { get { if (!_HANGULReady) { _HANGULContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HANGUL"); _HANGULReady = true; } return _HANGULContent; } }
            private static Java.Lang.Character.UnicodeScript _HANGULContent = default;
            private static bool _HANGULReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HANUNOO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HANUNOO { get { if (!_HANUNOOReady) { _HANUNOOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HANUNOO"); _HANUNOOReady = true; } return _HANUNOOContent; } }
            private static Java.Lang.Character.UnicodeScript _HANUNOOContent = default;
            private static bool _HANUNOOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HATRAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HATRAN { get { if (!_HATRANReady) { _HATRANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HATRAN"); _HATRANReady = true; } return _HATRANContent; } }
            private static Java.Lang.Character.UnicodeScript _HATRANContent = default;
            private static bool _HATRANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HEBREW"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HEBREW { get { if (!_HEBREWReady) { _HEBREWContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HEBREW"); _HEBREWReady = true; } return _HEBREWContent; } }
            private static Java.Lang.Character.UnicodeScript _HEBREWContent = default;
            private static bool _HEBREWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#HIRAGANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript HIRAGANA { get { if (!_HIRAGANAReady) { _HIRAGANAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "HIRAGANA"); _HIRAGANAReady = true; } return _HIRAGANAContent; } }
            private static Java.Lang.Character.UnicodeScript _HIRAGANAContent = default;
            private static bool _HIRAGANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#IMPERIAL_ARAMAIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript IMPERIAL_ARAMAIC { get { if (!_IMPERIAL_ARAMAICReady) { _IMPERIAL_ARAMAICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "IMPERIAL_ARAMAIC"); _IMPERIAL_ARAMAICReady = true; } return _IMPERIAL_ARAMAICContent; } }
            private static Java.Lang.Character.UnicodeScript _IMPERIAL_ARAMAICContent = default;
            private static bool _IMPERIAL_ARAMAICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#INHERITED"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript INHERITED { get { if (!_INHERITEDReady) { _INHERITEDContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "INHERITED"); _INHERITEDReady = true; } return _INHERITEDContent; } }
            private static Java.Lang.Character.UnicodeScript _INHERITEDContent = default;
            private static bool _INHERITEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#INSCRIPTIONAL_PAHLAVI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript INSCRIPTIONAL_PAHLAVI { get { if (!_INSCRIPTIONAL_PAHLAVIReady) { _INSCRIPTIONAL_PAHLAVIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "INSCRIPTIONAL_PAHLAVI"); _INSCRIPTIONAL_PAHLAVIReady = true; } return _INSCRIPTIONAL_PAHLAVIContent; } }
            private static Java.Lang.Character.UnicodeScript _INSCRIPTIONAL_PAHLAVIContent = default;
            private static bool _INSCRIPTIONAL_PAHLAVIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#INSCRIPTIONAL_PARTHIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript INSCRIPTIONAL_PARTHIAN { get { if (!_INSCRIPTIONAL_PARTHIANReady) { _INSCRIPTIONAL_PARTHIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "INSCRIPTIONAL_PARTHIAN"); _INSCRIPTIONAL_PARTHIANReady = true; } return _INSCRIPTIONAL_PARTHIANContent; } }
            private static Java.Lang.Character.UnicodeScript _INSCRIPTIONAL_PARTHIANContent = default;
            private static bool _INSCRIPTIONAL_PARTHIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#JAVANESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript JAVANESE { get { if (!_JAVANESEReady) { _JAVANESEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "JAVANESE"); _JAVANESEReady = true; } return _JAVANESEContent; } }
            private static Java.Lang.Character.UnicodeScript _JAVANESEContent = default;
            private static bool _JAVANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KAITHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KAITHI { get { if (!_KAITHIReady) { _KAITHIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KAITHI"); _KAITHIReady = true; } return _KAITHIContent; } }
            private static Java.Lang.Character.UnicodeScript _KAITHIContent = default;
            private static bool _KAITHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KANNADA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KANNADA { get { if (!_KANNADAReady) { _KANNADAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KANNADA"); _KANNADAReady = true; } return _KANNADAContent; } }
            private static Java.Lang.Character.UnicodeScript _KANNADAContent = default;
            private static bool _KANNADAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KATAKANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KATAKANA { get { if (!_KATAKANAReady) { _KATAKANAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KATAKANA"); _KATAKANAReady = true; } return _KATAKANAContent; } }
            private static Java.Lang.Character.UnicodeScript _KATAKANAContent = default;
            private static bool _KATAKANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KAYAH_LI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KAYAH_LI { get { if (!_KAYAH_LIReady) { _KAYAH_LIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KAYAH_LI"); _KAYAH_LIReady = true; } return _KAYAH_LIContent; } }
            private static Java.Lang.Character.UnicodeScript _KAYAH_LIContent = default;
            private static bool _KAYAH_LIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KHAROSHTHI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KHAROSHTHI { get { if (!_KHAROSHTHIReady) { _KHAROSHTHIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KHAROSHTHI"); _KHAROSHTHIReady = true; } return _KHAROSHTHIContent; } }
            private static Java.Lang.Character.UnicodeScript _KHAROSHTHIContent = default;
            private static bool _KHAROSHTHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KHMER"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KHMER { get { if (!_KHMERReady) { _KHMERContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KHMER"); _KHMERReady = true; } return _KHMERContent; } }
            private static Java.Lang.Character.UnicodeScript _KHMERContent = default;
            private static bool _KHMERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KHOJKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KHOJKI { get { if (!_KHOJKIReady) { _KHOJKIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KHOJKI"); _KHOJKIReady = true; } return _KHOJKIContent; } }
            private static Java.Lang.Character.UnicodeScript _KHOJKIContent = default;
            private static bool _KHOJKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#KHUDAWADI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript KHUDAWADI { get { if (!_KHUDAWADIReady) { _KHUDAWADIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "KHUDAWADI"); _KHUDAWADIReady = true; } return _KHUDAWADIContent; } }
            private static Java.Lang.Character.UnicodeScript _KHUDAWADIContent = default;
            private static bool _KHUDAWADIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LAO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LAO { get { if (!_LAOReady) { _LAOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LAO"); _LAOReady = true; } return _LAOContent; } }
            private static Java.Lang.Character.UnicodeScript _LAOContent = default;
            private static bool _LAOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LATIN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LATIN { get { if (!_LATINReady) { _LATINContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LATIN"); _LATINReady = true; } return _LATINContent; } }
            private static Java.Lang.Character.UnicodeScript _LATINContent = default;
            private static bool _LATINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LEPCHA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LEPCHA { get { if (!_LEPCHAReady) { _LEPCHAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LEPCHA"); _LEPCHAReady = true; } return _LEPCHAContent; } }
            private static Java.Lang.Character.UnicodeScript _LEPCHAContent = default;
            private static bool _LEPCHAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LIMBU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LIMBU { get { if (!_LIMBUReady) { _LIMBUContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LIMBU"); _LIMBUReady = true; } return _LIMBUContent; } }
            private static Java.Lang.Character.UnicodeScript _LIMBUContent = default;
            private static bool _LIMBUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LINEAR_A"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LINEAR_A { get { if (!_LINEAR_AReady) { _LINEAR_AContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LINEAR_A"); _LINEAR_AReady = true; } return _LINEAR_AContent; } }
            private static Java.Lang.Character.UnicodeScript _LINEAR_AContent = default;
            private static bool _LINEAR_AReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LINEAR_B"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LINEAR_B { get { if (!_LINEAR_BReady) { _LINEAR_BContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LINEAR_B"); _LINEAR_BReady = true; } return _LINEAR_BContent; } }
            private static Java.Lang.Character.UnicodeScript _LINEAR_BContent = default;
            private static bool _LINEAR_BReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LISU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LISU { get { if (!_LISUReady) { _LISUContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LISU"); _LISUReady = true; } return _LISUContent; } }
            private static Java.Lang.Character.UnicodeScript _LISUContent = default;
            private static bool _LISUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LYCIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LYCIAN { get { if (!_LYCIANReady) { _LYCIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LYCIAN"); _LYCIANReady = true; } return _LYCIANContent; } }
            private static Java.Lang.Character.UnicodeScript _LYCIANContent = default;
            private static bool _LYCIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#LYDIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript LYDIAN { get { if (!_LYDIANReady) { _LYDIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "LYDIAN"); _LYDIANReady = true; } return _LYDIANContent; } }
            private static Java.Lang.Character.UnicodeScript _LYDIANContent = default;
            private static bool _LYDIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MAHAJANI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MAHAJANI { get { if (!_MAHAJANIReady) { _MAHAJANIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MAHAJANI"); _MAHAJANIReady = true; } return _MAHAJANIContent; } }
            private static Java.Lang.Character.UnicodeScript _MAHAJANIContent = default;
            private static bool _MAHAJANIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MALAYALAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MALAYALAM { get { if (!_MALAYALAMReady) { _MALAYALAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MALAYALAM"); _MALAYALAMReady = true; } return _MALAYALAMContent; } }
            private static Java.Lang.Character.UnicodeScript _MALAYALAMContent = default;
            private static bool _MALAYALAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MANDAIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MANDAIC { get { if (!_MANDAICReady) { _MANDAICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MANDAIC"); _MANDAICReady = true; } return _MANDAICContent; } }
            private static Java.Lang.Character.UnicodeScript _MANDAICContent = default;
            private static bool _MANDAICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MANICHAEAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MANICHAEAN { get { if (!_MANICHAEANReady) { _MANICHAEANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MANICHAEAN"); _MANICHAEANReady = true; } return _MANICHAEANContent; } }
            private static Java.Lang.Character.UnicodeScript _MANICHAEANContent = default;
            private static bool _MANICHAEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MARCHEN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MARCHEN { get { if (!_MARCHENReady) { _MARCHENContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MARCHEN"); _MARCHENReady = true; } return _MARCHENContent; } }
            private static Java.Lang.Character.UnicodeScript _MARCHENContent = default;
            private static bool _MARCHENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MASARAM_GONDI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MASARAM_GONDI { get { if (!_MASARAM_GONDIReady) { _MASARAM_GONDIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MASARAM_GONDI"); _MASARAM_GONDIReady = true; } return _MASARAM_GONDIContent; } }
            private static Java.Lang.Character.UnicodeScript _MASARAM_GONDIContent = default;
            private static bool _MASARAM_GONDIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MEETEI_MAYEK"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MEETEI_MAYEK { get { if (!_MEETEI_MAYEKReady) { _MEETEI_MAYEKContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MEETEI_MAYEK"); _MEETEI_MAYEKReady = true; } return _MEETEI_MAYEKContent; } }
            private static Java.Lang.Character.UnicodeScript _MEETEI_MAYEKContent = default;
            private static bool _MEETEI_MAYEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MENDE_KIKAKUI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MENDE_KIKAKUI { get { if (!_MENDE_KIKAKUIReady) { _MENDE_KIKAKUIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MENDE_KIKAKUI"); _MENDE_KIKAKUIReady = true; } return _MENDE_KIKAKUIContent; } }
            private static Java.Lang.Character.UnicodeScript _MENDE_KIKAKUIContent = default;
            private static bool _MENDE_KIKAKUIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MEROITIC_CURSIVE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MEROITIC_CURSIVE { get { if (!_MEROITIC_CURSIVEReady) { _MEROITIC_CURSIVEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MEROITIC_CURSIVE"); _MEROITIC_CURSIVEReady = true; } return _MEROITIC_CURSIVEContent; } }
            private static Java.Lang.Character.UnicodeScript _MEROITIC_CURSIVEContent = default;
            private static bool _MEROITIC_CURSIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MEROITIC_HIEROGLYPHS"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MEROITIC_HIEROGLYPHS { get { if (!_MEROITIC_HIEROGLYPHSReady) { _MEROITIC_HIEROGLYPHSContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MEROITIC_HIEROGLYPHS"); _MEROITIC_HIEROGLYPHSReady = true; } return _MEROITIC_HIEROGLYPHSContent; } }
            private static Java.Lang.Character.UnicodeScript _MEROITIC_HIEROGLYPHSContent = default;
            private static bool _MEROITIC_HIEROGLYPHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MIAO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MIAO { get { if (!_MIAOReady) { _MIAOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MIAO"); _MIAOReady = true; } return _MIAOContent; } }
            private static Java.Lang.Character.UnicodeScript _MIAOContent = default;
            private static bool _MIAOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MODI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MODI { get { if (!_MODIReady) { _MODIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MODI"); _MODIReady = true; } return _MODIContent; } }
            private static Java.Lang.Character.UnicodeScript _MODIContent = default;
            private static bool _MODIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MONGOLIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MONGOLIAN { get { if (!_MONGOLIANReady) { _MONGOLIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MONGOLIAN"); _MONGOLIANReady = true; } return _MONGOLIANContent; } }
            private static Java.Lang.Character.UnicodeScript _MONGOLIANContent = default;
            private static bool _MONGOLIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MRO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MRO { get { if (!_MROReady) { _MROContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MRO"); _MROReady = true; } return _MROContent; } }
            private static Java.Lang.Character.UnicodeScript _MROContent = default;
            private static bool _MROReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MULTANI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MULTANI { get { if (!_MULTANIReady) { _MULTANIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MULTANI"); _MULTANIReady = true; } return _MULTANIContent; } }
            private static Java.Lang.Character.UnicodeScript _MULTANIContent = default;
            private static bool _MULTANIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#MYANMAR"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript MYANMAR { get { if (!_MYANMARReady) { _MYANMARContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "MYANMAR"); _MYANMARReady = true; } return _MYANMARContent; } }
            private static Java.Lang.Character.UnicodeScript _MYANMARContent = default;
            private static bool _MYANMARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#NABATAEAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript NABATAEAN { get { if (!_NABATAEANReady) { _NABATAEANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "NABATAEAN"); _NABATAEANReady = true; } return _NABATAEANContent; } }
            private static Java.Lang.Character.UnicodeScript _NABATAEANContent = default;
            private static bool _NABATAEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#NEW_TAI_LUE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript NEW_TAI_LUE { get { if (!_NEW_TAI_LUEReady) { _NEW_TAI_LUEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "NEW_TAI_LUE"); _NEW_TAI_LUEReady = true; } return _NEW_TAI_LUEContent; } }
            private static Java.Lang.Character.UnicodeScript _NEW_TAI_LUEContent = default;
            private static bool _NEW_TAI_LUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#NEWA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript NEWA { get { if (!_NEWAReady) { _NEWAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "NEWA"); _NEWAReady = true; } return _NEWAContent; } }
            private static Java.Lang.Character.UnicodeScript _NEWAContent = default;
            private static bool _NEWAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#NKO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript NKO { get { if (!_NKOReady) { _NKOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "NKO"); _NKOReady = true; } return _NKOContent; } }
            private static Java.Lang.Character.UnicodeScript _NKOContent = default;
            private static bool _NKOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#NUSHU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript NUSHU { get { if (!_NUSHUReady) { _NUSHUContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "NUSHU"); _NUSHUReady = true; } return _NUSHUContent; } }
            private static Java.Lang.Character.UnicodeScript _NUSHUContent = default;
            private static bool _NUSHUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OGHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OGHAM { get { if (!_OGHAMReady) { _OGHAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OGHAM"); _OGHAMReady = true; } return _OGHAMContent; } }
            private static Java.Lang.Character.UnicodeScript _OGHAMContent = default;
            private static bool _OGHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OL_CHIKI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OL_CHIKI { get { if (!_OL_CHIKIReady) { _OL_CHIKIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OL_CHIKI"); _OL_CHIKIReady = true; } return _OL_CHIKIContent; } }
            private static Java.Lang.Character.UnicodeScript _OL_CHIKIContent = default;
            private static bool _OL_CHIKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_HUNGARIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_HUNGARIAN { get { if (!_OLD_HUNGARIANReady) { _OLD_HUNGARIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_HUNGARIAN"); _OLD_HUNGARIANReady = true; } return _OLD_HUNGARIANContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_HUNGARIANContent = default;
            private static bool _OLD_HUNGARIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_ITALIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_ITALIC { get { if (!_OLD_ITALICReady) { _OLD_ITALICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_ITALIC"); _OLD_ITALICReady = true; } return _OLD_ITALICContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_ITALICContent = default;
            private static bool _OLD_ITALICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_NORTH_ARABIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_NORTH_ARABIAN { get { if (!_OLD_NORTH_ARABIANReady) { _OLD_NORTH_ARABIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_NORTH_ARABIAN"); _OLD_NORTH_ARABIANReady = true; } return _OLD_NORTH_ARABIANContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_NORTH_ARABIANContent = default;
            private static bool _OLD_NORTH_ARABIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_PERMIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_PERMIC { get { if (!_OLD_PERMICReady) { _OLD_PERMICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_PERMIC"); _OLD_PERMICReady = true; } return _OLD_PERMICContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_PERMICContent = default;
            private static bool _OLD_PERMICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_PERSIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_PERSIAN { get { if (!_OLD_PERSIANReady) { _OLD_PERSIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_PERSIAN"); _OLD_PERSIANReady = true; } return _OLD_PERSIANContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_PERSIANContent = default;
            private static bool _OLD_PERSIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_SOUTH_ARABIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_SOUTH_ARABIAN { get { if (!_OLD_SOUTH_ARABIANReady) { _OLD_SOUTH_ARABIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_SOUTH_ARABIAN"); _OLD_SOUTH_ARABIANReady = true; } return _OLD_SOUTH_ARABIANContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_SOUTH_ARABIANContent = default;
            private static bool _OLD_SOUTH_ARABIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OLD_TURKIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OLD_TURKIC { get { if (!_OLD_TURKICReady) { _OLD_TURKICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OLD_TURKIC"); _OLD_TURKICReady = true; } return _OLD_TURKICContent; } }
            private static Java.Lang.Character.UnicodeScript _OLD_TURKICContent = default;
            private static bool _OLD_TURKICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ORIYA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ORIYA { get { if (!_ORIYAReady) { _ORIYAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ORIYA"); _ORIYAReady = true; } return _ORIYAContent; } }
            private static Java.Lang.Character.UnicodeScript _ORIYAContent = default;
            private static bool _ORIYAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OSAGE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OSAGE { get { if (!_OSAGEReady) { _OSAGEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OSAGE"); _OSAGEReady = true; } return _OSAGEContent; } }
            private static Java.Lang.Character.UnicodeScript _OSAGEContent = default;
            private static bool _OSAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#OSMANYA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript OSMANYA { get { if (!_OSMANYAReady) { _OSMANYAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "OSMANYA"); _OSMANYAReady = true; } return _OSMANYAContent; } }
            private static Java.Lang.Character.UnicodeScript _OSMANYAContent = default;
            private static bool _OSMANYAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PAHAWH_HMONG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PAHAWH_HMONG { get { if (!_PAHAWH_HMONGReady) { _PAHAWH_HMONGContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PAHAWH_HMONG"); _PAHAWH_HMONGReady = true; } return _PAHAWH_HMONGContent; } }
            private static Java.Lang.Character.UnicodeScript _PAHAWH_HMONGContent = default;
            private static bool _PAHAWH_HMONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PALMYRENE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PALMYRENE { get { if (!_PALMYRENEReady) { _PALMYRENEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PALMYRENE"); _PALMYRENEReady = true; } return _PALMYRENEContent; } }
            private static Java.Lang.Character.UnicodeScript _PALMYRENEContent = default;
            private static bool _PALMYRENEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PAU_CIN_HAU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PAU_CIN_HAU { get { if (!_PAU_CIN_HAUReady) { _PAU_CIN_HAUContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PAU_CIN_HAU"); _PAU_CIN_HAUReady = true; } return _PAU_CIN_HAUContent; } }
            private static Java.Lang.Character.UnicodeScript _PAU_CIN_HAUContent = default;
            private static bool _PAU_CIN_HAUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PHAGS_PA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PHAGS_PA { get { if (!_PHAGS_PAReady) { _PHAGS_PAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PHAGS_PA"); _PHAGS_PAReady = true; } return _PHAGS_PAContent; } }
            private static Java.Lang.Character.UnicodeScript _PHAGS_PAContent = default;
            private static bool _PHAGS_PAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PHOENICIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PHOENICIAN { get { if (!_PHOENICIANReady) { _PHOENICIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PHOENICIAN"); _PHOENICIANReady = true; } return _PHOENICIANContent; } }
            private static Java.Lang.Character.UnicodeScript _PHOENICIANContent = default;
            private static bool _PHOENICIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#PSALTER_PAHLAVI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript PSALTER_PAHLAVI { get { if (!_PSALTER_PAHLAVIReady) { _PSALTER_PAHLAVIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "PSALTER_PAHLAVI"); _PSALTER_PAHLAVIReady = true; } return _PSALTER_PAHLAVIContent; } }
            private static Java.Lang.Character.UnicodeScript _PSALTER_PAHLAVIContent = default;
            private static bool _PSALTER_PAHLAVIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#REJANG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript REJANG { get { if (!_REJANGReady) { _REJANGContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "REJANG"); _REJANGReady = true; } return _REJANGContent; } }
            private static Java.Lang.Character.UnicodeScript _REJANGContent = default;
            private static bool _REJANGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#RUNIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript RUNIC { get { if (!_RUNICReady) { _RUNICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "RUNIC"); _RUNICReady = true; } return _RUNICContent; } }
            private static Java.Lang.Character.UnicodeScript _RUNICContent = default;
            private static bool _RUNICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SAMARITAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SAMARITAN { get { if (!_SAMARITANReady) { _SAMARITANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SAMARITAN"); _SAMARITANReady = true; } return _SAMARITANContent; } }
            private static Java.Lang.Character.UnicodeScript _SAMARITANContent = default;
            private static bool _SAMARITANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SAURASHTRA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SAURASHTRA { get { if (!_SAURASHTRAReady) { _SAURASHTRAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SAURASHTRA"); _SAURASHTRAReady = true; } return _SAURASHTRAContent; } }
            private static Java.Lang.Character.UnicodeScript _SAURASHTRAContent = default;
            private static bool _SAURASHTRAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SHARADA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SHARADA { get { if (!_SHARADAReady) { _SHARADAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SHARADA"); _SHARADAReady = true; } return _SHARADAContent; } }
            private static Java.Lang.Character.UnicodeScript _SHARADAContent = default;
            private static bool _SHARADAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SHAVIAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SHAVIAN { get { if (!_SHAVIANReady) { _SHAVIANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SHAVIAN"); _SHAVIANReady = true; } return _SHAVIANContent; } }
            private static Java.Lang.Character.UnicodeScript _SHAVIANContent = default;
            private static bool _SHAVIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SIDDHAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SIDDHAM { get { if (!_SIDDHAMReady) { _SIDDHAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SIDDHAM"); _SIDDHAMReady = true; } return _SIDDHAMContent; } }
            private static Java.Lang.Character.UnicodeScript _SIDDHAMContent = default;
            private static bool _SIDDHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SIGNWRITING"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SIGNWRITING { get { if (!_SIGNWRITINGReady) { _SIGNWRITINGContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SIGNWRITING"); _SIGNWRITINGReady = true; } return _SIGNWRITINGContent; } }
            private static Java.Lang.Character.UnicodeScript _SIGNWRITINGContent = default;
            private static bool _SIGNWRITINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SINHALA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SINHALA { get { if (!_SINHALAReady) { _SINHALAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SINHALA"); _SINHALAReady = true; } return _SINHALAContent; } }
            private static Java.Lang.Character.UnicodeScript _SINHALAContent = default;
            private static bool _SINHALAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SORA_SOMPENG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SORA_SOMPENG { get { if (!_SORA_SOMPENGReady) { _SORA_SOMPENGContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SORA_SOMPENG"); _SORA_SOMPENGReady = true; } return _SORA_SOMPENGContent; } }
            private static Java.Lang.Character.UnicodeScript _SORA_SOMPENGContent = default;
            private static bool _SORA_SOMPENGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SOYOMBO"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SOYOMBO { get { if (!_SOYOMBOReady) { _SOYOMBOContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SOYOMBO"); _SOYOMBOReady = true; } return _SOYOMBOContent; } }
            private static Java.Lang.Character.UnicodeScript _SOYOMBOContent = default;
            private static bool _SOYOMBOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SUNDANESE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SUNDANESE { get { if (!_SUNDANESEReady) { _SUNDANESEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SUNDANESE"); _SUNDANESEReady = true; } return _SUNDANESEContent; } }
            private static Java.Lang.Character.UnicodeScript _SUNDANESEContent = default;
            private static bool _SUNDANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SYLOTI_NAGRI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SYLOTI_NAGRI { get { if (!_SYLOTI_NAGRIReady) { _SYLOTI_NAGRIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SYLOTI_NAGRI"); _SYLOTI_NAGRIReady = true; } return _SYLOTI_NAGRIContent; } }
            private static Java.Lang.Character.UnicodeScript _SYLOTI_NAGRIContent = default;
            private static bool _SYLOTI_NAGRIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#SYRIAC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript SYRIAC { get { if (!_SYRIACReady) { _SYRIACContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "SYRIAC"); _SYRIACReady = true; } return _SYRIACContent; } }
            private static Java.Lang.Character.UnicodeScript _SYRIACContent = default;
            private static bool _SYRIACReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAGALOG"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAGALOG { get { if (!_TAGALOGReady) { _TAGALOGContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAGALOG"); _TAGALOGReady = true; } return _TAGALOGContent; } }
            private static Java.Lang.Character.UnicodeScript _TAGALOGContent = default;
            private static bool _TAGALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAGBANWA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAGBANWA { get { if (!_TAGBANWAReady) { _TAGBANWAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAGBANWA"); _TAGBANWAReady = true; } return _TAGBANWAContent; } }
            private static Java.Lang.Character.UnicodeScript _TAGBANWAContent = default;
            private static bool _TAGBANWAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAI_LE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAI_LE { get { if (!_TAI_LEReady) { _TAI_LEContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAI_LE"); _TAI_LEReady = true; } return _TAI_LEContent; } }
            private static Java.Lang.Character.UnicodeScript _TAI_LEContent = default;
            private static bool _TAI_LEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAI_THAM"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAI_THAM { get { if (!_TAI_THAMReady) { _TAI_THAMContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAI_THAM"); _TAI_THAMReady = true; } return _TAI_THAMContent; } }
            private static Java.Lang.Character.UnicodeScript _TAI_THAMContent = default;
            private static bool _TAI_THAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAI_VIET"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAI_VIET { get { if (!_TAI_VIETReady) { _TAI_VIETContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAI_VIET"); _TAI_VIETReady = true; } return _TAI_VIETContent; } }
            private static Java.Lang.Character.UnicodeScript _TAI_VIETContent = default;
            private static bool _TAI_VIETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAKRI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAKRI { get { if (!_TAKRIReady) { _TAKRIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAKRI"); _TAKRIReady = true; } return _TAKRIContent; } }
            private static Java.Lang.Character.UnicodeScript _TAKRIContent = default;
            private static bool _TAKRIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TAMIL"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TAMIL { get { if (!_TAMILReady) { _TAMILContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TAMIL"); _TAMILReady = true; } return _TAMILContent; } }
            private static Java.Lang.Character.UnicodeScript _TAMILContent = default;
            private static bool _TAMILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TANGUT"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TANGUT { get { if (!_TANGUTReady) { _TANGUTContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TANGUT"); _TANGUTReady = true; } return _TANGUTContent; } }
            private static Java.Lang.Character.UnicodeScript _TANGUTContent = default;
            private static bool _TANGUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TELUGU"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TELUGU { get { if (!_TELUGUReady) { _TELUGUContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TELUGU"); _TELUGUReady = true; } return _TELUGUContent; } }
            private static Java.Lang.Character.UnicodeScript _TELUGUContent = default;
            private static bool _TELUGUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#THAANA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript THAANA { get { if (!_THAANAReady) { _THAANAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "THAANA"); _THAANAReady = true; } return _THAANAContent; } }
            private static Java.Lang.Character.UnicodeScript _THAANAContent = default;
            private static bool _THAANAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#THAI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript THAI { get { if (!_THAIReady) { _THAIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "THAI"); _THAIReady = true; } return _THAIContent; } }
            private static Java.Lang.Character.UnicodeScript _THAIContent = default;
            private static bool _THAIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TIBETAN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TIBETAN { get { if (!_TIBETANReady) { _TIBETANContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TIBETAN"); _TIBETANReady = true; } return _TIBETANContent; } }
            private static Java.Lang.Character.UnicodeScript _TIBETANContent = default;
            private static bool _TIBETANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TIFINAGH"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TIFINAGH { get { if (!_TIFINAGHReady) { _TIFINAGHContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TIFINAGH"); _TIFINAGHReady = true; } return _TIFINAGHContent; } }
            private static Java.Lang.Character.UnicodeScript _TIFINAGHContent = default;
            private static bool _TIFINAGHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#TIRHUTA"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript TIRHUTA { get { if (!_TIRHUTAReady) { _TIRHUTAContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "TIRHUTA"); _TIRHUTAReady = true; } return _TIRHUTAContent; } }
            private static Java.Lang.Character.UnicodeScript _TIRHUTAContent = default;
            private static bool _TIRHUTAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#UGARITIC"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript UGARITIC { get { if (!_UGARITICReady) { _UGARITICContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "UGARITIC"); _UGARITICReady = true; } return _UGARITICContent; } }
            private static Java.Lang.Character.UnicodeScript _UGARITICContent = default;
            private static bool _UGARITICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#UNKNOWN"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
            private static Java.Lang.Character.UnicodeScript _UNKNOWNContent = default;
            private static bool _UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#VAI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript VAI { get { if (!_VAIReady) { _VAIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "VAI"); _VAIReady = true; } return _VAIContent; } }
            private static Java.Lang.Character.UnicodeScript _VAIContent = default;
            private static bool _VAIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#WARANG_CITI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript WARANG_CITI { get { if (!_WARANG_CITIReady) { _WARANG_CITIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "WARANG_CITI"); _WARANG_CITIReady = true; } return _WARANG_CITIContent; } }
            private static Java.Lang.Character.UnicodeScript _WARANG_CITIContent = default;
            private static bool _WARANG_CITIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#YI"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript YI { get { if (!_YIReady) { _YIContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "YI"); _YIReady = true; } return _YIContent; } }
            private static Java.Lang.Character.UnicodeScript _YIContent = default;
            private static bool _YIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#ZANABAZAR_SQUARE"/>
            /// </summary>
            public static Java.Lang.Character.UnicodeScript ZANABAZAR_SQUARE { get { if (!_ZANABAZAR_SQUAREReady) { _ZANABAZAR_SQUAREContent = SGetField<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "ZANABAZAR_SQUARE"); _ZANABAZAR_SQUAREReady = true; } return _ZANABAZAR_SQUAREContent; } }
            private static Java.Lang.Character.UnicodeScript _ZANABAZAR_SQUAREContent = default;
            private static bool _ZANABAZAR_SQUAREReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#forName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeScript"/></returns>
            public static Java.Lang.Character.UnicodeScript ForName(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "forName", "(Ljava/lang/String;)Ljava/lang/Character$UnicodeScript;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#of(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeScript"/></returns>
            public static Java.Lang.Character.UnicodeScript Of(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "of", "(I)Ljava/lang/Character$UnicodeScript;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.Character.UnicodeScript"/></returns>
            public static Java.Lang.Character.UnicodeScript ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/lang/Character$UnicodeScript;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.UnicodeScript.html#values()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.Character.UnicodeScript"/></returns>
            public static Java.Lang.Character.UnicodeScript[] Values()
            {
                return SExecuteWithSignatureArray<Java.Lang.Character.UnicodeScript>(LocalBridgeClazz, "values", "()[Ljava/lang/Character$UnicodeScript;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}