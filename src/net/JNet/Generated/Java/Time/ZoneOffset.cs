/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Time
{
    #region ZoneOffset
    public partial class ZoneOffset
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        public static implicit operator Java.Time.Temporal.TemporalAccessor(Java.Time.ZoneOffset t) => t.Cast<Java.Time.Temporal.TemporalAccessor>();
        public static implicit operator Java.Time.Temporal.TemporalAdjuster(Java.Time.ZoneOffset t) => t.Cast<Java.Time.Temporal.TemporalAdjuster>();
        public static implicit operator Java.Io.Serializable(Java.Time.ZoneOffset t) => t.Cast<Java.Io.Serializable>();
        
        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#MAX
        /// </summary>
        public static Java.Time.ZoneOffset MAX => Clazz.GetField<Java.Time.ZoneOffset>("MAX");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#MIN
        /// </summary>
        public static Java.Time.ZoneOffset MIN => Clazz.GetField<Java.Time.ZoneOffset>("MIN");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#UTC
        /// </summary>
        public static Java.Time.ZoneOffset UTC => Clazz.GetField<Java.Time.ZoneOffset>("UTC");
        
        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#ofHours(int)
        /// </summary>
        public static Java.Time.ZoneOffset OfHours(int arg0)
        {
            return SExecute<Java.Time.ZoneOffset>("ofHours", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#ofHoursMinutes(int,int)
        /// </summary>
        public static Java.Time.ZoneOffset OfHoursMinutes(int arg0, int arg1)
        {
            return SExecute<Java.Time.ZoneOffset>("ofHoursMinutes", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#ofHoursMinutesSeconds(int,int,int)
        /// </summary>
        public static Java.Time.ZoneOffset OfHoursMinutesSeconds(int arg0, int arg1, int arg2)
        {
            return SExecute<Java.Time.ZoneOffset>("ofHoursMinutesSeconds", arg0, arg1, arg2);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#ofTotalSeconds(int)
        /// </summary>
        public static Java.Time.ZoneOffset OfTotalSeconds(int arg0)
        {
            return SExecute<Java.Time.ZoneOffset>("ofTotalSeconds", arg0);
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#getTotalSeconds() 
        /// </summary>
        public int TotalSeconds
        {
            get { return IExecute<int>("getTotalSeconds"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#isSupported(java.time.temporal.TemporalField)
        /// </summary>
        public bool IsSupported(Java.Time.Temporal.TemporalField arg0)
        {
            return IExecute<bool>("isSupported", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#compareTo(java.lang.Object)
        /// </summary>
        public int CompareTo(object arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#compareTo(java.time.ZoneOffset)
        /// </summary>
        public int CompareTo(Java.Time.ZoneOffset arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#get(java.time.temporal.TemporalField)
        /// </summary>
        public int Get(Java.Time.Temporal.TemporalField arg0)
        {
            return IExecute<int>("get", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#adjustInto(java.time.temporal.Temporal)
        /// </summary>
        public Java.Time.Temporal.Temporal AdjustInto(Java.Time.Temporal.Temporal arg0)
        {
            return IExecute<Java.Time.Temporal.Temporal>("adjustInto", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#range(java.time.temporal.TemporalField)
        /// </summary>
        public Java.Time.Temporal.ValueRange Range(Java.Time.Temporal.TemporalField arg0)
        {
            return IExecute<Java.Time.Temporal.ValueRange>("range", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#getLong(java.time.temporal.TemporalField)
        /// </summary>
        public long GetLong(Java.Time.Temporal.TemporalField arg0)
        {
            return IExecute<long>("getLong", arg0);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}