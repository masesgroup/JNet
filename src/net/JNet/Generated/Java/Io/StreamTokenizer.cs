/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Io
{
    #region StreamTokenizer
    public partial class StreamTokenizer
    {
        #region Constructors
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#<init>(java.io.Reader)
        /// </summary>
        public StreamTokenizer(Java.Io.Reader arg0)
            : base(arg0)
        {
        }
        
        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#nval
        /// </summary>
        public double nval => Instance.GetField<double>("nval");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#ttype
        /// </summary>
        public int ttype => Instance.GetField<int>("ttype");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#sval
        /// </summary>
        public string sval => Instance.GetField<string>("sval");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#TT_EOF
        /// </summary>
        public static int TT_EOF => Clazz.GetField<int>("TT_EOF");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#TT_EOL
        /// </summary>
        public static int TT_EOL => Clazz.GetField<int>("TT_EOL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#TT_NUMBER
        /// </summary>
        public static int TT_NUMBER => Clazz.GetField<int>("TT_NUMBER");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#TT_WORD
        /// </summary>
        public static int TT_WORD => Clazz.GetField<int>("TT_WORD");
        
        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#lineno()
        /// </summary>
        public int Lineno()
        {
            return IExecute<int>("lineno");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#nextToken() throws java.io.IOException
        /// </summary>
        public int NextToken()
        {
            return IExecute<int>("nextToken");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#commentChar(int)
        /// </summary>
        public void CommentChar(int arg0)
        {
            IExecute("commentChar", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#eolIsSignificant(boolean)
        /// </summary>
        public void EolIsSignificant(bool arg0)
        {
            IExecute("eolIsSignificant", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#lowerCaseMode(boolean)
        /// </summary>
        public void LowerCaseMode(bool arg0)
        {
            IExecute("lowerCaseMode", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#ordinaryChar(int)
        /// </summary>
        public void OrdinaryChar(int arg0)
        {
            IExecute("ordinaryChar", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#ordinaryChars(int,int)
        /// </summary>
        public void OrdinaryChars(int arg0, int arg1)
        {
            IExecute("ordinaryChars", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#parseNumbers()
        /// </summary>
        public void ParseNumbers()
        {
            IExecute("parseNumbers");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#pushBack()
        /// </summary>
        public void PushBack()
        {
            IExecute("pushBack");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#quoteChar(int)
        /// </summary>
        public void QuoteChar(int arg0)
        {
            IExecute("quoteChar", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#resetSyntax()
        /// </summary>
        public void ResetSyntax()
        {
            IExecute("resetSyntax");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#slashSlashComments(boolean)
        /// </summary>
        public void SlashSlashComments(bool arg0)
        {
            IExecute("slashSlashComments", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#slashStarComments(boolean)
        /// </summary>
        public void SlashStarComments(bool arg0)
        {
            IExecute("slashStarComments", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#whitespaceChars(int,int)
        /// </summary>
        public void WhitespaceChars(int arg0, int arg1)
        {
            IExecute("whitespaceChars", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/StreamTokenizer.html#wordChars(int,int)
        /// </summary>
        public void WordChars(int arg0, int arg1)
        {
            IExecute("wordChars", arg0, arg1);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}