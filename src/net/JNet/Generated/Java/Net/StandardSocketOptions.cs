/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.1.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Net
{
    #region StandardSocketOptions
    public partial class StandardSocketOptions
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#IP_MULTICAST_LOOP"/>
        /// </summary>
        public static Java.Net.SocketOption IP_MULTICAST_LOOP { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "IP_MULTICAST_LOOP"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_BROADCAST"/>
        /// </summary>
        public static Java.Net.SocketOption SO_BROADCAST { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_BROADCAST"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_KEEPALIVE"/>
        /// </summary>
        public static Java.Net.SocketOption SO_KEEPALIVE { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_KEEPALIVE"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_REUSEADDR"/>
        /// </summary>
        public static Java.Net.SocketOption SO_REUSEADDR { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_REUSEADDR"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_REUSEPORT"/>
        /// </summary>
        public static Java.Net.SocketOption SO_REUSEPORT { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_REUSEPORT"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#TCP_NODELAY"/>
        /// </summary>
        public static Java.Net.SocketOption TCP_NODELAY { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "TCP_NODELAY"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#IP_MULTICAST_TTL"/>
        /// </summary>
        public static Java.Net.SocketOption IP_MULTICAST_TTL { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "IP_MULTICAST_TTL"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#IP_TOS"/>
        /// </summary>
        public static Java.Net.SocketOption IP_TOS { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "IP_TOS"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_LINGER"/>
        /// </summary>
        public static Java.Net.SocketOption SO_LINGER { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_LINGER"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_RCVBUF"/>
        /// </summary>
        public static Java.Net.SocketOption SO_RCVBUF { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_RCVBUF"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#SO_SNDBUF"/>
        /// </summary>
        public static Java.Net.SocketOption SO_SNDBUF { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "SO_SNDBUF"); } }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/StandardSocketOptions.html#IP_MULTICAST_IF"/>
        /// </summary>
        public static Java.Net.SocketOption IP_MULTICAST_IF { get { return SGetField<Java.Net.SocketOption>(LocalBridgeClazz, "IP_MULTICAST_IF"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}