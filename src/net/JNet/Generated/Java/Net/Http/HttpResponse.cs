/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Net.Http
{
    #region HttpResponse
    public partial class HttpResponse
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#statusCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StatusCode()
        {
            return IExecuteWithSignature<int>("statusCode", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#version()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpClient.Version"/></returns>
        public Java.Net.Http.HttpClient.Version Version()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpClient.Version>("version", "()Ljava/net/http/HttpClient$Version;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#headers()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpHeaders"/></returns>
        public Java.Net.Http.HttpHeaders Headers()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpHeaders>("headers", "()Ljava/net/http/HttpHeaders;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#request()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpRequest"/></returns>
        public Java.Net.Http.HttpRequest Request()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpRequest>("request", "()Ljava/net/http/HttpRequest;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#uri()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.URI"/></returns>
        public Java.Net.URI Uri()
        {
            return IExecuteWithSignature<Java.Net.URI>("uri", "()Ljava/net/URI;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#previousResponse()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional PreviousResponse()
        {
            return IExecuteWithSignature<Java.Util.Optional>("previousResponse", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#sslSession()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional SslSession()
        {
            return IExecuteWithSignature<Java.Util.Optional>("sslSession", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#body()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object Body()
        {
            return IExecuteWithSignature("body", "()Ljava/lang/Object;");
        }

        #endregion

        #region Nested classes
        #region BodyHandler
        public partial class BodyHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandler.html#apply(java.net.http.HttpResponse.ResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpResponse.ResponseInfo"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public Java.Net.Http.HttpResponse.BodySubscriber Apply(Java.Net.Http.HttpResponse.ResponseInfo arg0)
            {
                return IExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber>("apply", "(Ljava/net/http/HttpResponse$ResponseInfo;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BodyHandler<T>
        public partial class BodyHandler<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Net.Http.HttpResponse.BodyHandler{T}"/> to <see cref="Java.Net.Http.HttpResponse.BodyHandler"/>
            /// </summary>
            public static implicit operator Java.Net.Http.HttpResponse.BodyHandler(Java.Net.Http.HttpResponse.BodyHandler<T> t) => t.Cast<Java.Net.Http.HttpResponse.BodyHandler>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandler.html#apply(java.net.http.HttpResponse.ResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpResponse.ResponseInfo"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public Java.Net.Http.HttpResponse.BodySubscriber<T> Apply(Java.Net.Http.HttpResponse.ResponseInfo arg0)
            {
                return IExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<T>>("apply", "(Ljava/net/http/HttpResponse$ResponseInfo;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BodyHandlers
        public partial class BodyHandlers
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#fromLineSubscriber(java.util.concurrent.Flow.Subscriber,java.util.function.Function,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="S"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <typeparam name="T"></typeparam>
            /// <typeparam name="S"></typeparam>
            /// <typeparam name="Arg1objectSuperS"><typeparamref name="S"/></typeparam>
            /// <typeparam name="Arg1ExtendsT"><typeparamref name="T"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<T> FromLineSubscriber<T, S, Arg1objectSuperS, Arg1ExtendsT>(S arg0, Java.Util.Function.Function<Arg1objectSuperS, Arg1ExtendsT> arg1, Java.Lang.String arg2) where Arg1objectSuperS: S where Arg1ExtendsT: T
            {
                return SExecute<Java.Net.Http.HttpResponse.BodyHandler<T>>(LocalBridgeClazz, "fromLineSubscriber", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#fromSubscriber(java.util.concurrent.Flow.Subscriber,java.util.function.Function)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="S"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
            /// <typeparam name="T"></typeparam>
            /// <typeparam name="S"></typeparam>
            /// <typeparam name="Arg1objectSuperS"><typeparamref name="S"/></typeparam>
            /// <typeparam name="Arg1ExtendsT"><typeparamref name="T"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<T> FromSubscriber<T, S, Arg1objectSuperS, Arg1ExtendsT>(S arg0, Java.Util.Function.Function<Arg1objectSuperS, Arg1ExtendsT> arg1) where Arg1objectSuperS: S where Arg1ExtendsT: T
            {
                return SExecute<Java.Net.Http.HttpResponse.BodyHandler<T>>(LocalBridgeClazz, "fromSubscriber", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#buffering(java.net.http.HttpResponse.BodyHandler,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <typeparam name="T"></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<T> Buffering<T>(Java.Net.Http.HttpResponse.BodyHandler<T> arg0, int arg1)
            {
                return SExecute<Java.Net.Http.HttpResponse.BodyHandler<T>>(LocalBridgeClazz, "buffering", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#replacing(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="U"/></param>
            /// <typeparam name="U"></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<U> Replacing<U>(U arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<U>>(LocalBridgeClazz, "replacing", "(Ljava/lang/Object;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofByteArray()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<byte[]> OfByteArray()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<byte[]>>(LocalBridgeClazz, "ofByteArray", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofInputStream()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Io.InputStream> OfInputStream()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Io.InputStream>>(LocalBridgeClazz, "ofInputStream", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofString()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.String> OfString()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.String>>(LocalBridgeClazz, "ofString", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofString(java.nio.charset.Charset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.Charset.Charset"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.String> OfString(Java.Nio.Charset.Charset arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.String>>(LocalBridgeClazz, "ofString", "(Ljava/nio/charset/Charset;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#discarding()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void> Discarding()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void>>(LocalBridgeClazz, "discarding", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#fromLineSubscriber(java.util.concurrent.Flow.Subscriber)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Flow.Subscriber"/></param>
            /// <typeparam name="Arg0objectSuperJava_Lang_String"><see cref="Java.Lang.String"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void> FromLineSubscriber<Arg0objectSuperJava_Lang_String>(Java.Util.Concurrent.Flow.Subscriber<Arg0objectSuperJava_Lang_String> arg0) where Arg0objectSuperJava_Lang_String: Java.Lang.String
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void>>(LocalBridgeClazz, "fromLineSubscriber", "(Ljava/util/concurrent/Flow$Subscriber;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#fromSubscriber(java.util.concurrent.Flow.Subscriber)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Flow.Subscriber"/></param>
            /// <typeparam name="Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_"><see cref="Java.Util.List{Java.Nio.ByteBuffer}"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void> FromSubscriber<Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_>(Java.Util.Concurrent.Flow.Subscriber<Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_> arg0) where Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_: Java.Util.List<Java.Nio.ByteBuffer>
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void>>(LocalBridgeClazz, "fromSubscriber", "(Ljava/util/concurrent/Flow$Subscriber;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofByteArrayConsumer(java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void> OfByteArrayConsumer(Java.Util.Function.Consumer<Java.Util.Optional<byte[]>> arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Lang.Void>>(LocalBridgeClazz, "ofByteArrayConsumer", "(Ljava/util/function/Consumer;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofFile(java.nio.file.Path,java.nio.file.OpenOption[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
            /// <param name="arg1"><see cref="Java.Nio.File.OpenOption"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path> OfFile(Java.Nio.File.Path arg0, params Java.Nio.File.OpenOption[] arg1)
            {
                if (arg1.Length == 0) return SExecute<Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", arg0); else return SExecute<Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofFile(java.nio.file.Path)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path> OfFile(Java.Nio.File.Path arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", "(Ljava/nio/file/Path;)Ljava/net/http/HttpResponse$BodyHandler;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofFileDownload(java.nio.file.Path,java.nio.file.OpenOption[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
            /// <param name="arg1"><see cref="Java.Nio.File.OpenOption"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path> OfFileDownload(Java.Nio.File.Path arg0, params Java.Nio.File.OpenOption[] arg1)
            {
                if (arg1.Length == 0) return SExecute<Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFileDownload", arg0); else return SExecute<Java.Net.Http.HttpResponse.BodyHandler<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFileDownload", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofPublisher()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Util.Concurrent.Flow.Publisher<Java.Util.List<Java.Nio.ByteBuffer>>> OfPublisher()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Util.Concurrent.Flow.Publisher<Java.Util.List<Java.Nio.ByteBuffer>>>>(LocalBridgeClazz, "ofPublisher", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofLines()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodyHandler"/></returns>
            public static Java.Net.Http.HttpResponse.BodyHandler<Java.Util.Stream.Stream<Java.Lang.String>> OfLines()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodyHandler<Java.Util.Stream.Stream<Java.Lang.String>>>(LocalBridgeClazz, "ofLines", "()Ljava/net/http/HttpResponse$BodyHandler;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BodySubscriber
        public partial class BodySubscriber
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscriber.html#getBody()"/> 
            /// </summary>
            public Java.Util.Concurrent.CompletionStage Body
            {
                get { return IExecuteWithSignature<Java.Util.Concurrent.CompletionStage>("getBody", "()Ljava/util/concurrent/CompletionStage;"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BodySubscriber<T>
        public partial class BodySubscriber<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Net.Http.HttpResponse.BodySubscriber{T}"/> to <see cref="Java.Net.Http.HttpResponse.BodySubscriber"/>
            /// </summary>
            public static implicit operator Java.Net.Http.HttpResponse.BodySubscriber(Java.Net.Http.HttpResponse.BodySubscriber<T> t) => t.Cast<Java.Net.Http.HttpResponse.BodySubscriber>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscriber.html#getBody()"/> 
            /// </summary>
            public Java.Util.Concurrent.CompletionStage<T> Body
            {
                get { return IExecuteWithSignature<Java.Util.Concurrent.CompletionStage<T>>("getBody", "()Ljava/util/concurrent/CompletionStage;"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BodySubscribers
        public partial class BodySubscribers
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#fromLineSubscriber(java.util.concurrent.Flow.Subscriber,java.util.function.Function,java.nio.charset.Charset,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="S"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
            /// <param name="arg2"><see cref="Java.Nio.Charset.Charset"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <typeparam name="T"></typeparam>
            /// <typeparam name="S"></typeparam>
            /// <typeparam name="Arg1objectSuperS"><typeparamref name="S"/></typeparam>
            /// <typeparam name="Arg1ExtendsT"><typeparamref name="T"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<T> FromLineSubscriber<T, S, Arg1objectSuperS, Arg1ExtendsT>(S arg0, Java.Util.Function.Function<Arg1objectSuperS, Arg1ExtendsT> arg1, Java.Nio.Charset.Charset arg2, Java.Lang.String arg3) where Arg1objectSuperS: S where Arg1ExtendsT: T
            {
                return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<T>>(LocalBridgeClazz, "fromLineSubscriber", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#fromSubscriber(java.util.concurrent.Flow.Subscriber,java.util.function.Function)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="S"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
            /// <typeparam name="T"></typeparam>
            /// <typeparam name="S"></typeparam>
            /// <typeparam name="Arg1objectSuperS"><typeparamref name="S"/></typeparam>
            /// <typeparam name="Arg1ExtendsT"><typeparamref name="T"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<T> FromSubscriber<T, S, Arg1objectSuperS, Arg1ExtendsT>(S arg0, Java.Util.Function.Function<Arg1objectSuperS, Arg1ExtendsT> arg1) where Arg1objectSuperS: S where Arg1ExtendsT: T
            {
                return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<T>>(LocalBridgeClazz, "fromSubscriber", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#mapping(java.net.http.HttpResponse.BodySubscriber,java.util.function.Function)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
            /// <typeparam name="U"></typeparam>
            /// <typeparam name="T"></typeparam>
            /// <typeparam name="Arg1objectSuperT"><typeparamref name="T"/></typeparam>
            /// <typeparam name="Arg1ExtendsU"><typeparamref name="U"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<U> Mapping<U, T, Arg1objectSuperT, Arg1ExtendsU>(Java.Net.Http.HttpResponse.BodySubscriber<T> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1) where Arg1objectSuperT: T where Arg1ExtendsU: U
            {
                return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<U>>(LocalBridgeClazz, "mapping", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#buffering(java.net.http.HttpResponse.BodySubscriber,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <typeparam name="T"></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<T> Buffering<T>(Java.Net.Http.HttpResponse.BodySubscriber<T> arg0, int arg1)
            {
                return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<T>>(LocalBridgeClazz, "buffering", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#replacing(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="U"/></param>
            /// <typeparam name="U"></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<U> Replacing<U>(U arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<U>>(LocalBridgeClazz, "replacing", "(Ljava/lang/Object;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofByteArray()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<byte[]> OfByteArray()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<byte[]>>(LocalBridgeClazz, "ofByteArray", "()Ljava/net/http/HttpResponse$BodySubscriber;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofInputStream()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Io.InputStream> OfInputStream()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Io.InputStream>>(LocalBridgeClazz, "ofInputStream", "()Ljava/net/http/HttpResponse$BodySubscriber;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofString(java.nio.charset.Charset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.Charset.Charset"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.String> OfString(Java.Nio.Charset.Charset arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.String>>(LocalBridgeClazz, "ofString", "(Ljava/nio/charset/Charset;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#discarding()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void> Discarding()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void>>(LocalBridgeClazz, "discarding", "()Ljava/net/http/HttpResponse$BodySubscriber;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#fromLineSubscriber(java.util.concurrent.Flow.Subscriber)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Flow.Subscriber"/></param>
            /// <typeparam name="Arg0objectSuperJava_Lang_String"><see cref="Java.Lang.String"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void> FromLineSubscriber<Arg0objectSuperJava_Lang_String>(Java.Util.Concurrent.Flow.Subscriber<Arg0objectSuperJava_Lang_String> arg0) where Arg0objectSuperJava_Lang_String: Java.Lang.String
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void>>(LocalBridgeClazz, "fromLineSubscriber", "(Ljava/util/concurrent/Flow$Subscriber;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#fromSubscriber(java.util.concurrent.Flow.Subscriber)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Flow.Subscriber"/></param>
            /// <typeparam name="Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_"><see cref="Java.Util.List{Java.Nio.ByteBuffer}"/></typeparam>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void> FromSubscriber<Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_>(Java.Util.Concurrent.Flow.Subscriber<Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_> arg0) where Arg0objectSuperJava_Util_List_Java_Nio_ByteBuffer_: Java.Util.List<Java.Nio.ByteBuffer>
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void>>(LocalBridgeClazz, "fromSubscriber", "(Ljava/util/concurrent/Flow$Subscriber;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofByteArrayConsumer(java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void> OfByteArrayConsumer(Java.Util.Function.Consumer<Java.Util.Optional<byte[]>> arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Lang.Void>>(LocalBridgeClazz, "ofByteArrayConsumer", "(Ljava/util/function/Consumer;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofFile(java.nio.file.Path,java.nio.file.OpenOption[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
            /// <param name="arg1"><see cref="Java.Nio.File.OpenOption"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Nio.File.Path> OfFile(Java.Nio.File.Path arg0, params Java.Nio.File.OpenOption[] arg1)
            {
                if (arg1.Length == 0) return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", arg0); else return SExecute<Java.Net.Http.HttpResponse.BodySubscriber<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofFile(java.nio.file.Path)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Nio.File.Path> OfFile(Java.Nio.File.Path arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Nio.File.Path>>(LocalBridgeClazz, "ofFile", "(Ljava/nio/file/Path;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofPublisher()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Util.Concurrent.Flow.Publisher<Java.Util.List<Java.Nio.ByteBuffer>>> OfPublisher()
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Util.Concurrent.Flow.Publisher<Java.Util.List<Java.Nio.ByteBuffer>>>>(LocalBridgeClazz, "ofPublisher", "()Ljava/net/http/HttpResponse$BodySubscriber;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html#ofLines(java.nio.charset.Charset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Nio.Charset.Charset"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.BodySubscriber"/></returns>
            public static Java.Net.Http.HttpResponse.BodySubscriber<Java.Util.Stream.Stream<Java.Lang.String>> OfLines(Java.Nio.Charset.Charset arg0)
            {
                return SExecuteWithSignature<Java.Net.Http.HttpResponse.BodySubscriber<Java.Util.Stream.Stream<Java.Lang.String>>>(LocalBridgeClazz, "ofLines", "(Ljava/nio/charset/Charset;)Ljava/net/http/HttpResponse$BodySubscriber;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PushPromiseHandler
        public partial class PushPromiseHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.PushPromiseHandler.html#of(java.util.function.Function,java.util.concurrent.ConcurrentMap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
            /// <param name="arg1"><see cref="Java.Util.Concurrent.ConcurrentMap"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.PushPromiseHandler"/></returns>
            public static Java.Net.Http.HttpResponse.PushPromiseHandler Of(Java.Util.Function.Function arg0, Java.Util.Concurrent.ConcurrentMap arg1)
            {
                return SExecute<Java.Net.Http.HttpResponse.PushPromiseHandler>(LocalBridgeClazz, "of", arg0, arg1);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.PushPromiseHandler.html#applyPushPromise(java.net.http.HttpRequest,java.net.http.HttpRequest,java.util.function.Function)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpRequest"/></param>
            /// <param name="arg1"><see cref="Java.Net.Http.HttpRequest"/></param>
            /// <param name="arg2"><see cref="Java.Util.Function.Function"/></param>
            public void ApplyPushPromise(Java.Net.Http.HttpRequest arg0, Java.Net.Http.HttpRequest arg1, Java.Util.Function.Function arg2)
            {
                IExecute("applyPushPromise", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PushPromiseHandler<T>
        public partial class PushPromiseHandler<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Net.Http.HttpResponse.PushPromiseHandler{T}"/> to <see cref="Java.Net.Http.HttpResponse.PushPromiseHandler"/>
            /// </summary>
            public static implicit operator Java.Net.Http.HttpResponse.PushPromiseHandler(Java.Net.Http.HttpResponse.PushPromiseHandler<T> t) => t.Cast<Java.Net.Http.HttpResponse.PushPromiseHandler>();

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.PushPromiseHandler.html#of(java.util.function.Function,java.util.concurrent.ConcurrentMap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
            /// <param name="arg1"><see cref="Java.Util.Concurrent.ConcurrentMap"/></param>
            /// <returns><see cref="Java.Net.Http.HttpResponse.PushPromiseHandler"/></returns>
            public static Java.Net.Http.HttpResponse.PushPromiseHandler<T> Of(Java.Util.Function.Function<Java.Net.Http.HttpRequest, Java.Net.Http.HttpResponse.BodyHandler<T>> arg0, Java.Util.Concurrent.ConcurrentMap<Java.Net.Http.HttpRequest, Java.Util.Concurrent.CompletableFuture<Java.Net.Http.HttpResponse<T>>> arg1)
            {
                return SExecute<Java.Net.Http.HttpResponse.PushPromiseHandler<T>>(LocalBridgeClazz, "of", arg0, arg1);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.PushPromiseHandler.html#applyPushPromise(java.net.http.HttpRequest,java.net.http.HttpRequest,java.util.function.Function)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.Http.HttpRequest"/></param>
            /// <param name="arg1"><see cref="Java.Net.Http.HttpRequest"/></param>
            /// <param name="arg2"><see cref="Java.Util.Function.Function"/></param>
            public void ApplyPushPromise(Java.Net.Http.HttpRequest arg0, Java.Net.Http.HttpRequest arg1, Java.Util.Function.Function<Java.Net.Http.HttpResponse.BodyHandler<T>, Java.Util.Concurrent.CompletableFuture<Java.Net.Http.HttpResponse<T>>> arg2)
            {
                IExecute("applyPushPromise", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResponseInfo
        public partial class ResponseInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.ResponseInfo.html#statusCode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int StatusCode()
            {
                return IExecuteWithSignature<int>("statusCode", "()I");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.ResponseInfo.html#version()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpClient.Version"/></returns>
            public Java.Net.Http.HttpClient.Version Version()
            {
                return IExecuteWithSignature<Java.Net.Http.HttpClient.Version>("version", "()Ljava/net/http/HttpClient$Version;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.ResponseInfo.html#headers()"/>
            /// </summary>
            /// <returns><see cref="Java.Net.Http.HttpHeaders"/></returns>
            public Java.Net.Http.HttpHeaders Headers()
            {
                return IExecuteWithSignature<Java.Net.Http.HttpHeaders>("headers", "()Ljava/net/http/HttpHeaders;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region IHttpResponse<T>
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IHttpResponse<T>
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#statusCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        int StatusCode();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#version()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpClient.Version"/></returns>
        Java.Net.Http.HttpClient.Version Version();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#headers()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpHeaders"/></returns>
        Java.Net.Http.HttpHeaders Headers();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#request()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpRequest"/></returns>
        Java.Net.Http.HttpRequest Request();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#uri()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.URI"/></returns>
        Java.Net.URI Uri();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#previousResponse()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        Java.Util.Optional<Java.Net.Http.HttpResponse<T>> PreviousResponse();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#sslSession()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        Java.Util.Optional<Javax.Net.Ssl.SSLSession> SslSession();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#body()"/>
        /// </summary>
        /// <returns><typeparamref name="T"/></returns>
        T Body();

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region HttpResponse<T>
    public partial class HttpResponse<T> : Java.Net.Http.IHttpResponse<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Net.Http.HttpResponse{T}"/> to <see cref="Java.Net.Http.HttpResponse"/>
        /// </summary>
        public static implicit operator Java.Net.Http.HttpResponse(Java.Net.Http.HttpResponse<T> t) => t.Cast<Java.Net.Http.HttpResponse>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#statusCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StatusCode()
        {
            return IExecuteWithSignature<int>("statusCode", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#version()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpClient.Version"/></returns>
        public Java.Net.Http.HttpClient.Version Version()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpClient.Version>("version", "()Ljava/net/http/HttpClient$Version;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#headers()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpHeaders"/></returns>
        public Java.Net.Http.HttpHeaders Headers()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpHeaders>("headers", "()Ljava/net/http/HttpHeaders;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#request()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.Http.HttpRequest"/></returns>
        public Java.Net.Http.HttpRequest Request()
        {
            return IExecuteWithSignature<Java.Net.Http.HttpRequest>("request", "()Ljava/net/http/HttpRequest;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#uri()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.URI"/></returns>
        public Java.Net.URI Uri()
        {
            return IExecuteWithSignature<Java.Net.URI>("uri", "()Ljava/net/URI;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#previousResponse()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Java.Net.Http.HttpResponse<T>> PreviousResponse()
        {
            return IExecuteWithSignature<Java.Util.Optional<Java.Net.Http.HttpResponse<T>>>("previousResponse", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#sslSession()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Javax.Net.Ssl.SSLSession> SslSession()
        {
            return IExecuteWithSignature<Java.Util.Optional<Javax.Net.Ssl.SSLSession>>("sslSession", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html#body()"/>
        /// </summary>
        /// <returns><typeparamref name="T"/></returns>
        public T Body()
        {
            return IExecuteWithSignature<T>("body", "()Ljava/lang/Object;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}