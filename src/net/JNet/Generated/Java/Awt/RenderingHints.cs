/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Awt
{
    #region RenderingHints declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html"/>
    /// </summary>
    public partial class RenderingHints : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RenderingHints>
    {
        const string _bridgeClassName = "java.awt.RenderingHints";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RenderingHints() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RenderingHints(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Key declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.Key.html"/>
        /// </summary>
        public partial class Key : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Key>
        {
            const string _bridgeClassName = "java.awt.RenderingHints$Key";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region RenderingHints implementation
    public partial class RenderingHints
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#%3Cinit%3E(java.awt.RenderingHints.Key,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.RenderingHints.Key"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public RenderingHints(Java.Awt.RenderingHints.Key arg0, object arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#%3Cinit%3E(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public RenderingHints(Java.Util.Map<Java.Awt.RenderingHints.Key, object> arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Awt.RenderingHints"/> to <see cref="Java.Util.Map"/>
        /// </summary>
        public static implicit operator Java.Util.Map(Java.Awt.RenderingHints t) => t.Cast<Java.Util.Map>();
        /// <summary>
        /// Converter from <see cref="Java.Awt.RenderingHints"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Java.Awt.RenderingHints t) => t.Cast<Java.Lang.Cloneable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_ALPHA_INTERPOLATION"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_ALPHA_INTERPOLATION { get { if (!_KEY_ALPHA_INTERPOLATIONReady) { _KEY_ALPHA_INTERPOLATIONContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_ALPHA_INTERPOLATION"); _KEY_ALPHA_INTERPOLATIONReady = true; } return _KEY_ALPHA_INTERPOLATIONContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_ALPHA_INTERPOLATIONContent = default;
        private static bool _KEY_ALPHA_INTERPOLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_ANTIALIASING"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_ANTIALIASING { get { if (!_KEY_ANTIALIASINGReady) { _KEY_ANTIALIASINGContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_ANTIALIASING"); _KEY_ANTIALIASINGReady = true; } return _KEY_ANTIALIASINGContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_ANTIALIASINGContent = default;
        private static bool _KEY_ANTIALIASINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_COLOR_RENDERING"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_COLOR_RENDERING { get { if (!_KEY_COLOR_RENDERINGReady) { _KEY_COLOR_RENDERINGContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_COLOR_RENDERING"); _KEY_COLOR_RENDERINGReady = true; } return _KEY_COLOR_RENDERINGContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_COLOR_RENDERINGContent = default;
        private static bool _KEY_COLOR_RENDERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_DITHERING"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_DITHERING { get { if (!_KEY_DITHERINGReady) { _KEY_DITHERINGContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_DITHERING"); _KEY_DITHERINGReady = true; } return _KEY_DITHERINGContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_DITHERINGContent = default;
        private static bool _KEY_DITHERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_FRACTIONALMETRICS"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_FRACTIONALMETRICS { get { if (!_KEY_FRACTIONALMETRICSReady) { _KEY_FRACTIONALMETRICSContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_FRACTIONALMETRICS"); _KEY_FRACTIONALMETRICSReady = true; } return _KEY_FRACTIONALMETRICSContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_FRACTIONALMETRICSContent = default;
        private static bool _KEY_FRACTIONALMETRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_INTERPOLATION"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_INTERPOLATION { get { if (!_KEY_INTERPOLATIONReady) { _KEY_INTERPOLATIONContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_INTERPOLATION"); _KEY_INTERPOLATIONReady = true; } return _KEY_INTERPOLATIONContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_INTERPOLATIONContent = default;
        private static bool _KEY_INTERPOLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_RENDERING"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_RENDERING { get { if (!_KEY_RENDERINGReady) { _KEY_RENDERINGContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_RENDERING"); _KEY_RENDERINGReady = true; } return _KEY_RENDERINGContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_RENDERINGContent = default;
        private static bool _KEY_RENDERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_RESOLUTION_VARIANT"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_RESOLUTION_VARIANT { get { if (!_KEY_RESOLUTION_VARIANTReady) { _KEY_RESOLUTION_VARIANTContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_RESOLUTION_VARIANT"); _KEY_RESOLUTION_VARIANTReady = true; } return _KEY_RESOLUTION_VARIANTContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_RESOLUTION_VARIANTContent = default;
        private static bool _KEY_RESOLUTION_VARIANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_STROKE_CONTROL"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_STROKE_CONTROL { get { if (!_KEY_STROKE_CONTROLReady) { _KEY_STROKE_CONTROLContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_STROKE_CONTROL"); _KEY_STROKE_CONTROLReady = true; } return _KEY_STROKE_CONTROLContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_STROKE_CONTROLContent = default;
        private static bool _KEY_STROKE_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_TEXT_ANTIALIASING"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_TEXT_ANTIALIASING { get { if (!_KEY_TEXT_ANTIALIASINGReady) { _KEY_TEXT_ANTIALIASINGContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_TEXT_ANTIALIASING"); _KEY_TEXT_ANTIALIASINGReady = true; } return _KEY_TEXT_ANTIALIASINGContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_TEXT_ANTIALIASINGContent = default;
        private static bool _KEY_TEXT_ANTIALIASINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#KEY_TEXT_LCD_CONTRAST"/>
        /// </summary>
        public static Java.Awt.RenderingHints.Key KEY_TEXT_LCD_CONTRAST { get { if (!_KEY_TEXT_LCD_CONTRASTReady) { _KEY_TEXT_LCD_CONTRASTContent = SGetField<Java.Awt.RenderingHints.Key>(LocalBridgeClazz, "KEY_TEXT_LCD_CONTRAST"); _KEY_TEXT_LCD_CONTRASTReady = true; } return _KEY_TEXT_LCD_CONTRASTContent; } }
        private static Java.Awt.RenderingHints.Key _KEY_TEXT_LCD_CONTRASTContent = default;
        private static bool _KEY_TEXT_LCD_CONTRASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_DEFAULT"/>
        /// </summary>
        public static object VALUE_ALPHA_INTERPOLATION_DEFAULT { get { if (!_VALUE_ALPHA_INTERPOLATION_DEFAULTReady) { _VALUE_ALPHA_INTERPOLATION_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_ALPHA_INTERPOLATION_DEFAULT"); _VALUE_ALPHA_INTERPOLATION_DEFAULTReady = true; } return _VALUE_ALPHA_INTERPOLATION_DEFAULTContent; } }
        private static object _VALUE_ALPHA_INTERPOLATION_DEFAULTContent = default;
        private static bool _VALUE_ALPHA_INTERPOLATION_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_QUALITY"/>
        /// </summary>
        public static object VALUE_ALPHA_INTERPOLATION_QUALITY { get { if (!_VALUE_ALPHA_INTERPOLATION_QUALITYReady) { _VALUE_ALPHA_INTERPOLATION_QUALITYContent = SGetField(LocalBridgeClazz, "VALUE_ALPHA_INTERPOLATION_QUALITY"); _VALUE_ALPHA_INTERPOLATION_QUALITYReady = true; } return _VALUE_ALPHA_INTERPOLATION_QUALITYContent; } }
        private static object _VALUE_ALPHA_INTERPOLATION_QUALITYContent = default;
        private static bool _VALUE_ALPHA_INTERPOLATION_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_SPEED"/>
        /// </summary>
        public static object VALUE_ALPHA_INTERPOLATION_SPEED { get { if (!_VALUE_ALPHA_INTERPOLATION_SPEEDReady) { _VALUE_ALPHA_INTERPOLATION_SPEEDContent = SGetField(LocalBridgeClazz, "VALUE_ALPHA_INTERPOLATION_SPEED"); _VALUE_ALPHA_INTERPOLATION_SPEEDReady = true; } return _VALUE_ALPHA_INTERPOLATION_SPEEDContent; } }
        private static object _VALUE_ALPHA_INTERPOLATION_SPEEDContent = default;
        private static bool _VALUE_ALPHA_INTERPOLATION_SPEEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ANTIALIAS_DEFAULT"/>
        /// </summary>
        public static object VALUE_ANTIALIAS_DEFAULT { get { if (!_VALUE_ANTIALIAS_DEFAULTReady) { _VALUE_ANTIALIAS_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_ANTIALIAS_DEFAULT"); _VALUE_ANTIALIAS_DEFAULTReady = true; } return _VALUE_ANTIALIAS_DEFAULTContent; } }
        private static object _VALUE_ANTIALIAS_DEFAULTContent = default;
        private static bool _VALUE_ANTIALIAS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ANTIALIAS_OFF"/>
        /// </summary>
        public static object VALUE_ANTIALIAS_OFF { get { if (!_VALUE_ANTIALIAS_OFFReady) { _VALUE_ANTIALIAS_OFFContent = SGetField(LocalBridgeClazz, "VALUE_ANTIALIAS_OFF"); _VALUE_ANTIALIAS_OFFReady = true; } return _VALUE_ANTIALIAS_OFFContent; } }
        private static object _VALUE_ANTIALIAS_OFFContent = default;
        private static bool _VALUE_ANTIALIAS_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_ANTIALIAS_ON"/>
        /// </summary>
        public static object VALUE_ANTIALIAS_ON { get { if (!_VALUE_ANTIALIAS_ONReady) { _VALUE_ANTIALIAS_ONContent = SGetField(LocalBridgeClazz, "VALUE_ANTIALIAS_ON"); _VALUE_ANTIALIAS_ONReady = true; } return _VALUE_ANTIALIAS_ONContent; } }
        private static object _VALUE_ANTIALIAS_ONContent = default;
        private static bool _VALUE_ANTIALIAS_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_COLOR_RENDER_DEFAULT"/>
        /// </summary>
        public static object VALUE_COLOR_RENDER_DEFAULT { get { if (!_VALUE_COLOR_RENDER_DEFAULTReady) { _VALUE_COLOR_RENDER_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_COLOR_RENDER_DEFAULT"); _VALUE_COLOR_RENDER_DEFAULTReady = true; } return _VALUE_COLOR_RENDER_DEFAULTContent; } }
        private static object _VALUE_COLOR_RENDER_DEFAULTContent = default;
        private static bool _VALUE_COLOR_RENDER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_COLOR_RENDER_QUALITY"/>
        /// </summary>
        public static object VALUE_COLOR_RENDER_QUALITY { get { if (!_VALUE_COLOR_RENDER_QUALITYReady) { _VALUE_COLOR_RENDER_QUALITYContent = SGetField(LocalBridgeClazz, "VALUE_COLOR_RENDER_QUALITY"); _VALUE_COLOR_RENDER_QUALITYReady = true; } return _VALUE_COLOR_RENDER_QUALITYContent; } }
        private static object _VALUE_COLOR_RENDER_QUALITYContent = default;
        private static bool _VALUE_COLOR_RENDER_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_COLOR_RENDER_SPEED"/>
        /// </summary>
        public static object VALUE_COLOR_RENDER_SPEED { get { if (!_VALUE_COLOR_RENDER_SPEEDReady) { _VALUE_COLOR_RENDER_SPEEDContent = SGetField(LocalBridgeClazz, "VALUE_COLOR_RENDER_SPEED"); _VALUE_COLOR_RENDER_SPEEDReady = true; } return _VALUE_COLOR_RENDER_SPEEDContent; } }
        private static object _VALUE_COLOR_RENDER_SPEEDContent = default;
        private static bool _VALUE_COLOR_RENDER_SPEEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_DITHER_DEFAULT"/>
        /// </summary>
        public static object VALUE_DITHER_DEFAULT { get { if (!_VALUE_DITHER_DEFAULTReady) { _VALUE_DITHER_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_DITHER_DEFAULT"); _VALUE_DITHER_DEFAULTReady = true; } return _VALUE_DITHER_DEFAULTContent; } }
        private static object _VALUE_DITHER_DEFAULTContent = default;
        private static bool _VALUE_DITHER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_DITHER_DISABLE"/>
        /// </summary>
        public static object VALUE_DITHER_DISABLE { get { if (!_VALUE_DITHER_DISABLEReady) { _VALUE_DITHER_DISABLEContent = SGetField(LocalBridgeClazz, "VALUE_DITHER_DISABLE"); _VALUE_DITHER_DISABLEReady = true; } return _VALUE_DITHER_DISABLEContent; } }
        private static object _VALUE_DITHER_DISABLEContent = default;
        private static bool _VALUE_DITHER_DISABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_DITHER_ENABLE"/>
        /// </summary>
        public static object VALUE_DITHER_ENABLE { get { if (!_VALUE_DITHER_ENABLEReady) { _VALUE_DITHER_ENABLEContent = SGetField(LocalBridgeClazz, "VALUE_DITHER_ENABLE"); _VALUE_DITHER_ENABLEReady = true; } return _VALUE_DITHER_ENABLEContent; } }
        private static object _VALUE_DITHER_ENABLEContent = default;
        private static bool _VALUE_DITHER_ENABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_DEFAULT"/>
        /// </summary>
        public static object VALUE_FRACTIONALMETRICS_DEFAULT { get { if (!_VALUE_FRACTIONALMETRICS_DEFAULTReady) { _VALUE_FRACTIONALMETRICS_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_FRACTIONALMETRICS_DEFAULT"); _VALUE_FRACTIONALMETRICS_DEFAULTReady = true; } return _VALUE_FRACTIONALMETRICS_DEFAULTContent; } }
        private static object _VALUE_FRACTIONALMETRICS_DEFAULTContent = default;
        private static bool _VALUE_FRACTIONALMETRICS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_OFF"/>
        /// </summary>
        public static object VALUE_FRACTIONALMETRICS_OFF { get { if (!_VALUE_FRACTIONALMETRICS_OFFReady) { _VALUE_FRACTIONALMETRICS_OFFContent = SGetField(LocalBridgeClazz, "VALUE_FRACTIONALMETRICS_OFF"); _VALUE_FRACTIONALMETRICS_OFFReady = true; } return _VALUE_FRACTIONALMETRICS_OFFContent; } }
        private static object _VALUE_FRACTIONALMETRICS_OFFContent = default;
        private static bool _VALUE_FRACTIONALMETRICS_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_ON"/>
        /// </summary>
        public static object VALUE_FRACTIONALMETRICS_ON { get { if (!_VALUE_FRACTIONALMETRICS_ONReady) { _VALUE_FRACTIONALMETRICS_ONContent = SGetField(LocalBridgeClazz, "VALUE_FRACTIONALMETRICS_ON"); _VALUE_FRACTIONALMETRICS_ONReady = true; } return _VALUE_FRACTIONALMETRICS_ONContent; } }
        private static object _VALUE_FRACTIONALMETRICS_ONContent = default;
        private static bool _VALUE_FRACTIONALMETRICS_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_INTERPOLATION_BICUBIC"/>
        /// </summary>
        public static object VALUE_INTERPOLATION_BICUBIC { get { if (!_VALUE_INTERPOLATION_BICUBICReady) { _VALUE_INTERPOLATION_BICUBICContent = SGetField(LocalBridgeClazz, "VALUE_INTERPOLATION_BICUBIC"); _VALUE_INTERPOLATION_BICUBICReady = true; } return _VALUE_INTERPOLATION_BICUBICContent; } }
        private static object _VALUE_INTERPOLATION_BICUBICContent = default;
        private static bool _VALUE_INTERPOLATION_BICUBICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_INTERPOLATION_BILINEAR"/>
        /// </summary>
        public static object VALUE_INTERPOLATION_BILINEAR { get { if (!_VALUE_INTERPOLATION_BILINEARReady) { _VALUE_INTERPOLATION_BILINEARContent = SGetField(LocalBridgeClazz, "VALUE_INTERPOLATION_BILINEAR"); _VALUE_INTERPOLATION_BILINEARReady = true; } return _VALUE_INTERPOLATION_BILINEARContent; } }
        private static object _VALUE_INTERPOLATION_BILINEARContent = default;
        private static bool _VALUE_INTERPOLATION_BILINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_INTERPOLATION_NEAREST_NEIGHBOR"/>
        /// </summary>
        public static object VALUE_INTERPOLATION_NEAREST_NEIGHBOR { get { if (!_VALUE_INTERPOLATION_NEAREST_NEIGHBORReady) { _VALUE_INTERPOLATION_NEAREST_NEIGHBORContent = SGetField(LocalBridgeClazz, "VALUE_INTERPOLATION_NEAREST_NEIGHBOR"); _VALUE_INTERPOLATION_NEAREST_NEIGHBORReady = true; } return _VALUE_INTERPOLATION_NEAREST_NEIGHBORContent; } }
        private static object _VALUE_INTERPOLATION_NEAREST_NEIGHBORContent = default;
        private static bool _VALUE_INTERPOLATION_NEAREST_NEIGHBORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RENDER_DEFAULT"/>
        /// </summary>
        public static object VALUE_RENDER_DEFAULT { get { if (!_VALUE_RENDER_DEFAULTReady) { _VALUE_RENDER_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_RENDER_DEFAULT"); _VALUE_RENDER_DEFAULTReady = true; } return _VALUE_RENDER_DEFAULTContent; } }
        private static object _VALUE_RENDER_DEFAULTContent = default;
        private static bool _VALUE_RENDER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RENDER_QUALITY"/>
        /// </summary>
        public static object VALUE_RENDER_QUALITY { get { if (!_VALUE_RENDER_QUALITYReady) { _VALUE_RENDER_QUALITYContent = SGetField(LocalBridgeClazz, "VALUE_RENDER_QUALITY"); _VALUE_RENDER_QUALITYReady = true; } return _VALUE_RENDER_QUALITYContent; } }
        private static object _VALUE_RENDER_QUALITYContent = default;
        private static bool _VALUE_RENDER_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RENDER_SPEED"/>
        /// </summary>
        public static object VALUE_RENDER_SPEED { get { if (!_VALUE_RENDER_SPEEDReady) { _VALUE_RENDER_SPEEDContent = SGetField(LocalBridgeClazz, "VALUE_RENDER_SPEED"); _VALUE_RENDER_SPEEDReady = true; } return _VALUE_RENDER_SPEEDContent; } }
        private static object _VALUE_RENDER_SPEEDContent = default;
        private static bool _VALUE_RENDER_SPEEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RESOLUTION_VARIANT_BASE"/>
        /// </summary>
        public static object VALUE_RESOLUTION_VARIANT_BASE { get { if (!_VALUE_RESOLUTION_VARIANT_BASEReady) { _VALUE_RESOLUTION_VARIANT_BASEContent = SGetField(LocalBridgeClazz, "VALUE_RESOLUTION_VARIANT_BASE"); _VALUE_RESOLUTION_VARIANT_BASEReady = true; } return _VALUE_RESOLUTION_VARIANT_BASEContent; } }
        private static object _VALUE_RESOLUTION_VARIANT_BASEContent = default;
        private static bool _VALUE_RESOLUTION_VARIANT_BASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RESOLUTION_VARIANT_DEFAULT"/>
        /// </summary>
        public static object VALUE_RESOLUTION_VARIANT_DEFAULT { get { if (!_VALUE_RESOLUTION_VARIANT_DEFAULTReady) { _VALUE_RESOLUTION_VARIANT_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_RESOLUTION_VARIANT_DEFAULT"); _VALUE_RESOLUTION_VARIANT_DEFAULTReady = true; } return _VALUE_RESOLUTION_VARIANT_DEFAULTContent; } }
        private static object _VALUE_RESOLUTION_VARIANT_DEFAULTContent = default;
        private static bool _VALUE_RESOLUTION_VARIANT_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RESOLUTION_VARIANT_DPI_FIT"/>
        /// </summary>
        public static object VALUE_RESOLUTION_VARIANT_DPI_FIT { get { if (!_VALUE_RESOLUTION_VARIANT_DPI_FITReady) { _VALUE_RESOLUTION_VARIANT_DPI_FITContent = SGetField(LocalBridgeClazz, "VALUE_RESOLUTION_VARIANT_DPI_FIT"); _VALUE_RESOLUTION_VARIANT_DPI_FITReady = true; } return _VALUE_RESOLUTION_VARIANT_DPI_FITContent; } }
        private static object _VALUE_RESOLUTION_VARIANT_DPI_FITContent = default;
        private static bool _VALUE_RESOLUTION_VARIANT_DPI_FITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_RESOLUTION_VARIANT_SIZE_FIT"/>
        /// </summary>
        public static object VALUE_RESOLUTION_VARIANT_SIZE_FIT { get { if (!_VALUE_RESOLUTION_VARIANT_SIZE_FITReady) { _VALUE_RESOLUTION_VARIANT_SIZE_FITContent = SGetField(LocalBridgeClazz, "VALUE_RESOLUTION_VARIANT_SIZE_FIT"); _VALUE_RESOLUTION_VARIANT_SIZE_FITReady = true; } return _VALUE_RESOLUTION_VARIANT_SIZE_FITContent; } }
        private static object _VALUE_RESOLUTION_VARIANT_SIZE_FITContent = default;
        private static bool _VALUE_RESOLUTION_VARIANT_SIZE_FITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_STROKE_DEFAULT"/>
        /// </summary>
        public static object VALUE_STROKE_DEFAULT { get { if (!_VALUE_STROKE_DEFAULTReady) { _VALUE_STROKE_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_STROKE_DEFAULT"); _VALUE_STROKE_DEFAULTReady = true; } return _VALUE_STROKE_DEFAULTContent; } }
        private static object _VALUE_STROKE_DEFAULTContent = default;
        private static bool _VALUE_STROKE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_STROKE_NORMALIZE"/>
        /// </summary>
        public static object VALUE_STROKE_NORMALIZE { get { if (!_VALUE_STROKE_NORMALIZEReady) { _VALUE_STROKE_NORMALIZEContent = SGetField(LocalBridgeClazz, "VALUE_STROKE_NORMALIZE"); _VALUE_STROKE_NORMALIZEReady = true; } return _VALUE_STROKE_NORMALIZEContent; } }
        private static object _VALUE_STROKE_NORMALIZEContent = default;
        private static bool _VALUE_STROKE_NORMALIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_STROKE_PURE"/>
        /// </summary>
        public static object VALUE_STROKE_PURE { get { if (!_VALUE_STROKE_PUREReady) { _VALUE_STROKE_PUREContent = SGetField(LocalBridgeClazz, "VALUE_STROKE_PURE"); _VALUE_STROKE_PUREReady = true; } return _VALUE_STROKE_PUREContent; } }
        private static object _VALUE_STROKE_PUREContent = default;
        private static bool _VALUE_STROKE_PUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_DEFAULT"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_DEFAULT { get { if (!_VALUE_TEXT_ANTIALIAS_DEFAULTReady) { _VALUE_TEXT_ANTIALIAS_DEFAULTContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_DEFAULT"); _VALUE_TEXT_ANTIALIAS_DEFAULTReady = true; } return _VALUE_TEXT_ANTIALIAS_DEFAULTContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_DEFAULTContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_GASP"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_GASP { get { if (!_VALUE_TEXT_ANTIALIAS_GASPReady) { _VALUE_TEXT_ANTIALIAS_GASPContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_GASP"); _VALUE_TEXT_ANTIALIAS_GASPReady = true; } return _VALUE_TEXT_ANTIALIAS_GASPContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_GASPContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_GASPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_LCD_HBGR"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_LCD_HBGR { get { if (!_VALUE_TEXT_ANTIALIAS_LCD_HBGRReady) { _VALUE_TEXT_ANTIALIAS_LCD_HBGRContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_LCD_HBGR"); _VALUE_TEXT_ANTIALIAS_LCD_HBGRReady = true; } return _VALUE_TEXT_ANTIALIAS_LCD_HBGRContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_LCD_HBGRContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_LCD_HBGRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_LCD_HRGB"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_LCD_HRGB { get { if (!_VALUE_TEXT_ANTIALIAS_LCD_HRGBReady) { _VALUE_TEXT_ANTIALIAS_LCD_HRGBContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_LCD_HRGB"); _VALUE_TEXT_ANTIALIAS_LCD_HRGBReady = true; } return _VALUE_TEXT_ANTIALIAS_LCD_HRGBContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_LCD_HRGBContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_LCD_HRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_LCD_VBGR"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_LCD_VBGR { get { if (!_VALUE_TEXT_ANTIALIAS_LCD_VBGRReady) { _VALUE_TEXT_ANTIALIAS_LCD_VBGRContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_LCD_VBGR"); _VALUE_TEXT_ANTIALIAS_LCD_VBGRReady = true; } return _VALUE_TEXT_ANTIALIAS_LCD_VBGRContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_LCD_VBGRContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_LCD_VBGRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_LCD_VRGB"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_LCD_VRGB { get { if (!_VALUE_TEXT_ANTIALIAS_LCD_VRGBReady) { _VALUE_TEXT_ANTIALIAS_LCD_VRGBContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_LCD_VRGB"); _VALUE_TEXT_ANTIALIAS_LCD_VRGBReady = true; } return _VALUE_TEXT_ANTIALIAS_LCD_VRGBContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_LCD_VRGBContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_LCD_VRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_OFF"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_OFF { get { if (!_VALUE_TEXT_ANTIALIAS_OFFReady) { _VALUE_TEXT_ANTIALIAS_OFFContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_OFF"); _VALUE_TEXT_ANTIALIAS_OFFReady = true; } return _VALUE_TEXT_ANTIALIAS_OFFContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_OFFContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_ON"/>
        /// </summary>
        public static object VALUE_TEXT_ANTIALIAS_ON { get { if (!_VALUE_TEXT_ANTIALIAS_ONReady) { _VALUE_TEXT_ANTIALIAS_ONContent = SGetField(LocalBridgeClazz, "VALUE_TEXT_ANTIALIAS_ON"); _VALUE_TEXT_ANTIALIAS_ONReady = true; } return _VALUE_TEXT_ANTIALIAS_ONContent; } }
        private static object _VALUE_TEXT_ANTIALIAS_ONContent = default;
        private static bool _VALUE_TEXT_ANTIALIAS_ONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#containsKey(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ContainsKey(object arg0)
        {
            return IExecuteWithSignature<bool>("containsKey", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#containsValue(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ContainsValue(object arg0)
        {
            return IExecuteWithSignature<bool>("containsValue", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#size()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Get(object arg0)
        {
            return IExecuteWithSignature("get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Put(object arg0, object arg1)
        {
            return IExecuteWithSignature("put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Remove(object arg0)
        {
            return IExecuteWithSignature("remove", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#values()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<object> Values()
        {
            return IExecuteWithSignature<Java.Util.Collection<object>>("values", "()Ljava/util/Collection;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#keySet()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<object> KeySet()
        {
            return IExecuteWithSignature<Java.Util.Set<object>>("keySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#entrySet()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Util.Map.Entry<object, object>> EntrySet()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Util.Map.Entry<object, object>>>("entrySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#add(java.awt.RenderingHints)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.RenderingHints"/></param>
        public void Add(Java.Awt.RenderingHints arg0)
        {
            IExecuteWithSignature("add", "(Ljava/awt/RenderingHints;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public void PutAll(Java.Util.Map<object, object> arg0)
        {
            IExecuteWithSignature("putAll", "(Ljava/util/Map;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Key implementation
        public partial class Key
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/RenderingHints.Key.html#isCompatibleValue(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsCompatibleValue(object arg0)
            {
                return IExecuteWithSignature<bool>("isCompatibleValue", "(Ljava/lang/Object;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}