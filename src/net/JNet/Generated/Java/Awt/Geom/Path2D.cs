/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Awt.Geom
{
    #region Path2D
    public partial class Path2D
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        public static implicit operator Java.Awt.Shape(Java.Awt.Geom.Path2D t) => t.Cast<Java.Awt.Shape>();
        public static implicit operator Java.Lang.Cloneable(Java.Awt.Geom.Path2D t) => t.Cast<Java.Lang.Cloneable>();
        
        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_EVEN_ODD
        /// </summary>
        public static int WIND_EVEN_ODD => Clazz.GetField<int>("WIND_EVEN_ODD");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_NON_ZERO
        /// </summary>
        public static int WIND_NON_ZERO => Clazz.GetField<int>("WIND_NON_ZERO");
        
        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.PathIterator,double,double,double,double)
        /// </summary>
        public static bool Contains(Java.Awt.Geom.PathIterator arg0, double arg1, double arg2, double arg3, double arg4)
        {
            return SExecute<bool>("contains", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.PathIterator,double,double)
        /// </summary>
        public static bool Contains(Java.Awt.Geom.PathIterator arg0, double arg1, double arg2)
        {
            return SExecute<bool>("contains", arg0, arg1, arg2);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.PathIterator,java.awt.geom.Point2D)
        /// </summary>
        public static bool Contains(Java.Awt.Geom.PathIterator arg0, Java.Awt.Geom.Point2D arg1)
        {
            return SExecute<bool>("contains", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)
        /// </summary>
        public static bool Contains(Java.Awt.Geom.PathIterator arg0, Java.Awt.Geom.Rectangle2D arg1)
        {
            return SExecute<bool>("contains", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#intersects(java.awt.geom.PathIterator,double,double,double,double)
        /// </summary>
        public static bool Intersects(Java.Awt.Geom.PathIterator arg0, double arg1, double arg2, double arg3, double arg4)
        {
            return SExecute<bool>("intersects", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#intersects(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)
        /// </summary>
        public static bool Intersects(Java.Awt.Geom.PathIterator arg0, Java.Awt.Geom.Rectangle2D arg1)
        {
            return SExecute<bool>("intersects", arg0, arg1);
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#getBounds() 
        /// </summary>
        public Java.Awt.Rectangle Bounds
        {
            get { return IExecute<Java.Awt.Rectangle>("getBounds"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#getCurrentPoint() 
        /// </summary>
        public Java.Awt.Geom.Point2D CurrentPoint
        {
            get { return IExecute<Java.Awt.Geom.Point2D>("getCurrentPoint"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#getWindingRule() https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#setWindingRule(int)
        /// </summary>
        public int WindingRule
        {
            get { return IExecute<int>("getWindingRule"); } set { IExecute("setWindingRule", value); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#append(java.awt.geom.PathIterator,boolean)
        /// </summary>
        public void Append(Java.Awt.Geom.PathIterator arg0, bool arg1)
        {
            IExecute("append", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#curveTo(double,double,double,double,double,double)
        /// </summary>
        public void CurveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)
        {
            IExecute("curveTo", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#lineTo(double,double)
        /// </summary>
        public void LineTo(double arg0, double arg1)
        {
            IExecute("lineTo", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#moveTo(double,double)
        /// </summary>
        public void MoveTo(double arg0, double arg1)
        {
            IExecute("moveTo", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#quadTo(double,double,double,double)
        /// </summary>
        public void QuadTo(double arg0, double arg1, double arg2, double arg3)
        {
            IExecute("quadTo", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#transform(java.awt.geom.AffineTransform)
        /// </summary>
        public void Transform(Java.Awt.Geom.AffineTransform arg0)
        {
            IExecute("transform", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#trimToSize()
        /// </summary>
        public void TrimToSize()
        {
            IExecute("trimToSize");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(double,double,double,double)
        /// </summary>
        public bool Contains(double arg0, double arg1, double arg2, double arg3)
        {
            return IExecute<bool>("contains", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(double,double)
        /// </summary>
        public bool Contains(double arg0, double arg1)
        {
            return IExecute<bool>("contains", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.Point2D)
        /// </summary>
        public bool Contains(Java.Awt.Geom.Point2D arg0)
        {
            return IExecute<bool>("contains", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#contains(java.awt.geom.Rectangle2D)
        /// </summary>
        public bool Contains(Java.Awt.Geom.Rectangle2D arg0)
        {
            return IExecute<bool>("contains", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#intersects(double,double,double,double)
        /// </summary>
        public bool Intersects(double arg0, double arg1, double arg2, double arg3)
        {
            return IExecute<bool>("intersects", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#intersects(java.awt.geom.Rectangle2D)
        /// </summary>
        public bool Intersects(Java.Awt.Geom.Rectangle2D arg0)
        {
            return IExecute<bool>("intersects", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#getPathIterator(java.awt.geom.AffineTransform,double)
        /// </summary>
        public Java.Awt.Geom.PathIterator GetPathIterator(Java.Awt.Geom.AffineTransform arg0, double arg1)
        {
            return IExecute<Java.Awt.Geom.PathIterator>("getPathIterator", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#createTransformedShape(java.awt.geom.AffineTransform)
        /// </summary>
        public Java.Awt.Shape CreateTransformedShape(Java.Awt.Geom.AffineTransform arg0)
        {
            return IExecute<Java.Awt.Shape>("createTransformedShape", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#closePath()
        /// </summary>
        public void ClosePath()
        {
            IExecute("closePath");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#reset()
        /// </summary>
        public void Reset()
        {
            IExecute("reset");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.html#append(java.awt.Shape,boolean)
        /// </summary>
        public void Append(Java.Awt.Shape arg0, bool arg1)
        {
            IExecute("append", arg0, arg1);
        }
        
        #endregion

        #region Nested classes
        #region Double
        public partial class Double
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Double.html#<init>(int,int)
            /// </summary>
            public Double(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Double.html#<init>(int)
            /// </summary>
            public Double(int arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Double.html#<init>(java.awt.Shape,java.awt.geom.AffineTransform)
            /// </summary>
            public Double(Java.Awt.Shape arg0, Java.Awt.Geom.AffineTransform arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Double.html#<init>(java.awt.Shape)
            /// </summary>
            public Double(Java.Awt.Shape arg0)
                : base(arg0)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Java.Io.Serializable(Java.Awt.Geom.Path2D.Double t) => t.Cast<Java.Io.Serializable>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Float
        public partial class Float
        {
            #region Constructors
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#<init>(int,int)
            /// </summary>
            public Float(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#<init>(int)
            /// </summary>
            public Float(int arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#<init>(java.awt.Shape,java.awt.geom.AffineTransform)
            /// </summary>
            public Float(Java.Awt.Shape arg0, Java.Awt.Geom.AffineTransform arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#<init>(java.awt.Shape)
            /// </summary>
            public Float(Java.Awt.Shape arg0)
                : base(arg0)
            {
            }
            
            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Java.Io.Serializable(Java.Awt.Geom.Path2D.Float t) => t.Cast<Java.Io.Serializable>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#curveTo(float,float,float,float,float,float)
            /// </summary>
            public void CurveTo(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
            {
                IExecute("curveTo", arg0, arg1, arg2, arg3, arg4, arg5);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#lineTo(float,float)
            /// </summary>
            public void LineTo(float arg0, float arg1)
            {
                IExecute("lineTo", arg0, arg1);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#moveTo(float,float)
            /// </summary>
            public void MoveTo(float arg0, float arg1)
            {
                IExecute("moveTo", arg0, arg1);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Path2D.Float.html#quadTo(float,float,float,float)
            /// </summary>
            public void QuadTo(float arg0, float arg1, float arg2, float arg3)
            {
                IExecute("quadTo", arg0, arg1, arg2, arg3);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}