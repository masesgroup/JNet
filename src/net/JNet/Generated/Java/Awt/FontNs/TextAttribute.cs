/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.3.0.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Awt.FontNs
{
    #region TextAttribute
    public partial class TextAttribute
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#BACKGROUND"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute BACKGROUND { get { if (!_BACKGROUNDReady) { _BACKGROUNDContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "BACKGROUND"); _BACKGROUNDReady = true; } return _BACKGROUNDContent; } }
        private static Java.Awt.FontNs.TextAttribute _BACKGROUNDContent = default;
        private static bool _BACKGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#BIDI_EMBEDDING"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute BIDI_EMBEDDING { get { if (!_BIDI_EMBEDDINGReady) { _BIDI_EMBEDDINGContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "BIDI_EMBEDDING"); _BIDI_EMBEDDINGReady = true; } return _BIDI_EMBEDDINGContent; } }
        private static Java.Awt.FontNs.TextAttribute _BIDI_EMBEDDINGContent = default;
        private static bool _BIDI_EMBEDDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#CHAR_REPLACEMENT"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute CHAR_REPLACEMENT { get { if (!_CHAR_REPLACEMENTReady) { _CHAR_REPLACEMENTContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "CHAR_REPLACEMENT"); _CHAR_REPLACEMENTReady = true; } return _CHAR_REPLACEMENTContent; } }
        private static Java.Awt.FontNs.TextAttribute _CHAR_REPLACEMENTContent = default;
        private static bool _CHAR_REPLACEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#FAMILY"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute FAMILY { get { if (!_FAMILYReady) { _FAMILYContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "FAMILY"); _FAMILYReady = true; } return _FAMILYContent; } }
        private static Java.Awt.FontNs.TextAttribute _FAMILYContent = default;
        private static bool _FAMILYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#FONT"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute FONT { get { if (!_FONTReady) { _FONTContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "FONT"); _FONTReady = true; } return _FONTContent; } }
        private static Java.Awt.FontNs.TextAttribute _FONTContent = default;
        private static bool _FONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#FOREGROUND"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute FOREGROUND { get { if (!_FOREGROUNDReady) { _FOREGROUNDContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "FOREGROUND"); _FOREGROUNDReady = true; } return _FOREGROUNDContent; } }
        private static Java.Awt.FontNs.TextAttribute _FOREGROUNDContent = default;
        private static bool _FOREGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_HIGHLIGHT"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute INPUT_METHOD_HIGHLIGHT { get { if (!_INPUT_METHOD_HIGHLIGHTReady) { _INPUT_METHOD_HIGHLIGHTContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "INPUT_METHOD_HIGHLIGHT"); _INPUT_METHOD_HIGHLIGHTReady = true; } return _INPUT_METHOD_HIGHLIGHTContent; } }
        private static Java.Awt.FontNs.TextAttribute _INPUT_METHOD_HIGHLIGHTContent = default;
        private static bool _INPUT_METHOD_HIGHLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute INPUT_METHOD_UNDERLINE { get { if (!_INPUT_METHOD_UNDERLINEReady) { _INPUT_METHOD_UNDERLINEContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "INPUT_METHOD_UNDERLINE"); _INPUT_METHOD_UNDERLINEReady = true; } return _INPUT_METHOD_UNDERLINEContent; } }
        private static Java.Awt.FontNs.TextAttribute _INPUT_METHOD_UNDERLINEContent = default;
        private static bool _INPUT_METHOD_UNDERLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#JUSTIFICATION"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute JUSTIFICATION { get { if (!_JUSTIFICATIONReady) { _JUSTIFICATIONContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "JUSTIFICATION"); _JUSTIFICATIONReady = true; } return _JUSTIFICATIONContent; } }
        private static Java.Awt.FontNs.TextAttribute _JUSTIFICATIONContent = default;
        private static bool _JUSTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#KERNING"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute KERNING { get { if (!_KERNINGReady) { _KERNINGContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "KERNING"); _KERNINGReady = true; } return _KERNINGContent; } }
        private static Java.Awt.FontNs.TextAttribute _KERNINGContent = default;
        private static bool _KERNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#LIGATURES"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute LIGATURES { get { if (!_LIGATURESReady) { _LIGATURESContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "LIGATURES"); _LIGATURESReady = true; } return _LIGATURESContent; } }
        private static Java.Awt.FontNs.TextAttribute _LIGATURESContent = default;
        private static bool _LIGATURESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#NUMERIC_SHAPING"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute NUMERIC_SHAPING { get { if (!_NUMERIC_SHAPINGReady) { _NUMERIC_SHAPINGContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "NUMERIC_SHAPING"); _NUMERIC_SHAPINGReady = true; } return _NUMERIC_SHAPINGContent; } }
        private static Java.Awt.FontNs.TextAttribute _NUMERIC_SHAPINGContent = default;
        private static bool _NUMERIC_SHAPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute POSTURE { get { if (!_POSTUREReady) { _POSTUREContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "POSTURE"); _POSTUREReady = true; } return _POSTUREContent; } }
        private static Java.Awt.FontNs.TextAttribute _POSTUREContent = default;
        private static bool _POSTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute RUN_DIRECTION { get { if (!_RUN_DIRECTIONReady) { _RUN_DIRECTIONContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "RUN_DIRECTION"); _RUN_DIRECTIONReady = true; } return _RUN_DIRECTIONContent; } }
        private static Java.Awt.FontNs.TextAttribute _RUN_DIRECTIONContent = default;
        private static bool _RUN_DIRECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SIZE"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
        private static Java.Awt.FontNs.TextAttribute _SIZEContent = default;
        private static bool _SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#STRIKETHROUGH"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute STRIKETHROUGH { get { if (!_STRIKETHROUGHReady) { _STRIKETHROUGHContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "STRIKETHROUGH"); _STRIKETHROUGHReady = true; } return _STRIKETHROUGHContent; } }
        private static Java.Awt.FontNs.TextAttribute _STRIKETHROUGHContent = default;
        private static bool _STRIKETHROUGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SUPERSCRIPT"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute SUPERSCRIPT { get { if (!_SUPERSCRIPTReady) { _SUPERSCRIPTContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "SUPERSCRIPT"); _SUPERSCRIPTReady = true; } return _SUPERSCRIPTContent; } }
        private static Java.Awt.FontNs.TextAttribute _SUPERSCRIPTContent = default;
        private static bool _SUPERSCRIPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SWAP_COLORS"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute SWAP_COLORS { get { if (!_SWAP_COLORSReady) { _SWAP_COLORSContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "SWAP_COLORS"); _SWAP_COLORSReady = true; } return _SWAP_COLORSContent; } }
        private static Java.Awt.FontNs.TextAttribute _SWAP_COLORSContent = default;
        private static bool _SWAP_COLORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRACKING"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute TRACKING { get { if (!_TRACKINGReady) { _TRACKINGContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "TRACKING"); _TRACKINGReady = true; } return _TRACKINGContent; } }
        private static Java.Awt.FontNs.TextAttribute _TRACKINGContent = default;
        private static bool _TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRANSFORM"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute TRANSFORM { get { if (!_TRANSFORMReady) { _TRANSFORMContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "TRANSFORM"); _TRANSFORMReady = true; } return _TRANSFORMContent; } }
        private static Java.Awt.FontNs.TextAttribute _TRANSFORMContent = default;
        private static bool _TRANSFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute UNDERLINE { get { if (!_UNDERLINEReady) { _UNDERLINEContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "UNDERLINE"); _UNDERLINEReady = true; } return _UNDERLINEContent; } }
        private static Java.Awt.FontNs.TextAttribute _UNDERLINEContent = default;
        private static bool _UNDERLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute WEIGHT { get { if (!_WEIGHTReady) { _WEIGHTContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "WEIGHT"); _WEIGHTReady = true; } return _WEIGHTContent; } }
        private static Java.Awt.FontNs.TextAttribute _WEIGHTContent = default;
        private static bool _WEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH"/>
        /// </summary>
        public static Java.Awt.FontNs.TextAttribute WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Awt.FontNs.TextAttribute>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
        private static Java.Awt.FontNs.TextAttribute _WIDTHContent = default;
        private static bool _WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION_LTR"/>
        /// </summary>
        public static Java.Lang.Boolean RUN_DIRECTION_LTR { get { if (!_RUN_DIRECTION_LTRReady) { _RUN_DIRECTION_LTRContent = SGetField<Java.Lang.Boolean>(LocalBridgeClazz, "RUN_DIRECTION_LTR"); _RUN_DIRECTION_LTRReady = true; } return _RUN_DIRECTION_LTRContent; } }
        private static Java.Lang.Boolean _RUN_DIRECTION_LTRContent = default;
        private static bool _RUN_DIRECTION_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION_RTL"/>
        /// </summary>
        public static Java.Lang.Boolean RUN_DIRECTION_RTL { get { if (!_RUN_DIRECTION_RTLReady) { _RUN_DIRECTION_RTLContent = SGetField<Java.Lang.Boolean>(LocalBridgeClazz, "RUN_DIRECTION_RTL"); _RUN_DIRECTION_RTLReady = true; } return _RUN_DIRECTION_RTLContent; } }
        private static Java.Lang.Boolean _RUN_DIRECTION_RTLContent = default;
        private static bool _RUN_DIRECTION_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#STRIKETHROUGH_ON"/>
        /// </summary>
        public static Java.Lang.Boolean STRIKETHROUGH_ON { get { if (!_STRIKETHROUGH_ONReady) { _STRIKETHROUGH_ONContent = SGetField<Java.Lang.Boolean>(LocalBridgeClazz, "STRIKETHROUGH_ON"); _STRIKETHROUGH_ONReady = true; } return _STRIKETHROUGH_ONContent; } }
        private static Java.Lang.Boolean _STRIKETHROUGH_ONContent = default;
        private static bool _STRIKETHROUGH_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SWAP_COLORS_ON"/>
        /// </summary>
        public static Java.Lang.Boolean SWAP_COLORS_ON { get { if (!_SWAP_COLORS_ONReady) { _SWAP_COLORS_ONContent = SGetField<Java.Lang.Boolean>(LocalBridgeClazz, "SWAP_COLORS_ON"); _SWAP_COLORS_ONReady = true; } return _SWAP_COLORS_ONContent; } }
        private static Java.Lang.Boolean _SWAP_COLORS_ONContent = default;
        private static bool _SWAP_COLORS_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#JUSTIFICATION_FULL"/>
        /// </summary>
        public static Java.Lang.Float JUSTIFICATION_FULL { get { if (!_JUSTIFICATION_FULLReady) { _JUSTIFICATION_FULLContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "JUSTIFICATION_FULL"); _JUSTIFICATION_FULLReady = true; } return _JUSTIFICATION_FULLContent; } }
        private static Java.Lang.Float _JUSTIFICATION_FULLContent = default;
        private static bool _JUSTIFICATION_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#JUSTIFICATION_NONE"/>
        /// </summary>
        public static Java.Lang.Float JUSTIFICATION_NONE { get { if (!_JUSTIFICATION_NONEReady) { _JUSTIFICATION_NONEContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "JUSTIFICATION_NONE"); _JUSTIFICATION_NONEReady = true; } return _JUSTIFICATION_NONEContent; } }
        private static Java.Lang.Float _JUSTIFICATION_NONEContent = default;
        private static bool _JUSTIFICATION_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE_OBLIQUE"/>
        /// </summary>
        public static Java.Lang.Float POSTURE_OBLIQUE { get { if (!_POSTURE_OBLIQUEReady) { _POSTURE_OBLIQUEContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "POSTURE_OBLIQUE"); _POSTURE_OBLIQUEReady = true; } return _POSTURE_OBLIQUEContent; } }
        private static Java.Lang.Float _POSTURE_OBLIQUEContent = default;
        private static bool _POSTURE_OBLIQUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE_REGULAR"/>
        /// </summary>
        public static Java.Lang.Float POSTURE_REGULAR { get { if (!_POSTURE_REGULARReady) { _POSTURE_REGULARContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "POSTURE_REGULAR"); _POSTURE_REGULARReady = true; } return _POSTURE_REGULARContent; } }
        private static Java.Lang.Float _POSTURE_REGULARContent = default;
        private static bool _POSTURE_REGULARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRACKING_LOOSE"/>
        /// </summary>
        public static Java.Lang.Float TRACKING_LOOSE { get { if (!_TRACKING_LOOSEReady) { _TRACKING_LOOSEContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "TRACKING_LOOSE"); _TRACKING_LOOSEReady = true; } return _TRACKING_LOOSEContent; } }
        private static Java.Lang.Float _TRACKING_LOOSEContent = default;
        private static bool _TRACKING_LOOSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRACKING_TIGHT"/>
        /// </summary>
        public static Java.Lang.Float TRACKING_TIGHT { get { if (!_TRACKING_TIGHTReady) { _TRACKING_TIGHTContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "TRACKING_TIGHT"); _TRACKING_TIGHTReady = true; } return _TRACKING_TIGHTContent; } }
        private static Java.Lang.Float _TRACKING_TIGHTContent = default;
        private static bool _TRACKING_TIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_BOLD"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_BOLD { get { if (!_WEIGHT_BOLDReady) { _WEIGHT_BOLDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_BOLD"); _WEIGHT_BOLDReady = true; } return _WEIGHT_BOLDContent; } }
        private static Java.Lang.Float _WEIGHT_BOLDContent = default;
        private static bool _WEIGHT_BOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_DEMIBOLD"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_DEMIBOLD { get { if (!_WEIGHT_DEMIBOLDReady) { _WEIGHT_DEMIBOLDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_DEMIBOLD"); _WEIGHT_DEMIBOLDReady = true; } return _WEIGHT_DEMIBOLDContent; } }
        private static Java.Lang.Float _WEIGHT_DEMIBOLDContent = default;
        private static bool _WEIGHT_DEMIBOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_DEMILIGHT"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_DEMILIGHT { get { if (!_WEIGHT_DEMILIGHTReady) { _WEIGHT_DEMILIGHTContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_DEMILIGHT"); _WEIGHT_DEMILIGHTReady = true; } return _WEIGHT_DEMILIGHTContent; } }
        private static Java.Lang.Float _WEIGHT_DEMILIGHTContent = default;
        private static bool _WEIGHT_DEMILIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_EXTRA_LIGHT"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_EXTRA_LIGHT { get { if (!_WEIGHT_EXTRA_LIGHTReady) { _WEIGHT_EXTRA_LIGHTContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_EXTRA_LIGHT"); _WEIGHT_EXTRA_LIGHTReady = true; } return _WEIGHT_EXTRA_LIGHTContent; } }
        private static Java.Lang.Float _WEIGHT_EXTRA_LIGHTContent = default;
        private static bool _WEIGHT_EXTRA_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_EXTRABOLD"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_EXTRABOLD { get { if (!_WEIGHT_EXTRABOLDReady) { _WEIGHT_EXTRABOLDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_EXTRABOLD"); _WEIGHT_EXTRABOLDReady = true; } return _WEIGHT_EXTRABOLDContent; } }
        private static Java.Lang.Float _WEIGHT_EXTRABOLDContent = default;
        private static bool _WEIGHT_EXTRABOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_HEAVY"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_HEAVY { get { if (!_WEIGHT_HEAVYReady) { _WEIGHT_HEAVYContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_HEAVY"); _WEIGHT_HEAVYReady = true; } return _WEIGHT_HEAVYContent; } }
        private static Java.Lang.Float _WEIGHT_HEAVYContent = default;
        private static bool _WEIGHT_HEAVYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_LIGHT"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_LIGHT { get { if (!_WEIGHT_LIGHTReady) { _WEIGHT_LIGHTContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_LIGHT"); _WEIGHT_LIGHTReady = true; } return _WEIGHT_LIGHTContent; } }
        private static Java.Lang.Float _WEIGHT_LIGHTContent = default;
        private static bool _WEIGHT_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_MEDIUM"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_MEDIUM { get { if (!_WEIGHT_MEDIUMReady) { _WEIGHT_MEDIUMContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_MEDIUM"); _WEIGHT_MEDIUMReady = true; } return _WEIGHT_MEDIUMContent; } }
        private static Java.Lang.Float _WEIGHT_MEDIUMContent = default;
        private static bool _WEIGHT_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_REGULAR"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_REGULAR { get { if (!_WEIGHT_REGULARReady) { _WEIGHT_REGULARContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_REGULAR"); _WEIGHT_REGULARReady = true; } return _WEIGHT_REGULARContent; } }
        private static Java.Lang.Float _WEIGHT_REGULARContent = default;
        private static bool _WEIGHT_REGULARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_SEMIBOLD"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_SEMIBOLD { get { if (!_WEIGHT_SEMIBOLDReady) { _WEIGHT_SEMIBOLDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_SEMIBOLD"); _WEIGHT_SEMIBOLDReady = true; } return _WEIGHT_SEMIBOLDContent; } }
        private static Java.Lang.Float _WEIGHT_SEMIBOLDContent = default;
        private static bool _WEIGHT_SEMIBOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT_ULTRABOLD"/>
        /// </summary>
        public static Java.Lang.Float WEIGHT_ULTRABOLD { get { if (!_WEIGHT_ULTRABOLDReady) { _WEIGHT_ULTRABOLDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WEIGHT_ULTRABOLD"); _WEIGHT_ULTRABOLDReady = true; } return _WEIGHT_ULTRABOLDContent; } }
        private static Java.Lang.Float _WEIGHT_ULTRABOLDContent = default;
        private static bool _WEIGHT_ULTRABOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH_CONDENSED"/>
        /// </summary>
        public static Java.Lang.Float WIDTH_CONDENSED { get { if (!_WIDTH_CONDENSEDReady) { _WIDTH_CONDENSEDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WIDTH_CONDENSED"); _WIDTH_CONDENSEDReady = true; } return _WIDTH_CONDENSEDContent; } }
        private static Java.Lang.Float _WIDTH_CONDENSEDContent = default;
        private static bool _WIDTH_CONDENSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH_EXTENDED"/>
        /// </summary>
        public static Java.Lang.Float WIDTH_EXTENDED { get { if (!_WIDTH_EXTENDEDReady) { _WIDTH_EXTENDEDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WIDTH_EXTENDED"); _WIDTH_EXTENDEDReady = true; } return _WIDTH_EXTENDEDContent; } }
        private static Java.Lang.Float _WIDTH_EXTENDEDContent = default;
        private static bool _WIDTH_EXTENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH_REGULAR"/>
        /// </summary>
        public static Java.Lang.Float WIDTH_REGULAR { get { if (!_WIDTH_REGULARReady) { _WIDTH_REGULARContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WIDTH_REGULAR"); _WIDTH_REGULARReady = true; } return _WIDTH_REGULARContent; } }
        private static Java.Lang.Float _WIDTH_REGULARContent = default;
        private static bool _WIDTH_REGULARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH_SEMI_CONDENSED"/>
        /// </summary>
        public static Java.Lang.Float WIDTH_SEMI_CONDENSED { get { if (!_WIDTH_SEMI_CONDENSEDReady) { _WIDTH_SEMI_CONDENSEDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WIDTH_SEMI_CONDENSED"); _WIDTH_SEMI_CONDENSEDReady = true; } return _WIDTH_SEMI_CONDENSEDContent; } }
        private static Java.Lang.Float _WIDTH_SEMI_CONDENSEDContent = default;
        private static bool _WIDTH_SEMI_CONDENSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH_SEMI_EXTENDED"/>
        /// </summary>
        public static Java.Lang.Float WIDTH_SEMI_EXTENDED { get { if (!_WIDTH_SEMI_EXTENDEDReady) { _WIDTH_SEMI_EXTENDEDContent = SGetField<Java.Lang.Float>(LocalBridgeClazz, "WIDTH_SEMI_EXTENDED"); _WIDTH_SEMI_EXTENDEDReady = true; } return _WIDTH_SEMI_EXTENDEDContent; } }
        private static Java.Lang.Float _WIDTH_SEMI_EXTENDEDContent = default;
        private static bool _WIDTH_SEMI_EXTENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#KERNING_ON"/>
        /// </summary>
        public static Java.Lang.Integer KERNING_ON { get { if (!_KERNING_ONReady) { _KERNING_ONContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "KERNING_ON"); _KERNING_ONReady = true; } return _KERNING_ONContent; } }
        private static Java.Lang.Integer _KERNING_ONContent = default;
        private static bool _KERNING_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#LIGATURES_ON"/>
        /// </summary>
        public static Java.Lang.Integer LIGATURES_ON { get { if (!_LIGATURES_ONReady) { _LIGATURES_ONContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "LIGATURES_ON"); _LIGATURES_ONReady = true; } return _LIGATURES_ONContent; } }
        private static Java.Lang.Integer _LIGATURES_ONContent = default;
        private static bool _LIGATURES_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SUPERSCRIPT_SUB"/>
        /// </summary>
        public static Java.Lang.Integer SUPERSCRIPT_SUB { get { if (!_SUPERSCRIPT_SUBReady) { _SUPERSCRIPT_SUBContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "SUPERSCRIPT_SUB"); _SUPERSCRIPT_SUBReady = true; } return _SUPERSCRIPT_SUBContent; } }
        private static Java.Lang.Integer _SUPERSCRIPT_SUBContent = default;
        private static bool _SUPERSCRIPT_SUBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#SUPERSCRIPT_SUPER"/>
        /// </summary>
        public static Java.Lang.Integer SUPERSCRIPT_SUPER { get { if (!_SUPERSCRIPT_SUPERReady) { _SUPERSCRIPT_SUPERContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "SUPERSCRIPT_SUPER"); _SUPERSCRIPT_SUPERReady = true; } return _SUPERSCRIPT_SUPERContent; } }
        private static Java.Lang.Integer _SUPERSCRIPT_SUPERContent = default;
        private static bool _SUPERSCRIPT_SUPERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_LOW_DASHED"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_LOW_DASHED { get { if (!_UNDERLINE_LOW_DASHEDReady) { _UNDERLINE_LOW_DASHEDContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_LOW_DASHED"); _UNDERLINE_LOW_DASHEDReady = true; } return _UNDERLINE_LOW_DASHEDContent; } }
        private static Java.Lang.Integer _UNDERLINE_LOW_DASHEDContent = default;
        private static bool _UNDERLINE_LOW_DASHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_LOW_DOTTED"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_LOW_DOTTED { get { if (!_UNDERLINE_LOW_DOTTEDReady) { _UNDERLINE_LOW_DOTTEDContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_LOW_DOTTED"); _UNDERLINE_LOW_DOTTEDReady = true; } return _UNDERLINE_LOW_DOTTEDContent; } }
        private static Java.Lang.Integer _UNDERLINE_LOW_DOTTEDContent = default;
        private static bool _UNDERLINE_LOW_DOTTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_LOW_GRAY"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_LOW_GRAY { get { if (!_UNDERLINE_LOW_GRAYReady) { _UNDERLINE_LOW_GRAYContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_LOW_GRAY"); _UNDERLINE_LOW_GRAYReady = true; } return _UNDERLINE_LOW_GRAYContent; } }
        private static Java.Lang.Integer _UNDERLINE_LOW_GRAYContent = default;
        private static bool _UNDERLINE_LOW_GRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_LOW_ONE_PIXEL"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_LOW_ONE_PIXEL { get { if (!_UNDERLINE_LOW_ONE_PIXELReady) { _UNDERLINE_LOW_ONE_PIXELContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_LOW_ONE_PIXEL"); _UNDERLINE_LOW_ONE_PIXELReady = true; } return _UNDERLINE_LOW_ONE_PIXELContent; } }
        private static Java.Lang.Integer _UNDERLINE_LOW_ONE_PIXELContent = default;
        private static bool _UNDERLINE_LOW_ONE_PIXELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_LOW_TWO_PIXEL"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_LOW_TWO_PIXEL { get { if (!_UNDERLINE_LOW_TWO_PIXELReady) { _UNDERLINE_LOW_TWO_PIXELContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_LOW_TWO_PIXEL"); _UNDERLINE_LOW_TWO_PIXELReady = true; } return _UNDERLINE_LOW_TWO_PIXELContent; } }
        private static Java.Lang.Integer _UNDERLINE_LOW_TWO_PIXELContent = default;
        private static bool _UNDERLINE_LOW_TWO_PIXELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE_ON"/>
        /// </summary>
        public static Java.Lang.Integer UNDERLINE_ON { get { if (!_UNDERLINE_ONReady) { _UNDERLINE_ONContent = SGetField<Java.Lang.Integer>(LocalBridgeClazz, "UNDERLINE_ON"); _UNDERLINE_ONReady = true; } return _UNDERLINE_ONContent; } }
        private static Java.Lang.Integer _UNDERLINE_ONContent = default;
        private static bool _UNDERLINE_ONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}