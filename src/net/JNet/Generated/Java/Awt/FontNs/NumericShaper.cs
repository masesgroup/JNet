/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.3.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Awt.FontNs
{
    #region NumericShaper
    public partial class NumericShaper
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#ALL_RANGES"/>
        /// </summary>
        public static int ALL_RANGES { get { if (!_ALL_RANGESReady) { _ALL_RANGESContent = SGetField<int>(LocalBridgeClazz, "ALL_RANGES"); _ALL_RANGESReady = true; } return _ALL_RANGESContent; } }
        private static int _ALL_RANGESContent = default;
        private static bool _ALL_RANGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#ARABIC"/>
        /// </summary>
        public static int ARABIC { get { if (!_ARABICReady) { _ARABICContent = SGetField<int>(LocalBridgeClazz, "ARABIC"); _ARABICReady = true; } return _ARABICContent; } }
        private static int _ARABICContent = default;
        private static bool _ARABICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#BENGALI"/>
        /// </summary>
        public static int BENGALI { get { if (!_BENGALIReady) { _BENGALIContent = SGetField<int>(LocalBridgeClazz, "BENGALI"); _BENGALIReady = true; } return _BENGALIContent; } }
        private static int _BENGALIContent = default;
        private static bool _BENGALIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#DEVANAGARI"/>
        /// </summary>
        public static int DEVANAGARI { get { if (!_DEVANAGARIReady) { _DEVANAGARIContent = SGetField<int>(LocalBridgeClazz, "DEVANAGARI"); _DEVANAGARIReady = true; } return _DEVANAGARIContent; } }
        private static int _DEVANAGARIContent = default;
        private static bool _DEVANAGARIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#EASTERN_ARABIC"/>
        /// </summary>
        public static int EASTERN_ARABIC { get { if (!_EASTERN_ARABICReady) { _EASTERN_ARABICContent = SGetField<int>(LocalBridgeClazz, "EASTERN_ARABIC"); _EASTERN_ARABICReady = true; } return _EASTERN_ARABICContent; } }
        private static int _EASTERN_ARABICContent = default;
        private static bool _EASTERN_ARABICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#ETHIOPIC"/>
        /// </summary>
        public static int ETHIOPIC { get { if (!_ETHIOPICReady) { _ETHIOPICContent = SGetField<int>(LocalBridgeClazz, "ETHIOPIC"); _ETHIOPICReady = true; } return _ETHIOPICContent; } }
        private static int _ETHIOPICContent = default;
        private static bool _ETHIOPICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#EUROPEAN"/>
        /// </summary>
        public static int EUROPEAN { get { if (!_EUROPEANReady) { _EUROPEANContent = SGetField<int>(LocalBridgeClazz, "EUROPEAN"); _EUROPEANReady = true; } return _EUROPEANContent; } }
        private static int _EUROPEANContent = default;
        private static bool _EUROPEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#GUJARATI"/>
        /// </summary>
        public static int GUJARATI { get { if (!_GUJARATIReady) { _GUJARATIContent = SGetField<int>(LocalBridgeClazz, "GUJARATI"); _GUJARATIReady = true; } return _GUJARATIContent; } }
        private static int _GUJARATIContent = default;
        private static bool _GUJARATIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#GURMUKHI"/>
        /// </summary>
        public static int GURMUKHI { get { if (!_GURMUKHIReady) { _GURMUKHIContent = SGetField<int>(LocalBridgeClazz, "GURMUKHI"); _GURMUKHIReady = true; } return _GURMUKHIContent; } }
        private static int _GURMUKHIContent = default;
        private static bool _GURMUKHIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#KANNADA"/>
        /// </summary>
        public static int KANNADA { get { if (!_KANNADAReady) { _KANNADAContent = SGetField<int>(LocalBridgeClazz, "KANNADA"); _KANNADAReady = true; } return _KANNADAContent; } }
        private static int _KANNADAContent = default;
        private static bool _KANNADAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#KHMER"/>
        /// </summary>
        public static int KHMER { get { if (!_KHMERReady) { _KHMERContent = SGetField<int>(LocalBridgeClazz, "KHMER"); _KHMERReady = true; } return _KHMERContent; } }
        private static int _KHMERContent = default;
        private static bool _KHMERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#LAO"/>
        /// </summary>
        public static int LAO { get { if (!_LAOReady) { _LAOContent = SGetField<int>(LocalBridgeClazz, "LAO"); _LAOReady = true; } return _LAOContent; } }
        private static int _LAOContent = default;
        private static bool _LAOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#MALAYALAM"/>
        /// </summary>
        public static int MALAYALAM { get { if (!_MALAYALAMReady) { _MALAYALAMContent = SGetField<int>(LocalBridgeClazz, "MALAYALAM"); _MALAYALAMReady = true; } return _MALAYALAMContent; } }
        private static int _MALAYALAMContent = default;
        private static bool _MALAYALAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#MONGOLIAN"/>
        /// </summary>
        public static int MONGOLIAN { get { if (!_MONGOLIANReady) { _MONGOLIANContent = SGetField<int>(LocalBridgeClazz, "MONGOLIAN"); _MONGOLIANReady = true; } return _MONGOLIANContent; } }
        private static int _MONGOLIANContent = default;
        private static bool _MONGOLIANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#MYANMAR"/>
        /// </summary>
        public static int MYANMAR { get { if (!_MYANMARReady) { _MYANMARContent = SGetField<int>(LocalBridgeClazz, "MYANMAR"); _MYANMARReady = true; } return _MYANMARContent; } }
        private static int _MYANMARContent = default;
        private static bool _MYANMARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#ORIYA"/>
        /// </summary>
        public static int ORIYA { get { if (!_ORIYAReady) { _ORIYAContent = SGetField<int>(LocalBridgeClazz, "ORIYA"); _ORIYAReady = true; } return _ORIYAContent; } }
        private static int _ORIYAContent = default;
        private static bool _ORIYAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#TAMIL"/>
        /// </summary>
        public static int TAMIL { get { if (!_TAMILReady) { _TAMILContent = SGetField<int>(LocalBridgeClazz, "TAMIL"); _TAMILReady = true; } return _TAMILContent; } }
        private static int _TAMILContent = default;
        private static bool _TAMILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#TELUGU"/>
        /// </summary>
        public static int TELUGU { get { if (!_TELUGUReady) { _TELUGUContent = SGetField<int>(LocalBridgeClazz, "TELUGU"); _TELUGUReady = true; } return _TELUGUContent; } }
        private static int _TELUGUContent = default;
        private static bool _TELUGUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#THAI"/>
        /// </summary>
        public static int THAI { get { if (!_THAIReady) { _THAIContent = SGetField<int>(LocalBridgeClazz, "THAI"); _THAIReady = true; } return _THAIContent; } }
        private static int _THAIContent = default;
        private static bool _THAIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#TIBETAN"/>
        /// </summary>
        public static int TIBETAN { get { if (!_TIBETANReady) { _TIBETANContent = SGetField<int>(LocalBridgeClazz, "TIBETAN"); _TIBETANReady = true; } return _TIBETANContent; } }
        private static int _TIBETANContent = default;
        private static bool _TIBETANReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getContextualShaper(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetContextualShaper(int arg0, int arg1)
        {
            return SExecute<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getContextualShaper", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getContextualShaper(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetContextualShaper(int arg0)
        {
            return SExecuteWithSignature<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getContextualShaper", "(I)Ljava/awt/font/NumericShaper;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getContextualShaper(java.util.Set,java.awt.font.NumericShaper.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <param name="arg1"><see cref="Java.Awt.FontNs.NumericShaper.Range"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetContextualShaper(Java.Util.Set<Java.Awt.FontNs.NumericShaper.Range> arg0, Java.Awt.FontNs.NumericShaper.Range arg1)
        {
            return SExecute<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getContextualShaper", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getContextualShaper(java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetContextualShaper(Java.Util.Set<Java.Awt.FontNs.NumericShaper.Range> arg0)
        {
            return SExecuteWithSignature<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getContextualShaper", "(Ljava/util/Set;)Ljava/awt/font/NumericShaper;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getShaper(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetShaper(int arg0)
        {
            return SExecuteWithSignature<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getShaper", "(I)Ljava/awt/font/NumericShaper;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getShaper(java.awt.font.NumericShaper.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.FontNs.NumericShaper.Range"/></param>
        /// <returns><see cref="Java.Awt.FontNs.NumericShaper"/></returns>
        public static Java.Awt.FontNs.NumericShaper GetShaper(Java.Awt.FontNs.NumericShaper.Range arg0)
        {
            return SExecuteWithSignature<Java.Awt.FontNs.NumericShaper>(LocalBridgeClazz, "getShaper", "(Ljava/awt/font/NumericShaper$Range;)Ljava/awt/font/NumericShaper;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getRanges()"/> 
        /// </summary>
        public int Ranges
        {
            get { return IExecuteWithSignature<int>("getRanges", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#getRangeSet()"/> 
        /// </summary>
        public Java.Util.Set<Java.Awt.FontNs.NumericShaper.Range> RangeSet
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Awt.FontNs.NumericShaper.Range>>("getRangeSet", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#isContextual()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContextual()
        {
            return IExecuteWithSignature<bool>("isContextual", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#shape(char[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void Shape(char[] arg0, int arg1, int arg2, int arg3)
        {
            IExecute("shape", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#shape(char[],int,int,java.awt.font.NumericShaper.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Awt.FontNs.NumericShaper.Range"/></param>
        public void Shape(char[] arg0, int arg1, int arg2, Java.Awt.FontNs.NumericShaper.Range arg3)
        {
            IExecute("shape", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.html#shape(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void Shape(char[] arg0, int arg1, int arg2)
        {
            IExecute("shape", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region Range
        public partial class Range
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#ARABIC"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range ARABIC { get { if (!_ARABICReady) { _ARABICContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "ARABIC"); _ARABICReady = true; } return _ARABICContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _ARABICContent = default;
            private static bool _ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#BALINESE"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range BALINESE { get { if (!_BALINESEReady) { _BALINESEContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "BALINESE"); _BALINESEReady = true; } return _BALINESEContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _BALINESEContent = default;
            private static bool _BALINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#BENGALI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range BENGALI { get { if (!_BENGALIReady) { _BENGALIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "BENGALI"); _BENGALIReady = true; } return _BENGALIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _BENGALIContent = default;
            private static bool _BENGALIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#CHAM"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range CHAM { get { if (!_CHAMReady) { _CHAMContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "CHAM"); _CHAMReady = true; } return _CHAMContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _CHAMContent = default;
            private static bool _CHAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#DEVANAGARI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range DEVANAGARI { get { if (!_DEVANAGARIReady) { _DEVANAGARIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "DEVANAGARI"); _DEVANAGARIReady = true; } return _DEVANAGARIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _DEVANAGARIContent = default;
            private static bool _DEVANAGARIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#EASTERN_ARABIC"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range EASTERN_ARABIC { get { if (!_EASTERN_ARABICReady) { _EASTERN_ARABICContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "EASTERN_ARABIC"); _EASTERN_ARABICReady = true; } return _EASTERN_ARABICContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _EASTERN_ARABICContent = default;
            private static bool _EASTERN_ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#ETHIOPIC"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range ETHIOPIC { get { if (!_ETHIOPICReady) { _ETHIOPICContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "ETHIOPIC"); _ETHIOPICReady = true; } return _ETHIOPICContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _ETHIOPICContent = default;
            private static bool _ETHIOPICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#EUROPEAN"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range EUROPEAN { get { if (!_EUROPEANReady) { _EUROPEANContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "EUROPEAN"); _EUROPEANReady = true; } return _EUROPEANContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _EUROPEANContent = default;
            private static bool _EUROPEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#GUJARATI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range GUJARATI { get { if (!_GUJARATIReady) { _GUJARATIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "GUJARATI"); _GUJARATIReady = true; } return _GUJARATIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _GUJARATIContent = default;
            private static bool _GUJARATIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#GURMUKHI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range GURMUKHI { get { if (!_GURMUKHIReady) { _GURMUKHIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "GURMUKHI"); _GURMUKHIReady = true; } return _GURMUKHIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _GURMUKHIContent = default;
            private static bool _GURMUKHIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#JAVANESE"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range JAVANESE { get { if (!_JAVANESEReady) { _JAVANESEContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "JAVANESE"); _JAVANESEReady = true; } return _JAVANESEContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _JAVANESEContent = default;
            private static bool _JAVANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#KANNADA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range KANNADA { get { if (!_KANNADAReady) { _KANNADAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "KANNADA"); _KANNADAReady = true; } return _KANNADAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _KANNADAContent = default;
            private static bool _KANNADAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#KAYAH_LI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range KAYAH_LI { get { if (!_KAYAH_LIReady) { _KAYAH_LIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "KAYAH_LI"); _KAYAH_LIReady = true; } return _KAYAH_LIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _KAYAH_LIContent = default;
            private static bool _KAYAH_LIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#KHMER"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range KHMER { get { if (!_KHMERReady) { _KHMERContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "KHMER"); _KHMERReady = true; } return _KHMERContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _KHMERContent = default;
            private static bool _KHMERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#LAO"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range LAO { get { if (!_LAOReady) { _LAOContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "LAO"); _LAOReady = true; } return _LAOContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _LAOContent = default;
            private static bool _LAOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#LEPCHA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range LEPCHA { get { if (!_LEPCHAReady) { _LEPCHAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "LEPCHA"); _LEPCHAReady = true; } return _LEPCHAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _LEPCHAContent = default;
            private static bool _LEPCHAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#LIMBU"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range LIMBU { get { if (!_LIMBUReady) { _LIMBUContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "LIMBU"); _LIMBUReady = true; } return _LIMBUContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _LIMBUContent = default;
            private static bool _LIMBUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MALAYALAM"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MALAYALAM { get { if (!_MALAYALAMReady) { _MALAYALAMContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MALAYALAM"); _MALAYALAMReady = true; } return _MALAYALAMContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MALAYALAMContent = default;
            private static bool _MALAYALAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MEETEI_MAYEK"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MEETEI_MAYEK { get { if (!_MEETEI_MAYEKReady) { _MEETEI_MAYEKContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MEETEI_MAYEK"); _MEETEI_MAYEKReady = true; } return _MEETEI_MAYEKContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MEETEI_MAYEKContent = default;
            private static bool _MEETEI_MAYEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MONGOLIAN"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MONGOLIAN { get { if (!_MONGOLIANReady) { _MONGOLIANContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MONGOLIAN"); _MONGOLIANReady = true; } return _MONGOLIANContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MONGOLIANContent = default;
            private static bool _MONGOLIANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MYANMAR"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MYANMAR { get { if (!_MYANMARReady) { _MYANMARContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MYANMAR"); _MYANMARReady = true; } return _MYANMARContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MYANMARContent = default;
            private static bool _MYANMARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MYANMAR_SHAN"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MYANMAR_SHAN { get { if (!_MYANMAR_SHANReady) { _MYANMAR_SHANContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MYANMAR_SHAN"); _MYANMAR_SHANReady = true; } return _MYANMAR_SHANContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MYANMAR_SHANContent = default;
            private static bool _MYANMAR_SHANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#MYANMAR_TAI_LAING"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range MYANMAR_TAI_LAING { get { if (!_MYANMAR_TAI_LAINGReady) { _MYANMAR_TAI_LAINGContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "MYANMAR_TAI_LAING"); _MYANMAR_TAI_LAINGReady = true; } return _MYANMAR_TAI_LAINGContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _MYANMAR_TAI_LAINGContent = default;
            private static bool _MYANMAR_TAI_LAINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#NEW_TAI_LUE"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range NEW_TAI_LUE { get { if (!_NEW_TAI_LUEReady) { _NEW_TAI_LUEContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "NEW_TAI_LUE"); _NEW_TAI_LUEReady = true; } return _NEW_TAI_LUEContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _NEW_TAI_LUEContent = default;
            private static bool _NEW_TAI_LUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#NKO"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range NKO { get { if (!_NKOReady) { _NKOContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "NKO"); _NKOReady = true; } return _NKOContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _NKOContent = default;
            private static bool _NKOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#OL_CHIKI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range OL_CHIKI { get { if (!_OL_CHIKIReady) { _OL_CHIKIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "OL_CHIKI"); _OL_CHIKIReady = true; } return _OL_CHIKIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _OL_CHIKIContent = default;
            private static bool _OL_CHIKIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#ORIYA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range ORIYA { get { if (!_ORIYAReady) { _ORIYAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "ORIYA"); _ORIYAReady = true; } return _ORIYAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _ORIYAContent = default;
            private static bool _ORIYAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#SAURASHTRA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range SAURASHTRA { get { if (!_SAURASHTRAReady) { _SAURASHTRAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "SAURASHTRA"); _SAURASHTRAReady = true; } return _SAURASHTRAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _SAURASHTRAContent = default;
            private static bool _SAURASHTRAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#SINHALA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range SINHALA { get { if (!_SINHALAReady) { _SINHALAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "SINHALA"); _SINHALAReady = true; } return _SINHALAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _SINHALAContent = default;
            private static bool _SINHALAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#SUNDANESE"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range SUNDANESE { get { if (!_SUNDANESEReady) { _SUNDANESEContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "SUNDANESE"); _SUNDANESEReady = true; } return _SUNDANESEContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _SUNDANESEContent = default;
            private static bool _SUNDANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#TAI_THAM_HORA"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range TAI_THAM_HORA { get { if (!_TAI_THAM_HORAReady) { _TAI_THAM_HORAContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "TAI_THAM_HORA"); _TAI_THAM_HORAReady = true; } return _TAI_THAM_HORAContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _TAI_THAM_HORAContent = default;
            private static bool _TAI_THAM_HORAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#TAI_THAM_THAM"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range TAI_THAM_THAM { get { if (!_TAI_THAM_THAMReady) { _TAI_THAM_THAMContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "TAI_THAM_THAM"); _TAI_THAM_THAMReady = true; } return _TAI_THAM_THAMContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _TAI_THAM_THAMContent = default;
            private static bool _TAI_THAM_THAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#TAMIL"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range TAMIL { get { if (!_TAMILReady) { _TAMILContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "TAMIL"); _TAMILReady = true; } return _TAMILContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _TAMILContent = default;
            private static bool _TAMILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#TELUGU"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range TELUGU { get { if (!_TELUGUReady) { _TELUGUContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "TELUGU"); _TELUGUReady = true; } return _TELUGUContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _TELUGUContent = default;
            private static bool _TELUGUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#THAI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range THAI { get { if (!_THAIReady) { _THAIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "THAI"); _THAIReady = true; } return _THAIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _THAIContent = default;
            private static bool _THAIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#TIBETAN"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range TIBETAN { get { if (!_TIBETANReady) { _TIBETANContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "TIBETAN"); _TIBETANReady = true; } return _TIBETANContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _TIBETANContent = default;
            private static bool _TIBETANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#VAI"/>
            /// </summary>
            public static Java.Awt.FontNs.NumericShaper.Range VAI { get { if (!_VAIReady) { _VAIContent = SGetField<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "VAI"); _VAIReady = true; } return _VAIContent; } }
            private static Java.Awt.FontNs.NumericShaper.Range _VAIContent = default;
            private static bool _VAIReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Awt.FontNs.NumericShaper.Range"/></returns>
            public static Java.Awt.FontNs.NumericShaper.Range ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/awt/font/NumericShaper$Range;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html#values()"/>
            /// </summary>
            /// <returns><see cref="Java.Awt.FontNs.NumericShaper.Range"/></returns>
            public static Java.Awt.FontNs.NumericShaper.Range[] Values()
            {
                return SExecuteWithSignatureArray<Java.Awt.FontNs.NumericShaper.Range>(LocalBridgeClazz, "values", "()[Ljava/awt/font/NumericShaper$Range;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}