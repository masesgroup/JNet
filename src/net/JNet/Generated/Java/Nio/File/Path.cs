/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Nio.File
{
    #region Path
    public partial class Path
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        public static implicit operator Java.Nio.File.Watchable(Java.Nio.File.Path t) => t.Cast<Java.Nio.File.Watchable>();
        
        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#of(java.lang.String,java.lang.String...)
        /// </summary>
        public static Java.Nio.File.Path Of(string arg0, params string[] arg1)
        {
            if (arg1.Length == 0) return SExecute<Java.Nio.File.Path>("of", arg0); else return SExecute<Java.Nio.File.Path>("of", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#of(java.net.URI)
        /// </summary>
        public static Java.Nio.File.Path Of(Java.Net.URI arg0)
        {
            return SExecute<Java.Nio.File.Path>("of", arg0);
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getFileName() 
        /// </summary>
        public Java.Nio.File.Path FileName
        {
            get { return IExecute<Java.Nio.File.Path>("getFileName"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getFileSystem() 
        /// </summary>
        public Java.Nio.File.FileSystem FileSystem
        {
            get { return IExecute<Java.Nio.File.FileSystem>("getFileSystem"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getNameCount() 
        /// </summary>
        public int NameCount
        {
            get { return IExecute<int>("getNameCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getParent() 
        /// </summary>
        public Java.Nio.File.Path Parent
        {
            get { return IExecute<Java.Nio.File.Path>("getParent"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getRoot() 
        /// </summary>
        public Java.Nio.File.Path Root
        {
            get { return IExecute<Java.Nio.File.Path>("getRoot"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#endsWith(java.nio.file.Path)
        /// </summary>
        public bool EndsWith(Java.Nio.File.Path arg0)
        {
            return IExecute<bool>("endsWith", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#isAbsolute()
        /// </summary>
        public bool IsAbsolute()
        {
            return IExecute<bool>("isAbsolute");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#startsWith(java.nio.file.Path)
        /// </summary>
        public bool StartsWith(Java.Nio.File.Path arg0)
        {
            return IExecute<bool>("startsWith", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#compareTo(java.nio.file.Path)
        /// </summary>
        public int CompareTo(Java.Nio.File.Path arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#toUri()
        /// </summary>
        public Java.Net.URI ToUri()
        {
            return IExecute<Java.Net.URI>("toUri");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#getName(int)
        /// </summary>
        public Java.Nio.File.Path GetName(int arg0)
        {
            return IExecute<Java.Nio.File.Path>("getName", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#normalize()
        /// </summary>
        public Java.Nio.File.Path Normalize()
        {
            return IExecute<Java.Nio.File.Path>("normalize");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#relativize(java.nio.file.Path)
        /// </summary>
        public Java.Nio.File.Path Relativize(Java.Nio.File.Path arg0)
        {
            return IExecute<Java.Nio.File.Path>("relativize", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#resolve(java.nio.file.Path)
        /// </summary>
        public Java.Nio.File.Path Resolve(Java.Nio.File.Path arg0)
        {
            return IExecute<Java.Nio.File.Path>("resolve", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#subpath(int,int)
        /// </summary>
        public Java.Nio.File.Path Subpath(int arg0, int arg1)
        {
            return IExecute<Java.Nio.File.Path>("subpath", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#toAbsolutePath()
        /// </summary>
        public Java.Nio.File.Path ToAbsolutePath()
        {
            return IExecute<Java.Nio.File.Path>("toAbsolutePath");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#toRealPath(java.nio.file.LinkOption...) throws java.io.IOException
        /// </summary>
        public Java.Nio.File.Path ToRealPath(params Java.Nio.File.LinkOption[] arg0)
        {
            if (arg0.Length == 0) return IExecute<Java.Nio.File.Path>("toRealPath"); else return IExecute<Java.Nio.File.Path>("toRealPath", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind<?>[],java.nio.file.WatchEvent$Modifier...) throws java.io.IOException
        /// </summary>
        public Java.Nio.File.WatchKey Register(Java.Nio.File.WatchService arg0, Java.Nio.File.WatchEvent.Kind[] arg1, params Java.Nio.File.WatchEvent.Modifier[] arg2)
        {
            if (arg2.Length == 0) return IExecute<Java.Nio.File.WatchKey>("register", arg0, arg1); else return IExecute<Java.Nio.File.WatchKey>("register", arg0, arg1, arg2);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#endsWith(java.lang.String)
        /// </summary>
        public bool EndsWith(string arg0)
        {
            return IExecute<bool>("endsWith", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#startsWith(java.lang.String)
        /// </summary>
        public bool StartsWith(string arg0)
        {
            return IExecute<bool>("startsWith", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#compareTo(java.lang.Object)
        /// </summary>
        public int CompareTo(object arg0)
        {
            return IExecute<int>("compareTo", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#toFile()
        /// </summary>
        public Java.Io.File ToFile()
        {
            return IExecute<Java.Io.File>("toFile");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#resolve(java.lang.String)
        /// </summary>
        public Java.Nio.File.Path Resolve(string arg0)
        {
            return IExecute<Java.Nio.File.Path>("resolve", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#resolveSibling(java.lang.String)
        /// </summary>
        public Java.Nio.File.Path ResolveSibling(string arg0)
        {
            return IExecute<Java.Nio.File.Path>("resolveSibling", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#resolveSibling(java.nio.file.Path)
        /// </summary>
        public Java.Nio.File.Path ResolveSibling(Java.Nio.File.Path arg0)
        {
            return IExecute<Java.Nio.File.Path>("resolveSibling", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Path.html#register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind<?>...) throws java.io.IOException
        /// </summary>
        public Java.Nio.File.WatchKey Register(Java.Nio.File.WatchService arg0, params Java.Nio.File.WatchEvent.Kind[] arg1)
        {
            if (arg1.Length == 0) return IExecute<Java.Nio.File.WatchKey>("register", arg0); else return IExecute<Java.Nio.File.WatchKey>("register", arg0, arg1);
        }
        
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}