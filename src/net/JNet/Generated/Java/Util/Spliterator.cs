/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region Spliterator
    public partial class Spliterator
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#CONCURRENT
        /// </summary>
        public static int CONCURRENT => Clazz.GetField<int>("CONCURRENT");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#DISTINCT
        /// </summary>
        public static int DISTINCT => Clazz.GetField<int>("DISTINCT");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#IMMUTABLE
        /// </summary>
        public static int IMMUTABLE => Clazz.GetField<int>("IMMUTABLE");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#NONNULL
        /// </summary>
        public static int NONNULL => Clazz.GetField<int>("NONNULL");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#ORDERED
        /// </summary>
        public static int ORDERED => Clazz.GetField<int>("ORDERED");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#SIZED
        /// </summary>
        public static int SIZED => Clazz.GetField<int>("SIZED");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#SORTED
        /// </summary>
        public static int SORTED => Clazz.GetField<int>("SORTED");
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#SUBSIZED
        /// </summary>
        public static int SUBSIZED => Clazz.GetField<int>("SUBSIZED");
        
        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#getExactSizeIfKnown() 
        /// </summary>
        public long ExactSizeIfKnown
        {
            get { return IExecute<long>("getExactSizeIfKnown"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#characteristics()
        /// </summary>
        public int Characteristics()
        {
            return IExecute<int>("characteristics");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#estimateSize()
        /// </summary>
        public long EstimateSize()
        {
            return IExecute<long>("estimateSize");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.html#hasCharacteristics(int)
        /// </summary>
        public bool HasCharacteristics(int arg0)
        {
            return IExecute<bool>("hasCharacteristics", arg0);
        }
        
        #endregion

        #region Nested classes
        #region OfDouble
        public partial class OfDouble
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfDouble.html#tryAdvance(java.util.function.DoubleConsumer)
            /// </summary>
            public bool TryAdvance(Java.Util.Function.DoubleConsumer arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfDouble.html#tryAdvance(java.lang.Object)
            /// </summary>
            public bool TryAdvance(object arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfDouble.html#forEachRemaining(java.lang.Object)
            /// </summary>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfDouble.html#forEachRemaining(java.util.function.DoubleConsumer)
            /// </summary>
            public void ForEachRemaining(Java.Util.Function.DoubleConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OfInt
        public partial class OfInt
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfInt.html#tryAdvance(java.util.function.IntConsumer)
            /// </summary>
            public bool TryAdvance(Java.Util.Function.IntConsumer arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfInt.html#tryAdvance(java.lang.Object)
            /// </summary>
            public bool TryAdvance(object arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfInt.html#forEachRemaining(java.lang.Object)
            /// </summary>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfInt.html#forEachRemaining(java.util.function.IntConsumer)
            /// </summary>
            public void ForEachRemaining(Java.Util.Function.IntConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OfLong
        public partial class OfLong
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfLong.html#tryAdvance(java.util.function.LongConsumer)
            /// </summary>
            public bool TryAdvance(Java.Util.Function.LongConsumer arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfLong.html#tryAdvance(java.lang.Object)
            /// </summary>
            public bool TryAdvance(object arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfLong.html#forEachRemaining(java.lang.Object)
            /// </summary>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfLong.html#forEachRemaining(java.util.function.LongConsumer)
            /// </summary>
            public void ForEachRemaining(Java.Util.Function.LongConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OfPrimitive
        public partial class OfPrimitive
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfPrimitive.html#tryAdvance(T_CONS)
            /// </summary>
            public bool TryAdvance(object arg0)
            {
                return IExecute<bool>("tryAdvance", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Spliterator.OfPrimitive.html#forEachRemaining(T_CONS)
            /// </summary>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}