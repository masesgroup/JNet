/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Concurrent
{
    #region ForkJoinPool
    public partial class ForkJoinPool
    {
        #region Constructors
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#<init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)
        /// </summary>
        public ForkJoinPool(int arg0, Java.Util.Concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory arg1, Java.Lang.Thread.UncaughtExceptionHandler arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#<init>(int)
        /// </summary>
        public ForkJoinPool(int arg0)
            : base(arg0)
        {
        }
        
        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory
        /// </summary>
        public static Java.Util.Concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory => Clazz.GetField<Java.Util.Concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory>("defaultForkJoinWorkerThreadFactory");
        
        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getCommonPoolParallelism() 
        /// </summary>
        public static int CommonPoolParallelism
        {
            get { return SExecute<int>("getCommonPoolParallelism"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#commonPool()
        /// </summary>
        public static Java.Util.Concurrent.ForkJoinPool CommonPool()
        {
            return SExecute<Java.Util.Concurrent.ForkJoinPool>("commonPool");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker) throws java.lang.InterruptedException
        /// </summary>
        public static void ManagedBlock(Java.Util.Concurrent.ForkJoinPool.ManagedBlocker arg0)
        {
            SExecute("managedBlock", arg0);
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getActiveThreadCount() 
        /// </summary>
        public int ActiveThreadCount
        {
            get { return IExecute<int>("getActiveThreadCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getAsyncMode() 
        /// </summary>
        public bool AsyncMode
        {
            get { return IExecute<bool>("getAsyncMode"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getFactory() 
        /// </summary>
        public Java.Util.Concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory Factory
        {
            get { return IExecute<Java.Util.Concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory>("getFactory"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getParallelism() 
        /// </summary>
        public int Parallelism
        {
            get { return IExecute<int>("getParallelism"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getPoolSize() 
        /// </summary>
        public int PoolSize
        {
            get { return IExecute<int>("getPoolSize"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getQueuedSubmissionCount() 
        /// </summary>
        public int QueuedSubmissionCount
        {
            get { return IExecute<int>("getQueuedSubmissionCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getQueuedTaskCount() 
        /// </summary>
        public long QueuedTaskCount
        {
            get { return IExecute<long>("getQueuedTaskCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getRunningThreadCount() 
        /// </summary>
        public int RunningThreadCount
        {
            get { return IExecute<int>("getRunningThreadCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getStealCount() 
        /// </summary>
        public long StealCount
        {
            get { return IExecute<long>("getStealCount"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#getUncaughtExceptionHandler() 
        /// </summary>
        public Java.Lang.Thread.UncaughtExceptionHandler UncaughtExceptionHandler
        {
            get { return IExecute<Java.Lang.Thread.UncaughtExceptionHandler>("getUncaughtExceptionHandler"); }
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#hasQueuedSubmissions()
        /// </summary>
        public bool HasQueuedSubmissions()
        {
            return IExecute<bool>("hasQueuedSubmissions");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#isQuiescent()
        /// </summary>
        public bool IsQuiescent()
        {
            return IExecute<bool>("isQuiescent");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#isTerminating()
        /// </summary>
        public bool IsTerminating()
        {
            return IExecute<bool>("isTerminating");
        }
        
        #endregion

        #region Nested classes
        #region ForkJoinWorkerThreadFactory
        public partial class ForkJoinWorkerThreadFactory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html#newThread(java.util.concurrent.ForkJoinPool)
            /// </summary>
            public Java.Util.Concurrent.ForkJoinWorkerThread NewThread(Java.Util.Concurrent.ForkJoinPool arg0)
            {
                return IExecute<Java.Util.Concurrent.ForkJoinWorkerThread>("newThread", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ManagedBlocker
        public partial class ManagedBlocker
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.ManagedBlocker.html#block() throws java.lang.InterruptedException
            /// </summary>
            public bool Block()
            {
                return IExecute<bool>("block");
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.ManagedBlocker.html#isReleasable()
            /// </summary>
            public bool IsReleasable()
            {
                return IExecute<bool>("isReleasable");
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}