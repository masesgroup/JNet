/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Concurrent
{
    #region ConcurrentHashMap declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html"/>
    /// </summary>
    public partial class ConcurrentHashMap : Java.Util.AbstractMap
    {
        const string _bridgeClassName = "java.util.concurrent.ConcurrentHashMap";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConcurrentHashMap() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ConcurrentHashMap(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConcurrentHashMap(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region KeySetView declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.KeySetView.html"/>
        /// </summary>
        public partial class KeySetView : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeySetView>
        {
            const string _bridgeClassName = "java.util.concurrent.ConcurrentHashMap$KeySetView";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public KeySetView() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public KeySetView(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public KeySetView(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region KeySetView<, > declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.KeySetView.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        public partial class KeySetView<, > : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeySetView<, >>
        {
            const string _bridgeClassName = "java.util.concurrent.ConcurrentHashMap$KeySetView";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public KeySetView() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public KeySetView(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public KeySetView(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ConcurrentHashMap<, > declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class ConcurrentHashMap<, > : Java.Util.AbstractMap<, >
    {
        const string _bridgeClassName = "java.util.concurrent.ConcurrentHashMap";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConcurrentHashMap() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ConcurrentHashMap(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConcurrentHashMap(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region ConcurrentHashMap implementation
    public partial class ConcurrentHashMap
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public ConcurrentHashMap(int arg0, float arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public ConcurrentHashMap(int arg0, float arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public ConcurrentHashMap(int arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public ConcurrentHashMap(Java.Util.Map arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Util.Concurrent.ConcurrentMap(Java.Util.Concurrent.ConcurrentHashMap t) => t.Cast<Java.Util.Concurrent.ConcurrentMap>();
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Util.Concurrent.ConcurrentHashMap t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#newKeySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Concurrent.ConcurrentHashMap.KeySetView NewKeySet()
        {
            return SExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView>(LocalBridgeClazz, "newKeySet", "()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#newKeySet(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Concurrent.ConcurrentHashMap.KeySetView NewKeySet(int arg0)
        {
            return SExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView>(LocalBridgeClazz, "newKeySet", "(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduce(long,java.util.function.BiFunction,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Reduce(long arg0, Java.Util.Function.BiFunction arg1, Java.Util.Function.BiFunction arg2)
        {
            return IExecuteWithSignature("reduce", "(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntries(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ReduceEntries(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.BiFunction arg2)
        {
            return IExecuteWithSignature("reduceEntries", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeys(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ReduceKeys(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.BiFunction arg2)
        {
            return IExecuteWithSignature("reduceKeys", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValues(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ReduceValues(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.BiFunction arg2)
        {
            return IExecuteWithSignature("reduceValues", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#search(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Search(long arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature("search", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchEntries(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object SearchEntries(long arg0, Java.Util.Function.Function arg1)
        {
            return IExecuteWithSignature("searchEntries", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchKeys(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object SearchKeys(long arg0, Java.Util.Function.Function arg1)
        {
            return IExecuteWithSignature("searchKeys", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchValues(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object SearchValues(long arg0, Java.Util.Function.Function arg1)
        {
            return IExecuteWithSignature("searchValues", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEach(long,java.util.function.BiFunction,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public void ForEach(long arg0, Java.Util.Function.BiFunction arg1, Java.Util.Function.Consumer arg2)
        {
            IExecuteWithSignature("forEach", "(JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachEntry(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public void ForEachEntry(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.Consumer arg2)
        {
            IExecuteWithSignature("forEachEntry", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachKey(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public void ForEachKey(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.Consumer arg2)
        {
            IExecuteWithSignature("forEachKey", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachValue(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public void ForEachValue(long arg0, Java.Util.Function.Function arg1, Java.Util.Function.Consumer arg2)
        {
            IExecuteWithSignature("forEachValue", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#contains(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Contains(object arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public double ReduceEntriesToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3)
        {
            return IExecuteWithSignature<double>("reduceEntriesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public double ReduceKeysToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3)
        {
            return IExecuteWithSignature<double>("reduceKeysToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToDouble(long,java.util.function.ToDoubleBiFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public double ReduceToDouble(long arg0, Java.Util.Function.ToDoubleBiFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3)
        {
            return IExecuteWithSignature<double>("reduceToDouble", "(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public double ReduceValuesToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3)
        {
            return IExecuteWithSignature<double>("reduceValuesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public int ReduceEntriesToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3)
        {
            return IExecuteWithSignature<int>("reduceEntriesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public int ReduceKeysToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3)
        {
            return IExecuteWithSignature<int>("reduceKeysToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToInt(long,java.util.function.ToIntBiFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public int ReduceToInt(long arg0, Java.Util.Function.ToIntBiFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3)
        {
            return IExecuteWithSignature<int>("reduceToInt", "(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public int ReduceValuesToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3)
        {
            return IExecuteWithSignature<int>("reduceValuesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#keySet(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Concurrent.ConcurrentHashMap.KeySetView KeySet(object arg0)
        {
            return IExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView>("keySet", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#keys()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Enumeration Keys()
        {
            return IExecuteWithSignature<Java.Util.Enumeration>("keys", "()Ljava/util/Enumeration;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#elements()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Enumeration Elements()
        {
            return IExecuteWithSignature<Java.Util.Enumeration>("elements", "()Ljava/util/Enumeration;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntries(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Map.Entry ReduceEntries(long arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature<Java.Util.Map.Entry>("reduceEntries", "(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeys(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ReduceKeys(long arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature("reduceKeys", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#mappingCount()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public long MappingCount()
        {
            return IExecuteWithSignature<long>("mappingCount", "()J");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public long ReduceEntriesToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3)
        {
            return IExecuteWithSignature<long>("reduceEntriesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public long ReduceKeysToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3)
        {
            return IExecuteWithSignature<long>("reduceKeysToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToLong(long,java.util.function.ToLongBiFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public long ReduceToLong(long arg0, Java.Util.Function.ToLongBiFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3)
        {
            return IExecuteWithSignature<long>("reduceToLong", "(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public long ReduceValuesToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3)
        {
            return IExecuteWithSignature<long>("reduceValuesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValues(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ReduceValues(long arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature("reduceValues", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEach(long,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public void ForEach(long arg0, Java.Util.Function.BiConsumer arg1)
        {
            IExecuteWithSignature("forEach", "(JLjava/util/function/BiConsumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachEntry(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public void ForEachEntry(long arg0, Java.Util.Function.Consumer arg1)
        {
            IExecuteWithSignature("forEachEntry", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachKey(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public void ForEachKey(long arg0, Java.Util.Function.Consumer arg1)
        {
            IExecuteWithSignature("forEachKey", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachValue(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public void ForEachValue(long arg0, Java.Util.Function.Consumer arg1)
        {
            IExecuteWithSignature("forEachValue", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region KeySetView implementation
        public partial class KeySetView
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Util.Set(Java.Util.Concurrent.ConcurrentHashMap.KeySetView t) => t.Cast<Java.Util.Set>();
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Java.Util.Concurrent.ConcurrentHashMap.KeySetView t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.KeySetView.html#getMappedValue()"/> 
            /// </summary>
            public object MappedValue
            {
                get { return IExecuteWithSignature("getMappedValue", "()Ljava/lang/Object;"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeySetView<, > implementation
        public partial class KeySetView<, >
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Util.Set(Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > t) => t.Cast<Java.Util.Set>();
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > t) => t.Cast<Java.Io.Serializable>();
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Util.Concurrent.ConcurrentHashMap.KeySetView(Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > t) => t.Cast<Java.Util.Concurrent.ConcurrentHashMap.KeySetView>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.KeySetView.html#getMappedValue()"/> 
            /// </summary>
            public V MappedValue
            {
                get { return IExecuteWithSignature<V>("getMappedValue", "()Ljava/lang/Object;"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ConcurrentHashMap<, > implementation
    public partial class ConcurrentHashMap<, >
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        public ConcurrentHashMap(int arg0, float arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        public ConcurrentHashMap(int arg0, float arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public ConcurrentHashMap(int arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#%3Cinit%3E(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public ConcurrentHashMap(Java.Util.Map<, > arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Util.Concurrent.ConcurrentMap<, >(Java.Util.Concurrent.ConcurrentHashMap<, > t) => t.Cast<Java.Util.Concurrent.ConcurrentMap<, >>();
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Util.Concurrent.ConcurrentHashMap<, > t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Util.Concurrent.ConcurrentHashMap(Java.Util.Concurrent.ConcurrentHashMap<, > t) => t.Cast<Java.Util.Concurrent.ConcurrentHashMap>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#newKeySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > NewKeySet()
        {
            return SExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, >>(LocalBridgeClazz, "newKeySet", "()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#newKeySet(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > NewKeySet(int arg0)
        {
            return SExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, >>(LocalBridgeClazz, "newKeySet", "(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduce(long,java.util.function.BiFunction,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U Reduce<, , , , , >(long arg0, Java.Util.Function.BiFunction<, , > arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsU : U where Arg2objectSuperU : U where Arg2ExtendsU : U
        {
            return IExecuteWithSignature<U>("reduce", "(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntries(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U ReduceEntries<, , , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg1ExtendsU : U where Arg2objectSuperU : U where Arg2ExtendsU : U
        {
            return IExecuteWithSignature<U>("reduceEntries", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeys(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U ReduceKeys<, , , , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg1objectSuperK : K where Arg1ExtendsU : U where Arg2objectSuperU : U where Arg2ExtendsU : U
        {
            return IExecuteWithSignature<U>("reduceKeys", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValues(long,java.util.function.Function,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U ReduceValues<, , , , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg1objectSuperV : V where Arg1ExtendsU : U where Arg2objectSuperU : U where Arg2ExtendsU : U
        {
            return IExecuteWithSignature<U>("reduceValues", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#search(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U Search<, , , >(long arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsU : U
        {
            return IExecuteWithSignature<U>("search", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchEntries(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U SearchEntries<, >(long arg0, Java.Util.Function.Function<, > arg1) where Arg1ExtendsU : U
        {
            return IExecuteWithSignature<U>("searchEntries", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchKeys(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U SearchKeys<, , >(long arg0, Java.Util.Function.Function<, > arg1) where Arg1objectSuperK : K where Arg1ExtendsU : U
        {
            return IExecuteWithSignature<U>("searchKeys", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#searchValues(long,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U SearchValues<, , >(long arg0, Java.Util.Function.Function<, > arg1) where Arg1objectSuperV : V where Arg1ExtendsU : U
        {
            return IExecuteWithSignature<U>("searchValues", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEach(long,java.util.function.BiFunction,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        public void ForEach<, , , , >(long arg0, Java.Util.Function.BiFunction<, , > arg1, Java.Util.Function.Consumer arg2) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsU : U where Arg2objectSuperU : U
        {
            IExecuteWithSignature("forEach", "(JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachEntry(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        public void ForEachEntry<, , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.Consumer arg2) where Arg1ExtendsU : U where Arg2objectSuperU : U
        {
            IExecuteWithSignature("forEachEntry", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachKey(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        public void ForEachKey<, , , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.Consumer arg2) where Arg1objectSuperK : K where Arg1ExtendsU : U where Arg2objectSuperU : U
        {
            IExecuteWithSignature("forEachKey", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachValue(long,java.util.function.Function,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg2objectSuperU"><see cref=""/></typeparam>
        public void ForEachValue<, , , >(long arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.Consumer arg2) where Arg1objectSuperV : V where Arg1ExtendsU : U where Arg2objectSuperU : U
        {
            IExecuteWithSignature("forEachValue", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#contains(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Contains(object arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public double ReduceEntriesToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3)
        {
            return IExecuteWithSignature<double>("reduceEntriesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public double ReduceKeysToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3) where Arg1objectSuperK : K
        {
            return IExecuteWithSignature<double>("reduceKeysToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToDouble(long,java.util.function.ToDoubleBiFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public double ReduceToDouble<, >(long arg0, Java.Util.Function.ToDoubleBiFunction<, > arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3) where Arg1objectSuperK : K where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<double>("reduceToDouble", "(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public double ReduceValuesToDouble(long arg0, Java.Util.Function.ToDoubleFunction arg1, double arg2, Java.Util.Function.DoubleBinaryOperator arg3) where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<double>("reduceValuesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public int ReduceEntriesToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3)
        {
            return IExecuteWithSignature<int>("reduceEntriesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public int ReduceKeysToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3) where Arg1objectSuperK : K
        {
            return IExecuteWithSignature<int>("reduceKeysToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToInt(long,java.util.function.ToIntBiFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public int ReduceToInt<, >(long arg0, Java.Util.Function.ToIntBiFunction<, > arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3) where Arg1objectSuperK : K where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<int>("reduceToInt", "(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public int ReduceValuesToInt(long arg0, Java.Util.Function.ToIntFunction arg1, int arg2, Java.Util.Function.IntBinaryOperator arg3) where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<int>("reduceValuesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#keySet(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, > KeySet(V arg0)
        {
            return IExecuteWithSignature<Java.Util.Concurrent.ConcurrentHashMap.KeySetView<, >>("keySet", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#keys()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Enumeration Keys()
        {
            return IExecuteWithSignature<Java.Util.Enumeration>("keys", "()Ljava/util/Enumeration;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#elements()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Enumeration Elements()
        {
            return IExecuteWithSignature<Java.Util.Enumeration>("elements", "()Ljava/util/Enumeration;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntries(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1ExtendsJava_Util_Map_Entry___"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Map.Entry<, > ReduceEntries(long arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1ExtendsJava_Util_Map_Entry___ : Java.Util.Map.Entry<, >
        {
            return IExecuteWithSignature<Java.Util.Map.Entry<, >>("reduceEntries", "(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeys(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public K ReduceKeys<, >(long arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1ExtendsK : K
        {
            return IExecuteWithSignature<K>("reduceKeys", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#mappingCount()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public long MappingCount()
        {
            return IExecuteWithSignature<long>("mappingCount", "()J");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public long ReduceEntriesToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3)
        {
            return IExecuteWithSignature<long>("reduceEntriesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public long ReduceKeysToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3) where Arg1objectSuperK : K
        {
            return IExecuteWithSignature<long>("reduceKeysToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceToLong(long,java.util.function.ToLongBiFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public long ReduceToLong<, >(long arg0, Java.Util.Function.ToLongBiFunction<, > arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3) where Arg1objectSuperK : K where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<long>("reduceToLong", "(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public long ReduceValuesToLong(long arg0, Java.Util.Function.ToLongFunction arg1, long arg2, Java.Util.Function.LongBinaryOperator arg3) where Arg1objectSuperV : V
        {
            return IExecuteWithSignature<long>("reduceValuesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#reduceValues(long,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public V ReduceValues<, >(long arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperV : V where Arg1ExtendsV : V
        {
            return IExecuteWithSignature<V>("reduceValues", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEach(long,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        public void ForEach<, >(long arg0, Java.Util.Function.BiConsumer<, > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V
        {
            IExecuteWithSignature("forEach", "(JLjava/util/function/BiConsumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachEntry(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperJava_Util_Map_Entry___"><see cref=""/></typeparam>
        public void ForEachEntry(long arg0, Java.Util.Function.Consumer arg1) where Arg1objectSuperJava_Util_Map_Entry___ : Java.Util.Map.Entry<, >
        {
            IExecuteWithSignature("forEachEntry", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachKey(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        public void ForEachKey(long arg0, Java.Util.Function.Consumer arg1) where Arg1objectSuperK : K
        {
            IExecuteWithSignature("forEachKey", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#forEachValue(long,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        public void ForEachValue(long arg0, Java.Util.Function.Consumer arg1) where Arg1objectSuperV : V
        {
            IExecuteWithSignature("forEachValue", "(JLjava/util/function/Consumer;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}