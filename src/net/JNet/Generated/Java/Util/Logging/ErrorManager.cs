/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Logging
{
    #region ErrorManager declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html"/>
    /// </summary>
    public partial class ErrorManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ErrorManager>
    {
        const string _bridgeClassName = "java.util.logging.ErrorManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ErrorManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ErrorManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ErrorManager implementation
    public partial class ErrorManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#CLOSE_FAILURE"/>
        /// </summary>
        public static int CLOSE_FAILURE { get { if (!_CLOSE_FAILUREReady) { _CLOSE_FAILUREContent = SGetField<int>(LocalBridgeClazz, "CLOSE_FAILURE"); _CLOSE_FAILUREReady = true; } return _CLOSE_FAILUREContent; } }
        private static int _CLOSE_FAILUREContent = default;
        private static bool _CLOSE_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#FLUSH_FAILURE"/>
        /// </summary>
        public static int FLUSH_FAILURE { get { if (!_FLUSH_FAILUREReady) { _FLUSH_FAILUREContent = SGetField<int>(LocalBridgeClazz, "FLUSH_FAILURE"); _FLUSH_FAILUREReady = true; } return _FLUSH_FAILUREContent; } }
        private static int _FLUSH_FAILUREContent = default;
        private static bool _FLUSH_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#FORMAT_FAILURE"/>
        /// </summary>
        public static int FORMAT_FAILURE { get { if (!_FORMAT_FAILUREReady) { _FORMAT_FAILUREContent = SGetField<int>(LocalBridgeClazz, "FORMAT_FAILURE"); _FORMAT_FAILUREReady = true; } return _FORMAT_FAILUREContent; } }
        private static int _FORMAT_FAILUREContent = default;
        private static bool _FORMAT_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#GENERIC_FAILURE"/>
        /// </summary>
        public static int GENERIC_FAILURE { get { if (!_GENERIC_FAILUREReady) { _GENERIC_FAILUREContent = SGetField<int>(LocalBridgeClazz, "GENERIC_FAILURE"); _GENERIC_FAILUREReady = true; } return _GENERIC_FAILUREContent; } }
        private static int _GENERIC_FAILUREContent = default;
        private static bool _GENERIC_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#OPEN_FAILURE"/>
        /// </summary>
        public static int OPEN_FAILURE { get { if (!_OPEN_FAILUREReady) { _OPEN_FAILUREContent = SGetField<int>(LocalBridgeClazz, "OPEN_FAILURE"); _OPEN_FAILUREReady = true; } return _OPEN_FAILUREContent; } }
        private static int _OPEN_FAILUREContent = default;
        private static bool _OPEN_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#WRITE_FAILURE"/>
        /// </summary>
        public static int WRITE_FAILURE { get { if (!_WRITE_FAILUREReady) { _WRITE_FAILUREContent = SGetField<int>(LocalBridgeClazz, "WRITE_FAILURE"); _WRITE_FAILUREReady = true; } return _WRITE_FAILUREContent; } }
        private static int _WRITE_FAILUREContent = default;
        private static bool _WRITE_FAILUREReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/ErrorManager.html#error(java.lang.String,java.lang.Exception,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Exception"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void Error(Java.Lang.String arg0, MASES.JCOBridge.C2JBridge.JVMBridgeException arg1, int arg2)
        {
            IExecuteWithSignature("error", "(Ljava/lang/String;Ljava/lang/Exception;I)V", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}