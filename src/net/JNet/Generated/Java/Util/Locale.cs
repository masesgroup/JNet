/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region Locale
    public partial class Locale
    {
        #region Constructors
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public Locale(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public Locale(Java.Lang.String arg0, Java.Lang.String arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public Locale(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.Locale"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Java.Util.Locale t) => t.Cast<Java.Lang.Cloneable>();
        /// <summary>
        /// Converter from <see cref="Java.Util.Locale"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Util.Locale t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#PRIVATE_USE_EXTENSION"/>
        /// </summary>
        public static char PRIVATE_USE_EXTENSION { get { if (!_PRIVATE_USE_EXTENSIONReady) { _PRIVATE_USE_EXTENSIONContent = SGetField<char>(LocalBridgeClazz, "PRIVATE_USE_EXTENSION"); _PRIVATE_USE_EXTENSIONReady = true; } return _PRIVATE_USE_EXTENSIONContent; } }
        private static char _PRIVATE_USE_EXTENSIONContent = default;
        private static bool _PRIVATE_USE_EXTENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#UNICODE_LOCALE_EXTENSION"/>
        /// </summary>
        public static char UNICODE_LOCALE_EXTENSION { get { if (!_UNICODE_LOCALE_EXTENSIONReady) { _UNICODE_LOCALE_EXTENSIONContent = SGetField<char>(LocalBridgeClazz, "UNICODE_LOCALE_EXTENSION"); _UNICODE_LOCALE_EXTENSIONReady = true; } return _UNICODE_LOCALE_EXTENSIONContent; } }
        private static char _UNICODE_LOCALE_EXTENSIONContent = default;
        private static bool _UNICODE_LOCALE_EXTENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#CANADA"/>
        /// </summary>
        public static Java.Util.Locale CANADA { get { if (!_CANADAReady) { _CANADAContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "CANADA"); _CANADAReady = true; } return _CANADAContent; } }
        private static Java.Util.Locale _CANADAContent = default;
        private static bool _CANADAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#CANADA_FRENCH"/>
        /// </summary>
        public static Java.Util.Locale CANADA_FRENCH { get { if (!_CANADA_FRENCHReady) { _CANADA_FRENCHContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "CANADA_FRENCH"); _CANADA_FRENCHReady = true; } return _CANADA_FRENCHContent; } }
        private static Java.Util.Locale _CANADA_FRENCHContent = default;
        private static bool _CANADA_FRENCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#CHINA"/>
        /// </summary>
        public static Java.Util.Locale CHINA { get { if (!_CHINAReady) { _CHINAContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "CHINA"); _CHINAReady = true; } return _CHINAContent; } }
        private static Java.Util.Locale _CHINAContent = default;
        private static bool _CHINAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#CHINESE"/>
        /// </summary>
        public static Java.Util.Locale CHINESE { get { if (!_CHINESEReady) { _CHINESEContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "CHINESE"); _CHINESEReady = true; } return _CHINESEContent; } }
        private static Java.Util.Locale _CHINESEContent = default;
        private static bool _CHINESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#ENGLISH"/>
        /// </summary>
        public static Java.Util.Locale ENGLISH { get { if (!_ENGLISHReady) { _ENGLISHContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "ENGLISH"); _ENGLISHReady = true; } return _ENGLISHContent; } }
        private static Java.Util.Locale _ENGLISHContent = default;
        private static bool _ENGLISHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#FRANCE"/>
        /// </summary>
        public static Java.Util.Locale FRANCE { get { if (!_FRANCEReady) { _FRANCEContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "FRANCE"); _FRANCEReady = true; } return _FRANCEContent; } }
        private static Java.Util.Locale _FRANCEContent = default;
        private static bool _FRANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#FRENCH"/>
        /// </summary>
        public static Java.Util.Locale FRENCH { get { if (!_FRENCHReady) { _FRENCHContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "FRENCH"); _FRENCHReady = true; } return _FRENCHContent; } }
        private static Java.Util.Locale _FRENCHContent = default;
        private static bool _FRENCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#GERMAN"/>
        /// </summary>
        public static Java.Util.Locale GERMAN { get { if (!_GERMANReady) { _GERMANContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "GERMAN"); _GERMANReady = true; } return _GERMANContent; } }
        private static Java.Util.Locale _GERMANContent = default;
        private static bool _GERMANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#GERMANY"/>
        /// </summary>
        public static Java.Util.Locale GERMANY { get { if (!_GERMANYReady) { _GERMANYContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "GERMANY"); _GERMANYReady = true; } return _GERMANYContent; } }
        private static Java.Util.Locale _GERMANYContent = default;
        private static bool _GERMANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#ITALIAN"/>
        /// </summary>
        public static Java.Util.Locale ITALIAN { get { if (!_ITALIANReady) { _ITALIANContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "ITALIAN"); _ITALIANReady = true; } return _ITALIANContent; } }
        private static Java.Util.Locale _ITALIANContent = default;
        private static bool _ITALIANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#ITALY"/>
        /// </summary>
        public static Java.Util.Locale ITALY { get { if (!_ITALYReady) { _ITALYContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "ITALY"); _ITALYReady = true; } return _ITALYContent; } }
        private static Java.Util.Locale _ITALYContent = default;
        private static bool _ITALYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#JAPAN"/>
        /// </summary>
        public static Java.Util.Locale JAPAN { get { if (!_JAPANReady) { _JAPANContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "JAPAN"); _JAPANReady = true; } return _JAPANContent; } }
        private static Java.Util.Locale _JAPANContent = default;
        private static bool _JAPANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#JAPANESE"/>
        /// </summary>
        public static Java.Util.Locale JAPANESE { get { if (!_JAPANESEReady) { _JAPANESEContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "JAPANESE"); _JAPANESEReady = true; } return _JAPANESEContent; } }
        private static Java.Util.Locale _JAPANESEContent = default;
        private static bool _JAPANESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#KOREA"/>
        /// </summary>
        public static Java.Util.Locale KOREA { get { if (!_KOREAReady) { _KOREAContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "KOREA"); _KOREAReady = true; } return _KOREAContent; } }
        private static Java.Util.Locale _KOREAContent = default;
        private static bool _KOREAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#KOREAN"/>
        /// </summary>
        public static Java.Util.Locale KOREAN { get { if (!_KOREANReady) { _KOREANContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "KOREAN"); _KOREANReady = true; } return _KOREANContent; } }
        private static Java.Util.Locale _KOREANContent = default;
        private static bool _KOREANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#PRC"/>
        /// </summary>
        public static Java.Util.Locale PRC { get { if (!_PRCReady) { _PRCContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "PRC"); _PRCReady = true; } return _PRCContent; } }
        private static Java.Util.Locale _PRCContent = default;
        private static bool _PRCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#ROOT"/>
        /// </summary>
        public static Java.Util.Locale ROOT { get { if (!_ROOTReady) { _ROOTContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "ROOT"); _ROOTReady = true; } return _ROOTContent; } }
        private static Java.Util.Locale _ROOTContent = default;
        private static bool _ROOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#SIMPLIFIED_CHINESE"/>
        /// </summary>
        public static Java.Util.Locale SIMPLIFIED_CHINESE { get { if (!_SIMPLIFIED_CHINESEReady) { _SIMPLIFIED_CHINESEContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "SIMPLIFIED_CHINESE"); _SIMPLIFIED_CHINESEReady = true; } return _SIMPLIFIED_CHINESEContent; } }
        private static Java.Util.Locale _SIMPLIFIED_CHINESEContent = default;
        private static bool _SIMPLIFIED_CHINESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#TAIWAN"/>
        /// </summary>
        public static Java.Util.Locale TAIWAN { get { if (!_TAIWANReady) { _TAIWANContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "TAIWAN"); _TAIWANReady = true; } return _TAIWANContent; } }
        private static Java.Util.Locale _TAIWANContent = default;
        private static bool _TAIWANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#TRADITIONAL_CHINESE"/>
        /// </summary>
        public static Java.Util.Locale TRADITIONAL_CHINESE { get { if (!_TRADITIONAL_CHINESEReady) { _TRADITIONAL_CHINESEContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "TRADITIONAL_CHINESE"); _TRADITIONAL_CHINESEReady = true; } return _TRADITIONAL_CHINESEContent; } }
        private static Java.Util.Locale _TRADITIONAL_CHINESEContent = default;
        private static bool _TRADITIONAL_CHINESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#UK"/>
        /// </summary>
        public static Java.Util.Locale UK { get { if (!_UKReady) { _UKContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "UK"); _UKReady = true; } return _UKContent; } }
        private static Java.Util.Locale _UKContent = default;
        private static bool _UKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#US"/>
        /// </summary>
        public static Java.Util.Locale US { get { if (!_USReady) { _USContent = SGetField<Java.Util.Locale>(LocalBridgeClazz, "US"); _USReady = true; } return _USContent; } }
        private static Java.Util.Locale _USContent = default;
        private static bool _USReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getAvailableLocales()"/> 
        /// </summary>
        public static Java.Util.Locale[] AvailableLocales
        {
            get { return SExecuteWithSignatureArray<Java.Util.Locale>(LocalBridgeClazz, "getAvailableLocales", "()[Ljava/util/Locale;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDefault()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#setDefault(java.util.Locale)"/>
        /// </summary>
        public static Java.Util.Locale Default
        {
            get { return SExecuteWithSignature<Java.Util.Locale>(LocalBridgeClazz, "getDefault", "()Ljava/util/Locale;"); } set { SExecuteWithSignature(LocalBridgeClazz, "setDefault", "(Ljava/util/Locale;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getISOCountries()"/> 
        /// </summary>
        public static Java.Lang.String[] ISOCountries
        {
            get { return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getISOCountries", "()[Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getISOLanguages()"/> 
        /// </summary>
        public static Java.Lang.String[] ISOLanguages
        {
            get { return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getISOLanguages", "()[Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#lookupTag(java.util.List,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String LookupTag(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Lang.String> arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "lookupTag", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#filterTags(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg2"><see cref="Java.Util.Locale.FilteringMode"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Lang.String> FilterTags(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Lang.String> arg1, Java.Util.Locale.FilteringMode arg2)
        {
            return SExecute<Java.Util.List<Java.Lang.String>>(LocalBridgeClazz, "filterTags", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#filterTags(java.util.List,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Lang.String> FilterTags(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Lang.String> arg1)
        {
            return SExecute<Java.Util.List<Java.Lang.String>>(LocalBridgeClazz, "filterTags", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#filter(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg2"><see cref="Java.Util.Locale.FilteringMode"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Util.Locale> Filter(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Util.Locale> arg1, Java.Util.Locale.FilteringMode arg2)
        {
            return SExecute<Java.Util.List<Java.Util.Locale>>(LocalBridgeClazz, "filter", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#filter(java.util.List,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Util.Locale> Filter(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Util.Locale> arg1)
        {
            return SExecute<Java.Util.List<Java.Util.Locale>>(LocalBridgeClazz, "filter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#forLanguageTag(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public static Java.Util.Locale ForLanguageTag(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Util.Locale>(LocalBridgeClazz, "forLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale.Category"/></param>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public static Java.Util.Locale GetDefault(Java.Util.Locale.Category arg0)
        {
            return SExecuteWithSignature<Java.Util.Locale>(LocalBridgeClazz, "getDefault", "(Ljava/util/Locale$Category;)Ljava/util/Locale;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#lookup(java.util.List,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public static Java.Util.Locale Lookup(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Collection<Java.Util.Locale> arg1)
        {
            return SExecute<Java.Util.Locale>(LocalBridgeClazz, "lookup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getISOCountries(java.util.Locale.IsoCountryCode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale.IsoCountryCode"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Java.Lang.String> GetISOCountries(Java.Util.Locale.IsoCountryCode arg0)
        {
            return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "getISOCountries", "(Ljava/util/Locale$IsoCountryCode;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#setDefault(java.util.Locale.Category,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale.Category"/></param>
        /// <param name="arg1"><see cref="Java.Util.Locale"/></param>
        public static void SetDefault(Java.Util.Locale.Category arg0, Java.Util.Locale arg1)
        {
            SExecute(LocalBridgeClazz, "setDefault", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getCountry()"/> 
        /// </summary>
        public Java.Lang.String Country
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCountry", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayCountry()"/> 
        /// </summary>
        public Java.Lang.String DisplayCountry
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDisplayCountry", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayLanguage()"/> 
        /// </summary>
        public Java.Lang.String DisplayLanguage
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDisplayLanguage", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayName()"/> 
        /// </summary>
        public Java.Lang.String DisplayName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayScript()"/> 
        /// </summary>
        public Java.Lang.String DisplayScript
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDisplayScript", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayVariant()"/> 
        /// </summary>
        public Java.Lang.String DisplayVariant
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDisplayVariant", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getExtensionKeys()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.Character> ExtensionKeys
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.Character>>("getExtensionKeys", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getISO3Country()"/> 
        /// </summary>
        public Java.Lang.String ISO3Country
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getISO3Country", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getISO3Language()"/> 
        /// </summary>
        public Java.Lang.String ISO3Language
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getISO3Language", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getLanguage()"/> 
        /// </summary>
        public Java.Lang.String Language
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getLanguage", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getScript()"/> 
        /// </summary>
        public Java.Lang.String Script
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getScript", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getUnicodeLocaleAttributes()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.String> UnicodeLocaleAttributes
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getUnicodeLocaleAttributes", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getUnicodeLocaleKeys()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.String> UnicodeLocaleKeys
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getUnicodeLocaleKeys", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getVariant()"/> 
        /// </summary>
        public Java.Lang.String Variant
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getVariant", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#hasExtensions()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasExtensions()
        {
            return IExecuteWithSignature<bool>("hasExtensions", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayCountry(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayCountry(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayCountry", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayLanguage(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayLanguage(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayLanguage", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayName(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayScript(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayScript(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayScript", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getDisplayVariant(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayVariant(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayVariant", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getExtension(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetExtension(char arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getExtension", "(C)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#getUnicodeLocaleType(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUnicodeLocaleType(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#toLanguageTag()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToLanguageTag()
        {
            return IExecuteWithSignature<Java.Lang.String>("toLanguageTag", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html#stripExtensions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public Java.Util.Locale StripExtensions()
        {
            return IExecuteWithSignature<Java.Util.Locale>("stripExtensions", "()Ljava/util/Locale;");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale"/></returns>
            public Java.Util.Locale Build()
            {
                return IExecuteWithSignature<Java.Util.Locale>("build", "()Ljava/util/Locale;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#addUnicodeLocaleAttribute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder AddUnicodeLocaleAttribute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("addUnicodeLocaleAttribute", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#clear()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder Clear()
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("clear", "()Ljava/util/Locale$Builder;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#clearExtensions()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder ClearExtensions()
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("clearExtensions", "()Ljava/util/Locale$Builder;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#removeUnicodeLocaleAttribute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder RemoveUnicodeLocaleAttribute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("removeUnicodeLocaleAttribute", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setExtension(char,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="char"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetExtension(char arg0, Java.Lang.String arg1)
            {
                return IExecute<Java.Util.Locale.Builder>("setExtension", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setLanguage(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetLanguage(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setLanguage", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setLanguageTag(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetLanguageTag(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setLocale(java.util.Locale)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetLocale(Java.Util.Locale arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setLocale", "(Ljava/util/Locale;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setRegion(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetRegion(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setRegion", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setScript(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetScript(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setScript", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setUnicodeLocaleKeyword(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetUnicodeLocaleKeyword(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Java.Util.Locale.Builder>("setUnicodeLocaleKeyword", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Builder.html#setVariant(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Builder"/></returns>
            public Java.Util.Locale.Builder SetVariant(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Locale.Builder>("setVariant", "(Ljava/lang/String;)Ljava/util/Locale$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Category
        public partial class Category
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Category.html#DISPLAY"/>
            /// </summary>
            public static Java.Util.Locale.Category DISPLAY { get { if (!_DISPLAYReady) { _DISPLAYContent = SGetField<Java.Util.Locale.Category>(LocalBridgeClazz, "DISPLAY"); _DISPLAYReady = true; } return _DISPLAYContent; } }
            private static Java.Util.Locale.Category _DISPLAYContent = default;
            private static bool _DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Category.html#FORMAT"/>
            /// </summary>
            public static Java.Util.Locale.Category FORMAT { get { if (!_FORMATReady) { _FORMATContent = SGetField<Java.Util.Locale.Category>(LocalBridgeClazz, "FORMAT"); _FORMATReady = true; } return _FORMATContent; } }
            private static Java.Util.Locale.Category _FORMATContent = default;
            private static bool _FORMATReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Category.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.Category"/></returns>
            public static Java.Util.Locale.Category ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Util.Locale.Category>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/util/Locale$Category;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.Category.html#values()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale.Category"/></returns>
            public static Java.Util.Locale.Category[] Values()
            {
                return SExecuteWithSignatureArray<Java.Util.Locale.Category>(LocalBridgeClazz, "values", "()[Ljava/util/Locale$Category;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FilteringMode
        public partial class FilteringMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#AUTOSELECT_FILTERING"/>
            /// </summary>
            public static Java.Util.Locale.FilteringMode AUTOSELECT_FILTERING { get { if (!_AUTOSELECT_FILTERINGReady) { _AUTOSELECT_FILTERINGContent = SGetField<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "AUTOSELECT_FILTERING"); _AUTOSELECT_FILTERINGReady = true; } return _AUTOSELECT_FILTERINGContent; } }
            private static Java.Util.Locale.FilteringMode _AUTOSELECT_FILTERINGContent = default;
            private static bool _AUTOSELECT_FILTERINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#EXTENDED_FILTERING"/>
            /// </summary>
            public static Java.Util.Locale.FilteringMode EXTENDED_FILTERING { get { if (!_EXTENDED_FILTERINGReady) { _EXTENDED_FILTERINGContent = SGetField<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "EXTENDED_FILTERING"); _EXTENDED_FILTERINGReady = true; } return _EXTENDED_FILTERINGContent; } }
            private static Java.Util.Locale.FilteringMode _EXTENDED_FILTERINGContent = default;
            private static bool _EXTENDED_FILTERINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#IGNORE_EXTENDED_RANGES"/>
            /// </summary>
            public static Java.Util.Locale.FilteringMode IGNORE_EXTENDED_RANGES { get { if (!_IGNORE_EXTENDED_RANGESReady) { _IGNORE_EXTENDED_RANGESContent = SGetField<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "IGNORE_EXTENDED_RANGES"); _IGNORE_EXTENDED_RANGESReady = true; } return _IGNORE_EXTENDED_RANGESContent; } }
            private static Java.Util.Locale.FilteringMode _IGNORE_EXTENDED_RANGESContent = default;
            private static bool _IGNORE_EXTENDED_RANGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#MAP_EXTENDED_RANGES"/>
            /// </summary>
            public static Java.Util.Locale.FilteringMode MAP_EXTENDED_RANGES { get { if (!_MAP_EXTENDED_RANGESReady) { _MAP_EXTENDED_RANGESContent = SGetField<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "MAP_EXTENDED_RANGES"); _MAP_EXTENDED_RANGESReady = true; } return _MAP_EXTENDED_RANGESContent; } }
            private static Java.Util.Locale.FilteringMode _MAP_EXTENDED_RANGESContent = default;
            private static bool _MAP_EXTENDED_RANGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#REJECT_EXTENDED_RANGES"/>
            /// </summary>
            public static Java.Util.Locale.FilteringMode REJECT_EXTENDED_RANGES { get { if (!_REJECT_EXTENDED_RANGESReady) { _REJECT_EXTENDED_RANGESContent = SGetField<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "REJECT_EXTENDED_RANGES"); _REJECT_EXTENDED_RANGESReady = true; } return _REJECT_EXTENDED_RANGESContent; } }
            private static Java.Util.Locale.FilteringMode _REJECT_EXTENDED_RANGESContent = default;
            private static bool _REJECT_EXTENDED_RANGESReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.FilteringMode"/></returns>
            public static Java.Util.Locale.FilteringMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/util/Locale$FilteringMode;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.FilteringMode.html#values()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale.FilteringMode"/></returns>
            public static Java.Util.Locale.FilteringMode[] Values()
            {
                return SExecuteWithSignatureArray<Java.Util.Locale.FilteringMode>(LocalBridgeClazz, "values", "()[Ljava/util/Locale$FilteringMode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region IsoCountryCode
        public partial class IsoCountryCode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.IsoCountryCode.html#PART1_ALPHA2"/>
            /// </summary>
            public static Java.Util.Locale.IsoCountryCode PART1_ALPHA2 { get { if (!_PART1_ALPHA2Ready) { _PART1_ALPHA2Content = SGetField<Java.Util.Locale.IsoCountryCode>(LocalBridgeClazz, "PART1_ALPHA2"); _PART1_ALPHA2Ready = true; } return _PART1_ALPHA2Content; } }
            private static Java.Util.Locale.IsoCountryCode _PART1_ALPHA2Content = default;
            private static bool _PART1_ALPHA2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.IsoCountryCode.html#PART1_ALPHA3"/>
            /// </summary>
            public static Java.Util.Locale.IsoCountryCode PART1_ALPHA3 { get { if (!_PART1_ALPHA3Ready) { _PART1_ALPHA3Content = SGetField<Java.Util.Locale.IsoCountryCode>(LocalBridgeClazz, "PART1_ALPHA3"); _PART1_ALPHA3Ready = true; } return _PART1_ALPHA3Content; } }
            private static Java.Util.Locale.IsoCountryCode _PART1_ALPHA3Content = default;
            private static bool _PART1_ALPHA3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.IsoCountryCode.html#PART3"/>
            /// </summary>
            public static Java.Util.Locale.IsoCountryCode PART3 { get { if (!_PART3Ready) { _PART3Content = SGetField<Java.Util.Locale.IsoCountryCode>(LocalBridgeClazz, "PART3"); _PART3Ready = true; } return _PART3Content; } }
            private static Java.Util.Locale.IsoCountryCode _PART3Content = default;
            private static bool _PART3Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.IsoCountryCode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Locale.IsoCountryCode"/></returns>
            public static Java.Util.Locale.IsoCountryCode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Util.Locale.IsoCountryCode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Ljava/util/Locale$IsoCountryCode;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.IsoCountryCode.html#values()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Locale.IsoCountryCode"/></returns>
            public static Java.Util.Locale.IsoCountryCode[] Values()
            {
                return SExecuteWithSignatureArray<Java.Util.Locale.IsoCountryCode>(LocalBridgeClazz, "values", "()[Ljava/util/Locale$IsoCountryCode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region LanguageRange
        public partial class LanguageRange
        {
            #region Constructors
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#%3Cinit%3E(java.lang.String,double)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="double"/></param>
            public LanguageRange(Java.Lang.String arg0, double arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public LanguageRange(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#MAX_WEIGHT"/>
            /// </summary>
            public static double MAX_WEIGHT { get { if (!_MAX_WEIGHTReady) { _MAX_WEIGHTContent = SGetField<double>(LocalBridgeClazz, "MAX_WEIGHT"); _MAX_WEIGHTReady = true; } return _MAX_WEIGHTContent; } }
            private static double _MAX_WEIGHTContent = default;
            private static bool _MAX_WEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#MIN_WEIGHT"/>
            /// </summary>
            public static double MIN_WEIGHT { get { if (!_MIN_WEIGHTReady) { _MIN_WEIGHTContent = SGetField<double>(LocalBridgeClazz, "MIN_WEIGHT"); _MIN_WEIGHTReady = true; } return _MIN_WEIGHTContent; } }
            private static double _MIN_WEIGHTContent = default;
            private static bool _MIN_WEIGHTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#mapEquivalents(java.util.List,java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <returns><see cref="Java.Util.List"/></returns>
            public static Java.Util.List<Java.Util.Locale.LanguageRange> MapEquivalents(Java.Util.List<Java.Util.Locale.LanguageRange> arg0, Java.Util.Map<Java.Lang.String, Java.Util.List<Java.Lang.String>> arg1)
            {
                return SExecute<Java.Util.List<Java.Util.Locale.LanguageRange>>(LocalBridgeClazz, "mapEquivalents", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#parse(java.lang.String,java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <returns><see cref="Java.Util.List"/></returns>
            public static Java.Util.List<Java.Util.Locale.LanguageRange> Parse(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Util.List<Java.Lang.String>> arg1)
            {
                return SExecute<Java.Util.List<Java.Util.Locale.LanguageRange>>(LocalBridgeClazz, "parse", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#parse(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.List"/></returns>
            public static Java.Util.List<Java.Util.Locale.LanguageRange> Parse(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Util.List<Java.Util.Locale.LanguageRange>>(LocalBridgeClazz, "parse", "(Ljava/lang/String;)Ljava/util/List;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#getRange()"/> 
            /// </summary>
            public Java.Lang.String Range
            {
                get { return IExecuteWithSignature<Java.Lang.String>("getRange", "()Ljava/lang/String;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.LanguageRange.html#getWeight()"/> 
            /// </summary>
            public double Weight
            {
                get { return IExecuteWithSignature<double>("getWeight", "()D"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}