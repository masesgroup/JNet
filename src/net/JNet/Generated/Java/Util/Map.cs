/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region Map declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html"/>
    /// </summary>
    public partial class Map : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Map>
    {
        const string _bridgeClassName = "java.util.Map";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Map class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Map class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Entry declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html"/>
        /// </summary>
        public partial class Entry : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Entry>
        {
            const string _bridgeClassName = "java.util.Map$Entry";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Entry class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Entry class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Entry<, > declaration
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        public partial class Entry<, > : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Entry<, >>
        {
            const string _bridgeClassName = "java.util.Map$Entry";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Entry class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Entry class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Map<, > declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class Map<, > : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Map<, >>
    {
        const string _bridgeClassName = "java.util.Map";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Map class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Map class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Map(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region Map implementation
    public partial class Map
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#copyOf(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map CopyOf(Java.Util.Map arg0)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "copyOf", "(Ljava/util/Map;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of()
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <param name="arg16"><see cref=""/></param>
        /// <param name="arg17"><see cref=""/></param>
        /// <param name="arg18"><see cref=""/></param>
        /// <param name="arg19"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <param name="arg16"><see cref=""/></param>
        /// <param name="arg17"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1, object arg2, object arg3)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map Of(object arg0, object arg1)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#ofEntries(java.util.Map.Entry...)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map OfEntries(params Java.Util.Map.Entry[] arg0)
        {
            return SExecuteWithSignature<Java.Util.Map>(LocalBridgeClazz, "ofEntries", "([Ljava/util/Map$Entry;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#entry(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map.Entry EntryMethod(object arg0, object arg1)
        {
            return SExecuteWithSignature<Java.Util.Map.Entry>(LocalBridgeClazz, "entry", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsKey(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool ContainsKey(object arg0)
        {
            return IExecuteWithSignature<bool>("containsKey", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsValue(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool ContainsValue(object arg0)
        {
            return IExecuteWithSignature<bool>("containsValue", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#size()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#values()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Collection Values()
        {
            return IExecuteWithSignature<Java.Util.Collection>("values", "()Ljava/util/Collection;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#entrySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Set EntrySet()
        {
            return IExecuteWithSignature<Java.Util.Set>("entrySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#keySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Set KeySet()
        {
            return IExecuteWithSignature<Java.Util.Set>("keySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Get(object arg0)
        {
            return IExecuteWithSignature("get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Put(object arg0, object arg1)
        {
            return IExecuteWithSignature("put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Remove(object arg0)
        {
            return IExecuteWithSignature("remove", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void PutAll(Java.Util.Map arg0)
        {
            IExecuteWithSignature("putAll", "(Ljava/util/Map;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Remove(object arg0, object arg1)
        {
            return IExecuteWithSignature<bool>("remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Replace(object arg0, object arg1, object arg2)
        {
            return IExecuteWithSignature<bool>("replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Compute(object arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature("compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ComputeIfAbsent(object arg0, Java.Util.Function.Function arg1)
        {
            return IExecuteWithSignature("computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object ComputeIfPresent(object arg0, Java.Util.Function.BiFunction arg1)
        {
            return IExecuteWithSignature("computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object GetOrDefault(object arg0, object arg1)
        {
            return IExecuteWithSignature("getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Merge(object arg0, object arg1, Java.Util.Function.BiFunction arg2)
        {
            return IExecuteWithSignature("merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object PutIfAbsent(object arg0, object arg1)
        {
            return IExecuteWithSignature("putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Replace(object arg0, object arg1)
        {
            return IExecuteWithSignature("replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void ForEach(Java.Util.Function.BiConsumer arg0)
        {
            IExecuteWithSignature("forEach", "(Ljava/util/function/BiConsumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void ReplaceAll(Java.Util.Function.BiFunction arg0)
        {
            IExecuteWithSignature("replaceAll", "(Ljava/util/function/BiFunction;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Entry implementation
        public partial class Entry
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByKey()"/>
            /// </summary>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByKey()
            {
                return SExecute<Java.Util.Comparator>(LocalBridgeClazz, "comparingByKey");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByKey(java.util.Comparator)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByKey(Java.Util.Comparator arg0)
            {
                return SExecuteWithSignature<Java.Util.Comparator>(LocalBridgeClazz, "comparingByKey", "(Ljava/util/Comparator;)Ljava/util/Comparator;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByValue()"/>
            /// </summary>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByValue()
            {
                return SExecute<Java.Util.Comparator>(LocalBridgeClazz, "comparingByValue");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByValue(java.util.Comparator)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByValue(Java.Util.Comparator arg0)
            {
                return SExecuteWithSignature<Java.Util.Comparator>(LocalBridgeClazz, "comparingByValue", "(Ljava/util/Comparator;)Ljava/util/Comparator;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#getKey()"/> 
            /// </summary>
            public object Key
            {
                get { return IExecuteWithSignature("getKey", "()Ljava/lang/Object;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#getValue()"/> 
            /// </summary>
            public object Value
            {
                get { return IExecuteWithSignature("getValue", "()Ljava/lang/Object;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#setValue(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <returns><see cref=""/></returns>
            public object SetValue(object arg0)
            {
                return IExecuteWithSignature("setValue", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Entry<, > implementation
        public partial class Entry<, >
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref=""/> to <see cref=""/>
            /// </summary>
            public static implicit operator Java.Util.Map.Entry(Java.Util.Map.Entry<, > t) => t.Cast<Java.Util.Map.Entry>();

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByKey()"/>
            /// </summary>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByKey()
            {
                return SExecute<Java.Util.Comparator>(LocalBridgeClazz, "comparingByKey");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByKey(java.util.Comparator)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <typeparam name="Arg0objectSuperK"><see cref=""/></typeparam>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByKey(Java.Util.Comparator arg0) where Arg0objectSuperK : K
            {
                return SExecuteWithSignature<Java.Util.Comparator>(LocalBridgeClazz, "comparingByKey", "(Ljava/util/Comparator;)Ljava/util/Comparator;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByValue()"/>
            /// </summary>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByValue()
            {
                return SExecute<Java.Util.Comparator>(LocalBridgeClazz, "comparingByValue");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#comparingByValue(java.util.Comparator)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <typeparam name="Arg0objectSuperV"><see cref=""/></typeparam>
            /// <returns><see cref=""/></returns>
            public static Java.Util.Comparator ComparingByValue(Java.Util.Comparator arg0) where Arg0objectSuperV : V
            {
                return SExecuteWithSignature<Java.Util.Comparator>(LocalBridgeClazz, "comparingByValue", "(Ljava/util/Comparator;)Ljava/util/Comparator;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#getKey()"/> 
            /// </summary>
            public K Key
            {
                get { return IExecuteWithSignature<K>("getKey", "()Ljava/lang/Object;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#getValue()"/> 
            /// </summary>
            public V Value
            {
                get { return IExecuteWithSignature<V>("getValue", "()Ljava/lang/Object;"); }
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#setValue(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref=""/></param>
            /// <returns><see cref=""/></returns>
            public V SetValue(V arg0)
            {
                return IExecuteWithSignature<V>("setValue", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region IMap<, >
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html"/>
    /// </summary>
    public partial interface IMap<, >
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsKey(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        bool ContainsKey(object arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsValue(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        bool ContainsValue(object arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        bool IsEmpty();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#size()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        int Size();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#values()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Collection Values();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#entrySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Set EntrySet();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#keySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Set KeySet();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V Get(object arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V Put(K arg0, V arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V Remove(object arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#clear()"/>
        /// </summary>
        void Clear();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        void PutAll<, >(Java.Util.Map<, > arg0) where Arg0ExtendsK : K where Arg0ExtendsV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        bool Remove(object arg0, object arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        bool Replace(K arg0, V arg1, V arg2);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        V Compute<, , >(K arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        V ComputeIfAbsent<, >(K arg0, Java.Util.Function.Function<, > arg1) where Arg1objectSuperK : K where Arg1ExtendsV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        V ComputeIfPresent<, , >(K arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V GetOrDefault(object arg0, V arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg2objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        V Merge<, >(K arg0, V arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg2objectSuperV : V where Arg2ExtendsV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V PutIfAbsent(K arg0, V arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        V Replace(K arg0, V arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0objectSuperV"><see cref=""/></typeparam>
        void ForEach<, >(Java.Util.Function.BiConsumer<, > arg0) where Arg0objectSuperK : K where Arg0objectSuperV : V;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        void ReplaceAll<, , >(Java.Util.Function.BiFunction<, , > arg0) where Arg0objectSuperK : K where Arg0objectSuperV : V where Arg0ExtendsV : V;

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Map<, > implementation
    public partial class Map<, > : Java.Util.IMap<, >
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Util.Map(Java.Util.Map<, > t) => t.Cast<Java.Util.Map>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#copyOf(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > CopyOf<, >(Java.Util.Map<, > arg0) where Arg0ExtendsK : K where Arg0ExtendsV : V
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "copyOf", "(Ljava/util/Map;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of()
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <param name="arg16"><see cref=""/></param>
        /// <param name="arg17"><see cref=""/></param>
        /// <param name="arg18"><see cref=""/></param>
        /// <param name="arg19"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9, K arg10, V arg11, K arg12, V arg13, K arg14, V arg15, K arg16, V arg17, K arg18, V arg19)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <param name="arg16"><see cref=""/></param>
        /// <param name="arg17"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9, K arg10, V arg11, K arg12, V arg13, K arg14, V arg15, K arg16, V arg17)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <param name="arg14"><see cref=""/></param>
        /// <param name="arg15"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9, K arg10, V arg11, K arg12, V arg13, K arg14, V arg15)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <param name="arg12"><see cref=""/></param>
        /// <param name="arg13"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9, K arg10, V arg11, K arg12, V arg13)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <param name="arg10"><see cref=""/></param>
        /// <param name="arg11"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9, K arg10, V arg11)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <param name="arg8"><see cref=""/></param>
        /// <param name="arg9"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <param name="arg6"><see cref=""/></param>
        /// <param name="arg7"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <param name="arg4"><see cref=""/></param>
        /// <param name="arg5"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1, K arg2, V arg3)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#of(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > Of(K arg0, V arg1)
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "of", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#ofEntries(java.util.Map.Entry...)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map<, > OfEntries<, >(params Java.Util.Map.Entry<, >[] arg0) where Arg0ExtendsK : K where Arg0ExtendsV : V
        {
            return SExecuteWithSignature<Java.Util.Map<, >>(LocalBridgeClazz, "ofEntries", "([Ljava/util/Map$Entry;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#entry(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Map.Entry<, > EntryMethod(K arg0, V arg1)
        {
            return SExecuteWithSignature<Java.Util.Map.Entry<, >>(LocalBridgeClazz, "entry", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsKey(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool ContainsKey(object arg0)
        {
            return IExecuteWithSignature<bool>("containsKey", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#containsValue(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool ContainsValue(object arg0)
        {
            return IExecuteWithSignature<bool>("containsValue", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#size()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#values()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Collection Values()
        {
            return IExecuteWithSignature<Java.Util.Collection>("values", "()Ljava/util/Collection;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#entrySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Set EntrySet()
        {
            return IExecuteWithSignature<Java.Util.Set>("entrySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#keySet()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Set KeySet()
        {
            return IExecuteWithSignature<Java.Util.Set>("keySet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V Get(object arg0)
        {
            return IExecuteWithSignature<V>("get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V Put(K arg0, V arg1)
        {
            return IExecuteWithSignature<V>("put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V Remove(object arg0)
        {
            return IExecuteWithSignature<V>("remove", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        public void PutAll<, >(Java.Util.Map<, > arg0) where Arg0ExtendsK : K where Arg0ExtendsV : V
        {
            IExecuteWithSignature("putAll", "(Ljava/util/Map;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Remove(object arg0, object arg1)
        {
            return IExecuteWithSignature<bool>("remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool Replace(K arg0, V arg1, V arg2)
        {
            return IExecuteWithSignature<bool>("replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public V Compute<, , >(K arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsV : V
        {
            return IExecuteWithSignature<V>("compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public V ComputeIfAbsent<, >(K arg0, Java.Util.Function.Function<, > arg1) where Arg1objectSuperK : K where Arg1ExtendsV : V
        {
            return IExecuteWithSignature<V>("computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public V ComputeIfPresent<, , >(K arg0, Java.Util.Function.BiFunction<, , > arg1) where Arg1objectSuperK : K where Arg1objectSuperV : V where Arg1ExtendsV : V
        {
            return IExecuteWithSignature<V>("computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V GetOrDefault(object arg0, V arg1)
        {
            return IExecuteWithSignature<V>("getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg2objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg2ExtendsV"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public V Merge<, >(K arg0, V arg1, Java.Util.Function.BiFunction<, , > arg2) where Arg2objectSuperV : V where Arg2ExtendsV : V
        {
            return IExecuteWithSignature<V>("merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V PutIfAbsent(K arg0, V arg1)
        {
            return IExecuteWithSignature<V>("putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public V Replace(K arg0, V arg1)
        {
            return IExecuteWithSignature<V>("replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0objectSuperV"><see cref=""/></typeparam>
        public void ForEach<, >(Java.Util.Function.BiConsumer<, > arg0) where Arg0objectSuperK : K where Arg0objectSuperV : V
        {
            IExecuteWithSignature("forEach", "(Ljava/util/function/BiConsumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperK"><see cref=""/></typeparam>
        /// <typeparam name="Arg0objectSuperV"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsV"><see cref=""/></typeparam>
        public void ReplaceAll<, , >(Java.Util.Function.BiFunction<, , > arg0) where Arg0objectSuperK : K where Arg0objectSuperV : V where Arg0ExtendsV : V
        {
            IExecuteWithSignature("replaceAll", "(Ljava/util/function/BiFunction;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}