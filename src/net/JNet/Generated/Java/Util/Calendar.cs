/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region Calendar
    public partial class Calendar
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.Calendar"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Util.Calendar t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Java.Util.Calendar"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Java.Util.Calendar t) => t.Cast<Java.Lang.Cloneable>();
        /// <summary>
        /// Converter from <see cref="Java.Util.Calendar"/> to <see cref="Java.Lang.Comparable"/>
        /// </summary>
        public static implicit operator Java.Lang.Comparable(Java.Util.Calendar t) => t.Cast<Java.Lang.Comparable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#ALL_STYLES"/>
        /// </summary>
        public static int ALL_STYLES { get { if (!_ALL_STYLESReady) { _ALL_STYLESContent = SGetField<int>(LocalBridgeClazz, "ALL_STYLES"); _ALL_STYLESReady = true; } return _ALL_STYLESContent; } }
        private static int _ALL_STYLESContent = default;
        private static bool _ALL_STYLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#AM"/>
        /// </summary>
        public static int AM { get { if (!_AMReady) { _AMContent = SGetField<int>(LocalBridgeClazz, "AM"); _AMReady = true; } return _AMContent; } }
        private static int _AMContent = default;
        private static bool _AMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#AM_PM"/>
        /// </summary>
        public static int AM_PM { get { if (!_AM_PMReady) { _AM_PMContent = SGetField<int>(LocalBridgeClazz, "AM_PM"); _AM_PMReady = true; } return _AM_PMContent; } }
        private static int _AM_PMContent = default;
        private static bool _AM_PMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#APRIL"/>
        /// </summary>
        public static int APRIL { get { if (!_APRILReady) { _APRILContent = SGetField<int>(LocalBridgeClazz, "APRIL"); _APRILReady = true; } return _APRILContent; } }
        private static int _APRILContent = default;
        private static bool _APRILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#AUGUST"/>
        /// </summary>
        public static int AUGUST { get { if (!_AUGUSTReady) { _AUGUSTContent = SGetField<int>(LocalBridgeClazz, "AUGUST"); _AUGUSTReady = true; } return _AUGUSTContent; } }
        private static int _AUGUSTContent = default;
        private static bool _AUGUSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DATE"/>
        /// </summary>
        public static int DATE { get { if (!_DATEReady) { _DATEContent = SGetField<int>(LocalBridgeClazz, "DATE"); _DATEReady = true; } return _DATEContent; } }
        private static int _DATEContent = default;
        private static bool _DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DAY_OF_MONTH"/>
        /// </summary>
        public static int DAY_OF_MONTH { get { if (!_DAY_OF_MONTHReady) { _DAY_OF_MONTHContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_MONTH"); _DAY_OF_MONTHReady = true; } return _DAY_OF_MONTHContent; } }
        private static int _DAY_OF_MONTHContent = default;
        private static bool _DAY_OF_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DAY_OF_WEEK"/>
        /// </summary>
        public static int DAY_OF_WEEK { get { if (!_DAY_OF_WEEKReady) { _DAY_OF_WEEKContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_WEEK"); _DAY_OF_WEEKReady = true; } return _DAY_OF_WEEKContent; } }
        private static int _DAY_OF_WEEKContent = default;
        private static bool _DAY_OF_WEEKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DAY_OF_WEEK_IN_MONTH"/>
        /// </summary>
        public static int DAY_OF_WEEK_IN_MONTH { get { if (!_DAY_OF_WEEK_IN_MONTHReady) { _DAY_OF_WEEK_IN_MONTHContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_WEEK_IN_MONTH"); _DAY_OF_WEEK_IN_MONTHReady = true; } return _DAY_OF_WEEK_IN_MONTHContent; } }
        private static int _DAY_OF_WEEK_IN_MONTHContent = default;
        private static bool _DAY_OF_WEEK_IN_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DAY_OF_YEAR"/>
        /// </summary>
        public static int DAY_OF_YEAR { get { if (!_DAY_OF_YEARReady) { _DAY_OF_YEARContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_YEAR"); _DAY_OF_YEARReady = true; } return _DAY_OF_YEARContent; } }
        private static int _DAY_OF_YEARContent = default;
        private static bool _DAY_OF_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DECEMBER"/>
        /// </summary>
        public static int DECEMBER { get { if (!_DECEMBERReady) { _DECEMBERContent = SGetField<int>(LocalBridgeClazz, "DECEMBER"); _DECEMBERReady = true; } return _DECEMBERContent; } }
        private static int _DECEMBERContent = default;
        private static bool _DECEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#DST_OFFSET"/>
        /// </summary>
        public static int DST_OFFSET { get { if (!_DST_OFFSETReady) { _DST_OFFSETContent = SGetField<int>(LocalBridgeClazz, "DST_OFFSET"); _DST_OFFSETReady = true; } return _DST_OFFSETContent; } }
        private static int _DST_OFFSETContent = default;
        private static bool _DST_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#ERA"/>
        /// </summary>
        public static int ERA { get { if (!_ERAReady) { _ERAContent = SGetField<int>(LocalBridgeClazz, "ERA"); _ERAReady = true; } return _ERAContent; } }
        private static int _ERAContent = default;
        private static bool _ERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#FEBRUARY"/>
        /// </summary>
        public static int FEBRUARY { get { if (!_FEBRUARYReady) { _FEBRUARYContent = SGetField<int>(LocalBridgeClazz, "FEBRUARY"); _FEBRUARYReady = true; } return _FEBRUARYContent; } }
        private static int _FEBRUARYContent = default;
        private static bool _FEBRUARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#FIELD_COUNT"/>
        /// </summary>
        public static int FIELD_COUNT { get { if (!_FIELD_COUNTReady) { _FIELD_COUNTContent = SGetField<int>(LocalBridgeClazz, "FIELD_COUNT"); _FIELD_COUNTReady = true; } return _FIELD_COUNTContent; } }
        private static int _FIELD_COUNTContent = default;
        private static bool _FIELD_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#FRIDAY"/>
        /// </summary>
        public static int FRIDAY { get { if (!_FRIDAYReady) { _FRIDAYContent = SGetField<int>(LocalBridgeClazz, "FRIDAY"); _FRIDAYReady = true; } return _FRIDAYContent; } }
        private static int _FRIDAYContent = default;
        private static bool _FRIDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#HOUR"/>
        /// </summary>
        public static int HOUR { get { if (!_HOURReady) { _HOURContent = SGetField<int>(LocalBridgeClazz, "HOUR"); _HOURReady = true; } return _HOURContent; } }
        private static int _HOURContent = default;
        private static bool _HOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#HOUR_OF_DAY"/>
        /// </summary>
        public static int HOUR_OF_DAY { get { if (!_HOUR_OF_DAYReady) { _HOUR_OF_DAYContent = SGetField<int>(LocalBridgeClazz, "HOUR_OF_DAY"); _HOUR_OF_DAYReady = true; } return _HOUR_OF_DAYContent; } }
        private static int _HOUR_OF_DAYContent = default;
        private static bool _HOUR_OF_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#JANUARY"/>
        /// </summary>
        public static int JANUARY { get { if (!_JANUARYReady) { _JANUARYContent = SGetField<int>(LocalBridgeClazz, "JANUARY"); _JANUARYReady = true; } return _JANUARYContent; } }
        private static int _JANUARYContent = default;
        private static bool _JANUARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#JULY"/>
        /// </summary>
        public static int JULY { get { if (!_JULYReady) { _JULYContent = SGetField<int>(LocalBridgeClazz, "JULY"); _JULYReady = true; } return _JULYContent; } }
        private static int _JULYContent = default;
        private static bool _JULYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#JUNE"/>
        /// </summary>
        public static int JUNE { get { if (!_JUNEReady) { _JUNEContent = SGetField<int>(LocalBridgeClazz, "JUNE"); _JUNEReady = true; } return _JUNEContent; } }
        private static int _JUNEContent = default;
        private static bool _JUNEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#LONG"/>
        /// </summary>
        public static int LONG { get { if (!_LONGReady) { _LONGContent = SGetField<int>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
        private static int _LONGContent = default;
        private static bool _LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT"/>
        /// </summary>
        public static int LONG_FORMAT { get { if (!_LONG_FORMATReady) { _LONG_FORMATContent = SGetField<int>(LocalBridgeClazz, "LONG_FORMAT"); _LONG_FORMATReady = true; } return _LONG_FORMATContent; } }
        private static int _LONG_FORMATContent = default;
        private static bool _LONG_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE"/>
        /// </summary>
        public static int LONG_STANDALONE { get { if (!_LONG_STANDALONEReady) { _LONG_STANDALONEContent = SGetField<int>(LocalBridgeClazz, "LONG_STANDALONE"); _LONG_STANDALONEReady = true; } return _LONG_STANDALONEContent; } }
        private static int _LONG_STANDALONEContent = default;
        private static bool _LONG_STANDALONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MARCH"/>
        /// </summary>
        public static int MARCH { get { if (!_MARCHReady) { _MARCHContent = SGetField<int>(LocalBridgeClazz, "MARCH"); _MARCHReady = true; } return _MARCHContent; } }
        private static int _MARCHContent = default;
        private static bool _MARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MAY"/>
        /// </summary>
        public static int MAY { get { if (!_MAYReady) { _MAYContent = SGetField<int>(LocalBridgeClazz, "MAY"); _MAYReady = true; } return _MAYContent; } }
        private static int _MAYContent = default;
        private static bool _MAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MILLISECOND"/>
        /// </summary>
        public static int MILLISECOND { get { if (!_MILLISECONDReady) { _MILLISECONDContent = SGetField<int>(LocalBridgeClazz, "MILLISECOND"); _MILLISECONDReady = true; } return _MILLISECONDContent; } }
        private static int _MILLISECONDContent = default;
        private static bool _MILLISECONDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MINUTE"/>
        /// </summary>
        public static int MINUTE { get { if (!_MINUTEReady) { _MINUTEContent = SGetField<int>(LocalBridgeClazz, "MINUTE"); _MINUTEReady = true; } return _MINUTEContent; } }
        private static int _MINUTEContent = default;
        private static bool _MINUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MONDAY"/>
        /// </summary>
        public static int MONDAY { get { if (!_MONDAYReady) { _MONDAYContent = SGetField<int>(LocalBridgeClazz, "MONDAY"); _MONDAYReady = true; } return _MONDAYContent; } }
        private static int _MONDAYContent = default;
        private static bool _MONDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#MONTH"/>
        /// </summary>
        public static int MONTH { get { if (!_MONTHReady) { _MONTHContent = SGetField<int>(LocalBridgeClazz, "MONTH"); _MONTHReady = true; } return _MONTHContent; } }
        private static int _MONTHContent = default;
        private static bool _MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#NARROW_FORMAT"/>
        /// </summary>
        public static int NARROW_FORMAT { get { if (!_NARROW_FORMATReady) { _NARROW_FORMATContent = SGetField<int>(LocalBridgeClazz, "NARROW_FORMAT"); _NARROW_FORMATReady = true; } return _NARROW_FORMATContent; } }
        private static int _NARROW_FORMATContent = default;
        private static bool _NARROW_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#NARROW_STANDALONE"/>
        /// </summary>
        public static int NARROW_STANDALONE { get { if (!_NARROW_STANDALONEReady) { _NARROW_STANDALONEContent = SGetField<int>(LocalBridgeClazz, "NARROW_STANDALONE"); _NARROW_STANDALONEReady = true; } return _NARROW_STANDALONEContent; } }
        private static int _NARROW_STANDALONEContent = default;
        private static bool _NARROW_STANDALONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#NOVEMBER"/>
        /// </summary>
        public static int NOVEMBER { get { if (!_NOVEMBERReady) { _NOVEMBERContent = SGetField<int>(LocalBridgeClazz, "NOVEMBER"); _NOVEMBERReady = true; } return _NOVEMBERContent; } }
        private static int _NOVEMBERContent = default;
        private static bool _NOVEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#OCTOBER"/>
        /// </summary>
        public static int OCTOBER { get { if (!_OCTOBERReady) { _OCTOBERContent = SGetField<int>(LocalBridgeClazz, "OCTOBER"); _OCTOBERReady = true; } return _OCTOBERContent; } }
        private static int _OCTOBERContent = default;
        private static bool _OCTOBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#PM"/>
        /// </summary>
        public static int PM { get { if (!_PMReady) { _PMContent = SGetField<int>(LocalBridgeClazz, "PM"); _PMReady = true; } return _PMContent; } }
        private static int _PMContent = default;
        private static bool _PMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SATURDAY"/>
        /// </summary>
        public static int SATURDAY { get { if (!_SATURDAYReady) { _SATURDAYContent = SGetField<int>(LocalBridgeClazz, "SATURDAY"); _SATURDAYReady = true; } return _SATURDAYContent; } }
        private static int _SATURDAYContent = default;
        private static bool _SATURDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SECOND"/>
        /// </summary>
        public static int SECOND { get { if (!_SECONDReady) { _SECONDContent = SGetField<int>(LocalBridgeClazz, "SECOND"); _SECONDReady = true; } return _SECONDContent; } }
        private static int _SECONDContent = default;
        private static bool _SECONDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SEPTEMBER"/>
        /// </summary>
        public static int SEPTEMBER { get { if (!_SEPTEMBERReady) { _SEPTEMBERContent = SGetField<int>(LocalBridgeClazz, "SEPTEMBER"); _SEPTEMBERReady = true; } return _SEPTEMBERContent; } }
        private static int _SEPTEMBERContent = default;
        private static bool _SEPTEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SHORT"/>
        /// </summary>
        public static int SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<int>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
        private static int _SHORTContent = default;
        private static bool _SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT"/>
        /// </summary>
        public static int SHORT_FORMAT { get { if (!_SHORT_FORMATReady) { _SHORT_FORMATContent = SGetField<int>(LocalBridgeClazz, "SHORT_FORMAT"); _SHORT_FORMATReady = true; } return _SHORT_FORMATContent; } }
        private static int _SHORT_FORMATContent = default;
        private static bool _SHORT_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE"/>
        /// </summary>
        public static int SHORT_STANDALONE { get { if (!_SHORT_STANDALONEReady) { _SHORT_STANDALONEContent = SGetField<int>(LocalBridgeClazz, "SHORT_STANDALONE"); _SHORT_STANDALONEReady = true; } return _SHORT_STANDALONEContent; } }
        private static int _SHORT_STANDALONEContent = default;
        private static bool _SHORT_STANDALONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#SUNDAY"/>
        /// </summary>
        public static int SUNDAY { get { if (!_SUNDAYReady) { _SUNDAYContent = SGetField<int>(LocalBridgeClazz, "SUNDAY"); _SUNDAYReady = true; } return _SUNDAYContent; } }
        private static int _SUNDAYContent = default;
        private static bool _SUNDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#THURSDAY"/>
        /// </summary>
        public static int THURSDAY { get { if (!_THURSDAYReady) { _THURSDAYContent = SGetField<int>(LocalBridgeClazz, "THURSDAY"); _THURSDAYReady = true; } return _THURSDAYContent; } }
        private static int _THURSDAYContent = default;
        private static bool _THURSDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#TUESDAY"/>
        /// </summary>
        public static int TUESDAY { get { if (!_TUESDAYReady) { _TUESDAYContent = SGetField<int>(LocalBridgeClazz, "TUESDAY"); _TUESDAYReady = true; } return _TUESDAYContent; } }
        private static int _TUESDAYContent = default;
        private static bool _TUESDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#UNDECIMBER"/>
        /// </summary>
        public static int UNDECIMBER { get { if (!_UNDECIMBERReady) { _UNDECIMBERContent = SGetField<int>(LocalBridgeClazz, "UNDECIMBER"); _UNDECIMBERReady = true; } return _UNDECIMBERContent; } }
        private static int _UNDECIMBERContent = default;
        private static bool _UNDECIMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#WEDNESDAY"/>
        /// </summary>
        public static int WEDNESDAY { get { if (!_WEDNESDAYReady) { _WEDNESDAYContent = SGetField<int>(LocalBridgeClazz, "WEDNESDAY"); _WEDNESDAYReady = true; } return _WEDNESDAYContent; } }
        private static int _WEDNESDAYContent = default;
        private static bool _WEDNESDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#WEEK_OF_MONTH"/>
        /// </summary>
        public static int WEEK_OF_MONTH { get { if (!_WEEK_OF_MONTHReady) { _WEEK_OF_MONTHContent = SGetField<int>(LocalBridgeClazz, "WEEK_OF_MONTH"); _WEEK_OF_MONTHReady = true; } return _WEEK_OF_MONTHContent; } }
        private static int _WEEK_OF_MONTHContent = default;
        private static bool _WEEK_OF_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#WEEK_OF_YEAR"/>
        /// </summary>
        public static int WEEK_OF_YEAR { get { if (!_WEEK_OF_YEARReady) { _WEEK_OF_YEARContent = SGetField<int>(LocalBridgeClazz, "WEEK_OF_YEAR"); _WEEK_OF_YEARReady = true; } return _WEEK_OF_YEARContent; } }
        private static int _WEEK_OF_YEARContent = default;
        private static bool _WEEK_OF_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#YEAR"/>
        /// </summary>
        public static int YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<int>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
        private static int _YEARContent = default;
        private static bool _YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#ZONE_OFFSET"/>
        /// </summary>
        public static int ZONE_OFFSET { get { if (!_ZONE_OFFSETReady) { _ZONE_OFFSETContent = SGetField<int>(LocalBridgeClazz, "ZONE_OFFSET"); _ZONE_OFFSETReady = true; } return _ZONE_OFFSETContent; } }
        private static int _ZONE_OFFSETContent = default;
        private static bool _ZONE_OFFSETReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getAvailableLocales()"/> 
        /// </summary>
        public static Java.Util.Locale[] AvailableLocales
        {
            get { return SExecuteWithSignatureArray<Java.Util.Locale>(LocalBridgeClazz, "getAvailableLocales", "()[Ljava/util/Locale;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getAvailableCalendarTypes()"/> 
        /// </summary>
        public static Java.Util.Set<Java.Lang.String> GetAvailableCalendarTypes
        {
            get { return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "getAvailableCalendarTypes", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getInstance()"/> 
        /// </summary>
        public static Java.Util.Calendar Instance
        {
            get { return SExecuteWithSignature<Java.Util.Calendar>(LocalBridgeClazz, "getInstance", "()Ljava/util/Calendar;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Util.Calendar"/></returns>
        public static Java.Util.Calendar GetInstance(Java.Util.Locale arg0)
        {
            return SExecuteWithSignature<Java.Util.Calendar>(LocalBridgeClazz, "getInstance", "(Ljava/util/Locale;)Ljava/util/Calendar;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.TimeZone"/></param>
        /// <param name="arg1"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Util.Calendar"/></returns>
        public static Java.Util.Calendar GetInstance(Java.Util.TimeZone arg0, Java.Util.Locale arg1)
        {
            return SExecute<Java.Util.Calendar>(LocalBridgeClazz, "getInstance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.TimeZone"/></param>
        /// <returns><see cref="Java.Util.Calendar"/></returns>
        public static Java.Util.Calendar GetInstance(Java.Util.TimeZone arg0)
        {
            return SExecuteWithSignature<Java.Util.Calendar>(LocalBridgeClazz, "getInstance", "(Ljava/util/TimeZone;)Ljava/util/Calendar;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getCalendarType()"/> 
        /// </summary>
        public Java.Lang.String CalendarType
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCalendarType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setFirstDayOfWeek(int)"/>
        /// </summary>
        public int FirstDayOfWeek
        {
            get { return IExecuteWithSignature<int>("getFirstDayOfWeek", "()I"); } set { IExecuteWithSignature("setFirstDayOfWeek", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setMinimalDaysInFirstWeek(int)"/>
        /// </summary>
        public int MinimalDaysInFirstWeek
        {
            get { return IExecuteWithSignature<int>("getMinimalDaysInFirstWeek", "()I"); } set { IExecuteWithSignature("setMinimalDaysInFirstWeek", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getTime()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setTime(java.util.Date)"/>
        /// </summary>
        public Java.Util.Date Time
        {
            get { return IExecuteWithSignature<Java.Util.Date>("getTime", "()Ljava/util/Date;"); } set { IExecuteWithSignature("setTime", "(Ljava/util/Date;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getTimeInMillis()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setTimeInMillis(long)"/>
        /// </summary>
        public long TimeInMillis
        {
            get { return IExecuteWithSignature<long>("getTimeInMillis", "()J"); } set { IExecuteWithSignature("setTimeInMillis", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getTimeZone()"/> <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setTimeZone(java.util.TimeZone)"/>
        /// </summary>
        public Java.Util.TimeZone TimeZone
        {
            get { return IExecuteWithSignature<Java.Util.TimeZone>("getTimeZone", "()Ljava/util/TimeZone;"); } set { IExecuteWithSignature("setTimeZone", "(Ljava/util/TimeZone;)V", value); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getWeeksInWeekYear()"/> 
        /// </summary>
        public int WeeksInWeekYear
        {
            get { return IExecuteWithSignature<int>("getWeeksInWeekYear", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getWeekYear()"/> 
        /// </summary>
        public int WeekYear
        {
            get { return IExecuteWithSignature<int>("getWeekYear", "()I"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetGreatestMinimum(int arg0)
        {
            return IExecuteWithSignature<int>("getGreatestMinimum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLeastMaximum(int arg0)
        {
            return IExecuteWithSignature<int>("getLeastMaximum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getMaximum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMaximum(int arg0)
        {
            return IExecuteWithSignature<int>("getMaximum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getMinimum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMinimum(int arg0)
        {
            return IExecuteWithSignature<int>("getMinimum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#add(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Add(int arg0, int arg1)
        {
            IExecute("add", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#roll(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void Roll(int arg0, bool arg1)
        {
            IExecute("roll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#after(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool After(object arg0)
        {
            return IExecuteWithSignature<bool>("after", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#before(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Before(object arg0)
        {
            return IExecuteWithSignature<bool>("before", "(Ljava/lang/Object;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#isLenient()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLenient()
        {
            return IExecuteWithSignature<bool>("isLenient", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#isWeekDateSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWeekDateSupported()
        {
            return IExecuteWithSignature<bool>("isWeekDateSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#isSet(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSet(int arg0)
        {
            return IExecuteWithSignature<bool>("isSet", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#toInstant()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Instant"/></returns>
        public Java.Time.Instant ToInstant()
        {
            return IExecuteWithSignature<Java.Time.Instant>("toInstant", "()Ljava/time/Instant;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#clear(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Clear(int arg0)
        {
            IExecuteWithSignature("clear", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void Set(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            IExecute("set", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void Set(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("set", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#set(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void Set(int arg0, int arg1, int arg2)
        {
            IExecute("set", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(object arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#compareTo(java.util.Calendar)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Calendar"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(Java.Util.Calendar arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/util/Calendar;)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#get(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Get(int arg0)
        {
            return IExecuteWithSignature<int>("get", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetActualMaximum(int arg0)
        {
            return IExecuteWithSignature<int>("getActualMaximum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetActualMinimum(int arg0)
        {
            return IExecuteWithSignature<int>("getActualMinimum", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getDisplayName(int,int,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(int arg0, int arg1, Java.Util.Locale arg2)
        {
            return IExecute<Java.Lang.String>("getDisplayName", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#getDisplayNames(int,int,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.String, Java.Lang.Integer> GetDisplayNames(int arg0, int arg1, Java.Util.Locale arg2)
        {
            return IExecute<Java.Util.Map<Java.Lang.String, Java.Lang.Integer>>("getDisplayNames", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#roll(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Roll(int arg0, int arg1)
        {
            IExecute("roll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#set(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Set(int arg0, int arg1)
        {
            IExecute("set", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setLenient(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLenient(bool arg0)
        {
            IExecuteWithSignature("setLenient", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html#setWeekDate(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetWeekDate(int arg0, int arg1, int arg2)
        {
            IExecute("setWeekDate", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Calendar"/></returns>
            public Java.Util.Calendar Build()
            {
                return IExecuteWithSignature<Java.Util.Calendar>("build", "()Ljava/util/Calendar;");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#set(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder Set(int arg0, int arg1)
            {
                return IExecute<Java.Util.Calendar.Builder>("set", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setCalendarType(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetCalendarType(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setCalendarType", "(Ljava/lang/String;)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setDate(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetDate(int arg0, int arg1, int arg2)
            {
                return IExecute<Java.Util.Calendar.Builder>("setDate", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setFields(int[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetFields(params int[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Java.Util.Calendar.Builder>("setFields", "([I)Ljava/util/Calendar$Builder;"); else return IExecuteWithSignature<Java.Util.Calendar.Builder>("setFields", "([I)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setInstant(java.util.Date)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Date"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetInstant(Java.Util.Date arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setInstant", "(Ljava/util/Date;)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setInstant(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetInstant(long arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setInstant", "(J)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setLenient(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetLenient(bool arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setLenient", "(Z)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setLocale(java.util.Locale)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetLocale(Java.Util.Locale arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setLocale", "(Ljava/util/Locale;)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setTimeOfDay(int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetTimeOfDay(int arg0, int arg1, int arg2, int arg3)
            {
                return IExecute<Java.Util.Calendar.Builder>("setTimeOfDay", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setTimeOfDay(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetTimeOfDay(int arg0, int arg1, int arg2)
            {
                return IExecute<Java.Util.Calendar.Builder>("setTimeOfDay", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setTimeZone(java.util.TimeZone)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.TimeZone"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetTimeZone(Java.Util.TimeZone arg0)
            {
                return IExecuteWithSignature<Java.Util.Calendar.Builder>("setTimeZone", "(Ljava/util/TimeZone;)Ljava/util/Calendar$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setWeekDate(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetWeekDate(int arg0, int arg1, int arg2)
            {
                return IExecute<Java.Util.Calendar.Builder>("setWeekDate", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.Builder.html#setWeekDefinition(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Java.Util.Calendar.Builder"/></returns>
            public Java.Util.Calendar.Builder SetWeekDefinition(int arg0, int arg1)
            {
                return IExecute<Java.Util.Calendar.Builder>("setWeekDefinition", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}