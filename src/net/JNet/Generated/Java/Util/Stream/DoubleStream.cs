/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Stream
{
    #region DoubleStream
    public partial class DoubleStream
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Concat(Java.Util.Stream.DoubleStream arg0, Java.Util.Stream.DoubleStream arg1)
        {
            return SExecute<Java.Util.Stream.DoubleStream>("concat", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#empty()
        /// </summary>
        public static Java.Util.Stream.DoubleStream Empty()
        {
            return SExecute<Java.Util.Stream.DoubleStream>("empty");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#generate(java.util.function.DoubleSupplier)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Generate(Java.Util.Function.DoubleSupplier arg0)
        {
            return SExecute<Java.Util.Stream.DoubleStream>("generate", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#iterate(double,java.util.function.DoublePredicate,java.util.function.DoubleUnaryOperator)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Iterate(double arg0, Java.Util.Function.DoublePredicate arg1, Java.Util.Function.DoubleUnaryOperator arg2)
        {
            return SExecute<Java.Util.Stream.DoubleStream>("iterate", arg0, arg1, arg2);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#iterate(double,java.util.function.DoubleUnaryOperator)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Iterate(double arg0, Java.Util.Function.DoubleUnaryOperator arg1)
        {
            return SExecute<Java.Util.Stream.DoubleStream>("iterate", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#of(double...)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Of(params double[] arg0)
        {
            if (arg0.Length == 0) return SExecute<Java.Util.Stream.DoubleStream>("of"); else return SExecute<Java.Util.Stream.DoubleStream>("of", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#of(double)
        /// </summary>
        public static Java.Util.Stream.DoubleStream Of(double arg0)
        {
            return SExecute<Java.Util.Stream.DoubleStream>("of", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#builder()
        /// </summary>
        public static Java.Util.Stream.DoubleStream.Builder BuilderMethod()
        {
            return SExecute<Java.Util.Stream.DoubleStream.Builder>("builder");
        }
        
        #endregion

        #region Instance methods
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#allMatch(java.util.function.DoublePredicate)
        /// </summary>
        public bool AllMatch(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<bool>("allMatch", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#anyMatch(java.util.function.DoublePredicate)
        /// </summary>
        public bool AnyMatch(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<bool>("anyMatch", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#noneMatch(java.util.function.DoublePredicate)
        /// </summary>
        public bool NoneMatch(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<bool>("noneMatch", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#reduce(double,java.util.function.DoubleBinaryOperator)
        /// </summary>
        public double Reduce(double arg0, Java.Util.Function.DoubleBinaryOperator arg1)
        {
            return IExecute<double>("reduce", arg0, arg1);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#sum()
        /// </summary>
        public double Sum()
        {
            return IExecute<double>("sum");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#toArray()
        /// </summary>
        public double[] ToArray()
        {
            return IExecuteArray<double>("toArray");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#summaryStatistics()
        /// </summary>
        public Java.Util.DoubleSummaryStatistics SummaryStatistics()
        {
            return IExecute<Java.Util.DoubleSummaryStatistics>("summaryStatistics");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#average()
        /// </summary>
        public Java.Util.OptionalDouble Average()
        {
            return IExecute<Java.Util.OptionalDouble>("average");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#findAny()
        /// </summary>
        public Java.Util.OptionalDouble FindAny()
        {
            return IExecute<Java.Util.OptionalDouble>("findAny");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#findFirst()
        /// </summary>
        public Java.Util.OptionalDouble FindFirst()
        {
            return IExecute<Java.Util.OptionalDouble>("findFirst");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#max()
        /// </summary>
        public Java.Util.OptionalDouble Max()
        {
            return IExecute<Java.Util.OptionalDouble>("max");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#min()
        /// </summary>
        public Java.Util.OptionalDouble Min()
        {
            return IExecute<Java.Util.OptionalDouble>("min");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#reduce(java.util.function.DoubleBinaryOperator)
        /// </summary>
        public Java.Util.OptionalDouble Reduce(Java.Util.Function.DoubleBinaryOperator arg0)
        {
            return IExecute<Java.Util.OptionalDouble>("reduce", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#distinct()
        /// </summary>
        public Java.Util.Stream.DoubleStream Distinct()
        {
            return IExecute<Java.Util.Stream.DoubleStream>("distinct");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#filter(java.util.function.DoublePredicate)
        /// </summary>
        public Java.Util.Stream.DoubleStream Filter(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("filter", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#limit(long)
        /// </summary>
        public Java.Util.Stream.DoubleStream Limit(long arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("limit", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#map(java.util.function.DoubleUnaryOperator)
        /// </summary>
        public Java.Util.Stream.DoubleStream Map(Java.Util.Function.DoubleUnaryOperator arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("map", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#peek(java.util.function.DoubleConsumer)
        /// </summary>
        public Java.Util.Stream.DoubleStream Peek(Java.Util.Function.DoubleConsumer arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("peek", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#skip(long)
        /// </summary>
        public Java.Util.Stream.DoubleStream Skip(long arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("skip", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#sorted()
        /// </summary>
        public Java.Util.Stream.DoubleStream Sorted()
        {
            return IExecute<Java.Util.Stream.DoubleStream>("sorted");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#mapToInt(java.util.function.DoubleToIntFunction)
        /// </summary>
        public Java.Util.Stream.IntStream MapToInt(Java.Util.Function.DoubleToIntFunction arg0)
        {
            return IExecute<Java.Util.Stream.IntStream>("mapToInt", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#mapToLong(java.util.function.DoubleToLongFunction)
        /// </summary>
        public Java.Util.Stream.LongStream MapToLong(Java.Util.Function.DoubleToLongFunction arg0)
        {
            return IExecute<Java.Util.Stream.LongStream>("mapToLong", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#count()
        /// </summary>
        public long Count()
        {
            return IExecute<long>("count");
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#forEach(java.util.function.DoubleConsumer)
        /// </summary>
        public void ForEach(Java.Util.Function.DoubleConsumer arg0)
        {
            IExecute("forEach", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#forEachOrdered(java.util.function.DoubleConsumer)
        /// </summary>
        public void ForEachOrdered(Java.Util.Function.DoubleConsumer arg0)
        {
            IExecute("forEachOrdered", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#dropWhile(java.util.function.DoublePredicate)
        /// </summary>
        public Java.Util.Stream.DoubleStream DropWhile(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("dropWhile", arg0);
        }
        /// <summary>
        /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.html#takeWhile(java.util.function.DoublePredicate)
        /// </summary>
        public Java.Util.Stream.DoubleStream TakeWhile(Java.Util.Function.DoublePredicate arg0)
        {
            return IExecute<Java.Util.Stream.DoubleStream>("takeWhile", arg0);
        }
        
        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            public static implicit operator Java.Util.Function.DoubleConsumer(Java.Util.Stream.DoubleStream.Builder t) => t.Cast<Java.Util.Function.DoubleConsumer>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.Builder.html#build()
            /// </summary>
            public Java.Util.Stream.DoubleStream Build()
            {
                return IExecute<Java.Util.Stream.DoubleStream>("build");
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.Builder.html#accept(double)
            /// </summary>
            public void Accept(double arg0)
            {
                IExecute("accept", arg0);
            }
            /// <summary>
            /// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/DoubleStream.Builder.html#add(double)
            /// </summary>
            public Java.Util.Stream.DoubleStream.Builder Add(double arg0)
            {
                return IExecute<Java.Util.Stream.DoubleStream.Builder>("add", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}