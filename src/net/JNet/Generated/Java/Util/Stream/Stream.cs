/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Stream
{
    #region Stream declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html"/>
    /// </summary>
    public partial class Stream : Java.Util.Stream.BaseStream
    {
        const string _bridgeClassName = "java.util.stream.Stream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Stream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Stream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Stream declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html"/>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class Stream : Java.Util.Stream.BaseStream<, >
    {
        const string _bridgeClassName = "java.util.stream.Stream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Stream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Stream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Stream(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region Stream implementation
    public partial class Stream
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#concat(java.util.stream.Stream,java.util.stream.Stream)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Concat(Java.Util.Stream.Stream arg0, Java.Util.Stream.Stream arg1)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "concat", "(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#empty()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Empty()
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "empty", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#generate(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Generate(Java.Util.Function.Supplier arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "generate", "(Ljava/util/function/Supplier;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#iterate(java.lang.Object,java.util.function.Predicate,java.util.function.UnaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Iterate(object arg0, Java.Util.Function.Predicate arg1, Java.Util.Function.UnaryOperator arg2)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "iterate", "(Ljava/lang/Object;Ljava/util/function/Predicate;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#iterate(java.lang.Object,java.util.function.UnaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Iterate(object arg0, Java.Util.Function.UnaryOperator arg1)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "iterate", "(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#of(java.lang.Object...)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Of(params object[] arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "of", "([Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#of(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Of(object arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "of", "(Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#ofNullable(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream OfNullable(object arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "ofNullable", "(Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray(java.util.function.IntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object[] ToArray(Java.Util.Function.IntFunction arg0)
        {
            return IExecuteWithSignatureArray<object>("toArray", "(Ljava/util/function/IntFunction;)[Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Collect(Java.Util.Stream.Collector arg0)
        {
            return IExecuteWithSignature("collect", "(Ljava/util/stream/Collector;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMap(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream FlatMap(Java.Util.Function.Function arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("flatMap", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#map(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Map(Java.Util.Function.Function arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("map", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Collect(Java.Util.Function.Supplier arg0, Java.Util.Function.BiConsumer arg1, Java.Util.Function.BiConsumer arg2)
        {
            return IExecuteWithSignature("collect", "(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Reduce(object arg0, Java.Util.Function.BiFunction arg1, Java.Util.Function.BinaryOperator arg2)
        {
            return IExecuteWithSignature("reduce", "(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#allMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool AllMatch(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<bool>("allMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#anyMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool AnyMatch(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<bool>("anyMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#noneMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public bool NoneMatch(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<bool>("noneMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public object[] ToArray()
        {
            return IExecuteWithSignatureArray<object>("toArray", "()[Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findAny()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional FindAny()
        {
            return IExecuteWithSignature<Java.Util.Optional>("findAny", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findFirst()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional FindFirst()
        {
            return IExecuteWithSignature<Java.Util.Optional>("findFirst", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#max(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Max(Java.Util.Comparator arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional>("max", "(Ljava/util/Comparator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#min(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Min(Java.Util.Comparator arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional>("min", "(Ljava/util/Comparator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Reduce(Java.Util.Function.BinaryOperator arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional>("reduce", "(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToDouble(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.DoubleStream FlatMapToDouble(Java.Util.Function.Function arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.DoubleStream>("flatMapToDouble", "(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.DoubleStream MapToDouble(Java.Util.Function.ToDoubleFunction arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.DoubleStream>("mapToDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToInt(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.IntStream FlatMapToInt(Java.Util.Function.Function arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.IntStream>("flatMapToInt", "(Ljava/util/function/Function;)Ljava/util/stream/IntStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.IntStream MapToInt(Java.Util.Function.ToIntFunction arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.IntStream>("mapToInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToLong(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.LongStream FlatMapToLong(Java.Util.Function.Function arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.LongStream>("flatMapToLong", "(Ljava/util/function/Function;)Ljava/util/stream/LongStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.LongStream MapToLong(Java.Util.Function.ToLongFunction arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.LongStream>("mapToLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#distinct()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Distinct()
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("distinct", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#filter(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Filter(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("filter", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#limit(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Limit(long arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("limit", "(J)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#peek(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Peek(Java.Util.Function.Consumer arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("peek", "(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#skip(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Skip(long arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("skip", "(J)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Sorted()
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("sorted", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Sorted(Java.Util.Comparator arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("sorted", "(Ljava/util/Comparator;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#count()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public long Count()
        {
            return IExecuteWithSignature<long>("count", "()J");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public object Reduce(object arg0, Java.Util.Function.BinaryOperator arg1)
        {
            return IExecuteWithSignature("reduce", "(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEach(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void ForEach(Java.Util.Function.Consumer arg0)
        {
            IExecuteWithSignature("forEach", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEachOrdered(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        public void ForEachOrdered(Java.Util.Function.Consumer arg0)
        {
            IExecuteWithSignature("forEachOrdered", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#dropWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream DropWhile(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("dropWhile", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#takeWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream TakeWhile(Java.Util.Function.Predicate arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("takeWhile", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region IStream
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html"/>
    /// </summary>
    public partial interface IStream : Java.Util.Stream.IBaseStream<, >
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray(java.util.function.IntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        A[] ToArray(Java.Util.Function.IntFunction arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        R Collect<, , >(Java.Util.Stream.Collector<, , > arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMap(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_Stream"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsR"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream FlatMap<, , , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_Stream : Java.Util.Stream.Stream where Arg0ExtendsR : R;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#map(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsR"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Map<, , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsR : R;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        R Collect<, >(Java.Util.Function.Supplier arg0, Java.Util.Function.BiConsumer<, > arg1, Java.Util.Function.BiConsumer<, > arg2) where Arg1objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        U Reduce<, >(U arg0, Java.Util.Function.BiFunction<, , > arg1, Java.Util.Function.BinaryOperator arg2) where Arg1objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#allMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        bool AllMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#anyMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        bool AnyMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#noneMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        bool NoneMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        object[] ToArray();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findAny()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Optional FindAny();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findFirst()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Optional FindFirst();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#max(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Optional Max(Java.Util.Comparator arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#min(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Optional Min(Java.Util.Comparator arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        Java.Util.Optional Reduce(Java.Util.Function.BinaryOperator arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToDouble(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_DoubleStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.DoubleStream FlatMapToDouble<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_DoubleStream : Java.Util.Stream.DoubleStream;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.DoubleStream MapToDouble(Java.Util.Function.ToDoubleFunction arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToInt(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_IntStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.IntStream FlatMapToInt<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_IntStream : Java.Util.Stream.IntStream;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.IntStream MapToInt(Java.Util.Function.ToIntFunction arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToLong(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_LongStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.LongStream FlatMapToLong<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_LongStream : Java.Util.Stream.LongStream;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.LongStream MapToLong(Java.Util.Function.ToLongFunction arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#distinct()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Distinct();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#filter(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Filter(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#limit(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Limit(long arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#peek(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Peek(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#skip(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Skip(long arg0);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Sorted();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream Sorted(Java.Util.Comparator arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#count()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        long Count();
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        T Reduce(T arg0, Java.Util.Function.BinaryOperator arg1);
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEach(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        void ForEach(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEachOrdered(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        void ForEachOrdered(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#dropWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream DropWhile(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#takeWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        Java.Util.Stream.Stream TakeWhile(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T;

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Stream implementation
    public partial class Stream : Java.Util.Stream.IStream
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref=""/> to <see cref=""/>
        /// </summary>
        public static implicit operator Java.Util.Stream.Stream(Java.Util.Stream.Stream t) => t.Cast<Java.Util.Stream.Stream>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#concat(java.util.stream.Stream,java.util.stream.Stream)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Concat<, >(Java.Util.Stream.Stream arg0, Java.Util.Stream.Stream arg1) where Arg0ExtendsT : T where Arg1ExtendsT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "concat", "(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#empty()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Empty()
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "empty", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#generate(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0ExtendsT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Generate(Java.Util.Function.Supplier arg0) where Arg0ExtendsT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "generate", "(Ljava/util/function/Supplier;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#iterate(java.lang.Object,java.util.function.Predicate,java.util.function.UnaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Iterate(T arg0, Java.Util.Function.Predicate arg1, Java.Util.Function.UnaryOperator arg2) where Arg1objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "iterate", "(Ljava/lang/Object;Ljava/util/function/Predicate;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#iterate(java.lang.Object,java.util.function.UnaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Iterate(T arg0, Java.Util.Function.UnaryOperator arg1)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "iterate", "(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#of(java.lang.Object...)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Of(params T[] arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "of", "([Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#of(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream Of(T arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "of", "(Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#ofNullable(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Stream OfNullable(T arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Stream>(LocalBridgeClazz, "ofNullable", "(Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray(java.util.function.IntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public A[] ToArray(Java.Util.Function.IntFunction arg0)
        {
            return IExecuteWithSignatureArray<A>("toArray", "(Ljava/util/function/IntFunction;)[Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public R Collect<, , >(Java.Util.Stream.Collector<, , > arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<R>("collect", "(Ljava/util/stream/Collector;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMap(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_Stream"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsR"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream FlatMap<, , , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_Stream : Java.Util.Stream.Stream where Arg0ExtendsR : R
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("flatMap", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#map(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsR"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Map<, , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsR : R
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("map", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public R Collect<, >(Java.Util.Function.Supplier arg0, Java.Util.Function.BiConsumer<, > arg1, Java.Util.Function.BiConsumer<, > arg2) where Arg1objectSuperT : T
        {
            return IExecuteWithSignature<R>("collect", "(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public U Reduce<, >(U arg0, Java.Util.Function.BiFunction<, , > arg1, Java.Util.Function.BinaryOperator arg2) where Arg1objectSuperT : T
        {
            return IExecuteWithSignature<U>("reduce", "(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#allMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public bool AllMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<bool>("allMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#anyMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public bool AnyMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<bool>("anyMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#noneMatch(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public bool NoneMatch(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<bool>("noneMatch", "(Ljava/util/function/Predicate;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#toArray()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public object[] ToArray()
        {
            return IExecuteWithSignatureArray<object>("toArray", "()[Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findAny()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional FindAny()
        {
            return IExecuteWithSignature<Java.Util.Optional>("findAny", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#findFirst()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional FindFirst()
        {
            return IExecuteWithSignature<Java.Util.Optional>("findFirst", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#max(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Max(Java.Util.Comparator arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Optional>("max", "(Ljava/util/Comparator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#min(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Min(Java.Util.Comparator arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Optional>("min", "(Ljava/util/Comparator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Optional Reduce(Java.Util.Function.BinaryOperator arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional>("reduce", "(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToDouble(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_DoubleStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.DoubleStream FlatMapToDouble<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_DoubleStream : Java.Util.Stream.DoubleStream
        {
            return IExecuteWithSignature<Java.Util.Stream.DoubleStream>("flatMapToDouble", "(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.DoubleStream MapToDouble(Java.Util.Function.ToDoubleFunction arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.DoubleStream>("mapToDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToInt(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_IntStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.IntStream FlatMapToInt<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_IntStream : Java.Util.Stream.IntStream
        {
            return IExecuteWithSignature<Java.Util.Stream.IntStream>("flatMapToInt", "(Ljava/util/function/Function;)Ljava/util/stream/IntStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.IntStream MapToInt(Java.Util.Function.ToIntFunction arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.IntStream>("mapToInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMapToLong(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_LongStream"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.LongStream FlatMapToLong<, >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_LongStream : Java.Util.Stream.LongStream
        {
            return IExecuteWithSignature<Java.Util.Stream.LongStream>("flatMapToLong", "(Ljava/util/function/Function;)Ljava/util/stream/LongStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#mapToLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.LongStream MapToLong(Java.Util.Function.ToLongFunction arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.LongStream>("mapToLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#distinct()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Distinct()
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("distinct", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#filter(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Filter(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("filter", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#limit(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Limit(long arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("limit", "(J)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#peek(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Peek(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("peek", "(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#skip(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Skip(long arg0)
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("skip", "(J)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Sorted()
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("sorted", "()Ljava/util/stream/Stream;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#sorted(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream Sorted(Java.Util.Comparator arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("sorted", "(Ljava/util/Comparator;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#count()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public long Count()
        {
            return IExecuteWithSignature<long>("count", "()J");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#reduce(java.lang.Object,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public T Reduce(T arg0, Java.Util.Function.BinaryOperator arg1)
        {
            return IExecuteWithSignature<T>("reduce", "(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEach(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        public void ForEach(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T
        {
            IExecuteWithSignature("forEach", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#forEachOrdered(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        public void ForEachOrdered(Java.Util.Function.Consumer arg0) where Arg0objectSuperT : T
        {
            IExecuteWithSignature("forEachOrdered", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#dropWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream DropWhile(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("dropWhile", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#takeWhile(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public Java.Util.Stream.Stream TakeWhile(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return IExecuteWithSignature<Java.Util.Stream.Stream>("takeWhile", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}