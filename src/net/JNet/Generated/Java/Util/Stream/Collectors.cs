/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Stream
{
    #region Collectors
    public partial class Collectors
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#counting()"/> 
        /// </summary>
        public static Java.Util.Stream.Collector Counting
        {
            get { return SExecute<Java.Util.Stream.Collector>(LocalClazz, "counting"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toList()"/> 
        /// </summary>
        public static Java.Util.Stream.Collector ToList
        {
            get { return SExecute<Java.Util.Stream.Collector>(LocalClazz, "toList"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toSet()"/> 
        /// </summary>
        public static Java.Util.Stream.Collector ToSet
        {
            get { return SExecute<Java.Util.Stream.Collector>(LocalClazz, "toSet"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableList()"/> 
        /// </summary>
        public static Java.Util.Stream.Collector ToUnmodifiableList
        {
            get { return SExecute<Java.Util.Stream.Collector>(LocalClazz, "toUnmodifiableList"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableSet()"/> 
        /// </summary>
        public static Java.Util.Stream.Collector ToUnmodifiableSet
        {
            get { return SExecute<Java.Util.Stream.Collector>(LocalClazz, "toUnmodifiableSet"); }
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#collectingAndThen(java.util.stream.Collector,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Stream.Collector"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="RR"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, A, RR> CollectingAndThen<T, A, RR, R>(Java.Util.Stream.Collector<T, A, R> arg0, Java.Util.Function.Function<R, RR> arg1)
        {
            return SExecute<Java.Util.Stream.Collector<T, A, RR>>(LocalClazz, "collectingAndThen", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#filtering(java.util.function.Predicate,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Predicate"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, R> Filtering<T, ReturnExtendsobject, R, Arg0objectSuperT, Arg1objectSuperT, A>(Java.Util.Function.Predicate<Arg0objectSuperT> arg0, Java.Util.Stream.Collector<Arg1objectSuperT, A, R> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, R>>(LocalClazz, "filtering", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toCollection(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Supplier"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="C"><see cref="Java.Util.Collection{T}"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, C> ToCollection<T, ReturnExtendsobject, C>(Java.Util.Function.Supplier<C> arg0) where C: Java.Util.Collection<T>
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, C>>(LocalClazz, "toCollection", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#partitioningBy(java.util.function.Predicate,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Predicate"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<bool?, D>> PartitioningBy<T, ReturnExtendsobject, D, Arg0objectSuperT, Arg1objectSuperT, A>(Java.Util.Function.Predicate<Arg0objectSuperT> arg0, Java.Util.Stream.Collector<Arg1objectSuperT, A, D> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<bool?, D>>>(LocalClazz, "partitioningBy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Supplier"/></param>
        /// <param name="arg2"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="M"><see cref="Java.Util.Concurrent.ConcurrentMap{K, D}"/></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="K"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg2objectSuperT"><see cref="Java.Util.Concurrent.ConcurrentMap{K, D}"/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, M> GroupingByConcurrent<T, ReturnExtendsobject, M, Arg0objectSuperT, Arg0ExtendsK, K, Arg2objectSuperT, A, D>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Supplier<M> arg1, Java.Util.Stream.Collector<Arg2objectSuperT, A, D> arg2) where M: Java.Util.Concurrent.ConcurrentMap<K, D> where Arg0objectSuperT: T where Arg2objectSuperT: Java.Util.Concurrent.ConcurrentMap<K, D>
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, M>>(LocalClazz, "groupingByConcurrent", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, D>> GroupingByConcurrent<T, ReturnExtendsobject, K, D, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, A>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Stream.Collector<Arg1objectSuperT, A, D> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, D>>>(LocalClazz, "groupingByConcurrent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, D>> GroupingBy<T, ReturnExtendsobject, K, D, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, A>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Stream.Collector<Arg1objectSuperT, A, D> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, D>>>(LocalClazz, "groupingBy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Supplier"/></param>
        /// <param name="arg2"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="M"><see cref="Java.Util.Map{K, D}"/></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="K"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg2objectSuperT"><see cref="Java.Util.Map{K, D}"/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, M> GroupingBy<T, ReturnExtendsobject, M, Arg0objectSuperT, Arg0ExtendsK, K, Arg2objectSuperT, A, D>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Supplier<M> arg1, Java.Util.Stream.Collector<Arg2objectSuperT, A, D> arg2) where M: Java.Util.Map<K, D> where Arg0objectSuperT: T where Arg2objectSuperT: Java.Util.Map<K, D>
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, M>>(LocalClazz, "groupingBy", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Supplier"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="M"><see cref="Java.Util.Concurrent.ConcurrentMap{K, U}"/></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="K"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, M> ToConcurrentMap<T, ReturnExtendsobject, M, Arg0objectSuperT, Arg0ExtendsK, K, Arg1objectSuperT, Arg1ExtendsU, U>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2, Java.Util.Function.Supplier<M> arg3) where M: Java.Util.Concurrent.ConcurrentMap<K, U> where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, M>>(LocalClazz, "toConcurrentMap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Supplier"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="M"><see cref="Java.Util.Map{K, U}"/></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="K"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, M> ToMap<T, ReturnExtendsobject, M, Arg0objectSuperT, Arg0ExtendsK, K, Arg1objectSuperT, Arg1ExtendsU, U>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2, Java.Util.Function.Supplier<M> arg3) where M: Java.Util.Map<K, U> where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, M>>(LocalClazz, "toMap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, U>> ToConcurrentMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, U>>>(LocalClazz, "toConcurrentMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, U>> ToConcurrentMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, U>>>(LocalClazz, "toConcurrentMap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>> ToMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>>>(LocalClazz, "toMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>> ToMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>>>(LocalClazz, "toMap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>> ToUnmodifiableMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>>>(LocalClazz, "toUnmodifiableMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <typeparam name="Arg1objectSuperT"></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>> ToUnmodifiableMap<T, ReturnExtendsobject, K, U, Arg0objectSuperT, Arg0ExtendsK, Arg1objectSuperT, Arg1ExtendsU>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, U>>>(LocalClazz, "toUnmodifiableMap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, Java.Util.List<T>>> GroupingByConcurrent<T, ReturnExtendsobject, K, Arg0objectSuperT, Arg0ExtendsK>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Concurrent.ConcurrentMap<K, Java.Util.List<T>>>>(LocalClazz, "groupingByConcurrent", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsK"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, Java.Util.List<T>>> GroupingBy<T, ReturnExtendsobject, K, Arg0objectSuperT, Arg0ExtendsK>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsK> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<K, Java.Util.List<T>>>>(LocalClazz, "groupingBy", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#flatMapping(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_Stream_Arg0ExtendsU_"></typeparam>
        /// <typeparam name="Arg0ExtendsU"><see cref="Java.Util.Stream.Stream{Arg0ExtendsU}"/></typeparam>
        /// <typeparam name="U"><typeparamref name="U"/></typeparam>
        /// <typeparam name="Arg1objectSuperU"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, R> FlatMapping<T, ReturnExtendsobject, R, Arg0objectSuperT, Arg0ExtendsJava_Util_Stream_Stream_Arg0ExtendsU_, Arg0ExtendsU, U, Arg1objectSuperU, A>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsJava_Util_Stream_Stream_Arg0ExtendsU_> arg0, Java.Util.Stream.Collector<Arg1objectSuperU, A, R> arg1) where Arg0objectSuperT: T where Arg0ExtendsU: Java.Util.Stream.Stream<Arg0ExtendsU>
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, R>>(LocalClazz, "flatMapping", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#mapping(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Util.Stream.Collector"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg0ExtendsU"></typeparam>
        /// <typeparam name="U"><typeparamref name="U"/></typeparam>
        /// <typeparam name="Arg1objectSuperU"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, R> Mapping<T, ReturnExtendsobject, R, Arg0objectSuperT, Arg0ExtendsU, U, Arg1objectSuperU, A>(Java.Util.Function.Function<Arg0objectSuperT, Arg0ExtendsU> arg0, Java.Util.Stream.Collector<Arg1objectSuperU, A, R> arg1) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, R>>(LocalClazz, "mapping", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.lang.Object,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="U"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><typeparamref name="T"/></typeparam>
        /// <typeparam name="Arg1ExtendsU"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, U> Reducing<T, ReturnExtendsobject, U, Arg1objectSuperT, Arg1ExtendsU>(U arg0, Java.Util.Function.Function<Arg1objectSuperT, Arg1ExtendsU> arg1, Java.Util.Function.BinaryOperator<U> arg2) where Arg1objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, U>>(LocalClazz, "reducing", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToDoubleFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, double?> AveragingDouble<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToDoubleFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, double?>>(LocalClazz, "averagingDouble", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToIntFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, double?> AveragingInt<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToIntFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, double?>>(LocalClazz, "averagingInt", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToLongFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, double?> AveragingLong<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToLongFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, double?>>(LocalClazz, "averagingLong", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToDoubleFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, double?> SummingDouble<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToDoubleFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, double?>>(LocalClazz, "summingDouble", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToIntFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, int?> SummingInt<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToIntFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, int?>>(LocalClazz, "summingInt", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToLongFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, long?> SummingLong<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToLongFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, long?>>(LocalClazz, "summingLong", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToDoubleFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.DoubleSummaryStatistics> SummarizingDouble<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToDoubleFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.DoubleSummaryStatistics>>(LocalClazz, "summarizingDouble", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToIntFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.IntSummaryStatistics> SummarizingInt<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToIntFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.IntSummaryStatistics>>(LocalClazz, "summarizingInt", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.ToLongFunction"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.LongSummaryStatistics> SummarizingLong<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.ToLongFunction<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.LongSummaryStatistics>>(LocalClazz, "summarizingLong", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#partitioningBy(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Predicate"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<bool?, Java.Util.List<T>>> PartitioningBy<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Function.Predicate<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Map<bool?, Java.Util.List<T>>>>(LocalClazz, "partitioningBy", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#maxBy(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Comparator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>> MaxBy<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Comparator<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>>>(LocalClazz, "maxBy", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#minBy(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Comparator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><typeparamref name="T"/></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>> MinBy<T, ReturnExtendsobject, Arg0objectSuperT>(Java.Util.Comparator<Arg0objectSuperT> arg0) where Arg0objectSuperT: T
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>>>(LocalClazz, "minBy", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>> Reducing<T, ReturnExtendsobject>(Java.Util.Function.BinaryOperator<T> arg0)
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, Java.Util.Optional<T>>>(LocalClazz, "reducing", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.lang.Object,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<T, ReturnExtendsobject, T> Reducing<T, ReturnExtendsobject>(T arg0, Java.Util.Function.BinaryOperator<T> arg1)
        {
            return SExecute<Java.Util.Stream.Collector<T, ReturnExtendsobject, T>>(LocalClazz, "reducing", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining()"/>
        /// </summary>

        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string> Joining<ReturnExtendsobject>()
        {
            return SExecute<Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string>>(LocalClazz, "joining");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string> Joining<ReturnExtendsobject>(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, Java.Lang.CharSequence arg2)
        {
            return SExecute<Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string>>(LocalClazz, "joining", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <typeparam name="ReturnExtendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Stream.Collector"/></returns>
        public static Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string> Joining<ReturnExtendsobject>(Java.Lang.CharSequence arg0)
        {
            return SExecute<Java.Util.Stream.Collector<Java.Lang.CharSequence, ReturnExtendsobject, string>>(LocalClazz, "joining", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}