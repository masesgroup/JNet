/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Stream
{
    #region Collectors declaration
    /// <summary>
    /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html"/>
    /// </summary>
    public partial class Collectors : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Collectors>
    {
        const string _bridgeClassName = "java.util.stream.Collectors";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Collectors() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Collectors(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Collectors(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Collectors implementation
    public partial class Collectors
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#collectingAndThen(java.util.stream.Collector,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="RR"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > CollectingAndThen<, , , >(Java.Util.Stream.Collector<, , > arg0, Java.Util.Function.Function<, > arg1)
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "collectingAndThen", "(Ljava/util/stream/Collector;Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#filtering(java.util.function.Predicate,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Filtering<, , , , >(Java.Util.Function.Predicate arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg1objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "filtering", "(Ljava/util/function/Predicate;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toCollection(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="C"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToCollection<, >(Java.Util.Function.Supplier arg0)
        {
            return SExecute<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toCollection", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#partitioningBy(java.util.function.Predicate,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > PartitioningBy<, , , , >(Java.Util.Function.Predicate arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg1objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "partitioningBy", "(Ljava/util/function/Predicate;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="M"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg2objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingByConcurrent<, , , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Supplier arg1, Java.Util.Stream.Collector<, , > arg2) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg2objectSuperT : T
        {
            return SExecute<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingByConcurrent", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingByConcurrent<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingByConcurrent", "(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingBy<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingBy", "(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="M"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg2objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <typeparam name="D"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingBy<, , , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Supplier arg1, Java.Util.Stream.Collector<, , > arg2) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg2objectSuperT : T
        {
            return SExecute<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingBy", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="M"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToConcurrentMap<, , , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2, Java.Util.Function.Supplier arg3) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecute<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toConcurrentMap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <param name="arg3"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="M"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToMap<, , , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2, Java.Util.Function.Supplier arg3) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecute<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toMap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToConcurrentMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toConcurrentMap", "(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToConcurrentMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toConcurrentMap", "(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toMap", "(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toMap", "(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToUnmodifiableMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toUnmodifiableMap", "(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableMap(java.util.function.Function,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToUnmodifiableMap<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Function.Function<, > arg1) where Arg0objectSuperT : T where Arg0ExtendsK : K where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toUnmodifiableMap", "(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingByConcurrent<, , , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsK : K
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingByConcurrent", "(Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsK"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > GroupingBy<, , , >(Java.Util.Function.Function<, > arg0) where Arg0objectSuperT : T where Arg0ExtendsK : K
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "groupingBy", "(Ljava/util/function/Function;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#flatMapping(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsJava_Util_Stream_Stream"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > FlatMapping<, , , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg0ExtendsJava_Util_Stream_Stream : Java.Util.Stream.Stream where Arg0ExtendsU : U where Arg1objectSuperU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "flatMapping", "(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#mapping(java.util.function.Function,java.util.stream.Collector)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="R"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg0ExtendsU"><see cref=""/></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperU"><see cref=""/></typeparam>
        /// <typeparam name="A"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Mapping<, , , , , , >(Java.Util.Function.Function<, > arg0, Java.Util.Stream.Collector<, , > arg1) where Arg0objectSuperT : T where Arg0ExtendsU : U where Arg1objectSuperU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "mapping", "(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.lang.Object,java.util.function.Function,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="Arg1objectSuperT"><see cref=""/></typeparam>
        /// <typeparam name="Arg1ExtendsU"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Reducing<, , , >(U arg0, Java.Util.Function.Function<, > arg1, Java.Util.Function.BinaryOperator arg2) where Arg1objectSuperT : T where Arg1ExtendsU : U
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "reducing", "(Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > AveragingDouble<, >(Java.Util.Function.ToDoubleFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "averagingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > AveragingInt<, >(Java.Util.Function.ToIntFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "averagingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#averagingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > AveragingLong<, >(Java.Util.Function.ToLongFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "averagingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummingDouble<, >(Java.Util.Function.ToDoubleFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummingInt<, >(Java.Util.Function.ToIntFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#counting()"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Counting()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "counting", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummingLong<, >(Java.Util.Function.ToLongFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingDouble(java.util.function.ToDoubleFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummarizingDouble<, >(Java.Util.Function.ToDoubleFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summarizingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingInt(java.util.function.ToIntFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummarizingInt<, >(Java.Util.Function.ToIntFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summarizingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toList()"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToList()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toList", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableList()"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToUnmodifiableList()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toUnmodifiableList", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#summarizingLong(java.util.function.ToLongFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > SummarizingLong<, >(Java.Util.Function.ToLongFunction arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "summarizingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#partitioningBy(java.util.function.Predicate)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > PartitioningBy<, >(Java.Util.Function.Predicate arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "partitioningBy", "(Ljava/util/function/Predicate;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#maxBy(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > MaxBy<, >(Java.Util.Comparator arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "maxBy", "(Ljava/util/Comparator;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#minBy(java.util.Comparator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Arg0objectSuperT"><see cref=""/></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > MinBy<, >(Java.Util.Comparator arg0) where Arg0objectSuperT : T
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "minBy", "(Ljava/util/Comparator;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Reducing(Java.Util.Function.BinaryOperator arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "reducing", "(Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toSet()"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToSet()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toSet", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#toUnmodifiableSet()"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > ToUnmodifiableSet()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "toUnmodifiableSet", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#reducing(java.lang.Object,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Reducing(T arg0, Java.Util.Function.BinaryOperator arg1)
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "reducing", "(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining()"/>
        /// </summary>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Joining()
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "joining", "()Ljava/util/stream/Collector;");
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <param name="arg1"><see cref=""/></param>
        /// <param name="arg2"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Joining(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, Java.Lang.CharSequence arg2)
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "joining", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref=""/></param>
        /// <returns><see cref=""/></returns>
        public static Java.Util.Stream.Collector<, , > Joining(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<Java.Util.Stream.Collector<, , >>(LocalBridgeClazz, "joining", "(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}