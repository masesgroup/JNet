/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region PrimitiveIterator
    public partial class PrimitiveIterator
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.PrimitiveIterator"/> to <see cref="Java.Util.Iterator"/>
        /// </summary>
        public static implicit operator Java.Util.Iterator(Java.Util.PrimitiveIterator t) => t.Cast<Java.Util.Iterator>();
        
        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.html#forEachRemaining(T_CONS)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void ForEachRemaining(object arg0)
        {
            IExecute("forEachRemaining", arg0);
        }
        
        #endregion

        #region Nested classes
        #region OfDouble
        public partial class OfDouble
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Util.PrimitiveIterator.OfDouble"/> to <see cref="Java.Util.PrimitiveIterator"/>
            /// </summary>
            public static implicit operator Java.Util.PrimitiveIterator(Java.Util.PrimitiveIterator.OfDouble t) => t.Cast<Java.Util.PrimitiveIterator>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html#nextDouble()"/>
            /// </summary>
            
            /// <returns><see langword="double"/></returns>
            public double NextDouble()
            {
                return IExecute<double>("nextDouble");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html#next()"/>
            /// </summary>
            
            /// <returns><see langword="object"/></returns>
            public object Next()
            {
                return IExecute("next");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html#forEachRemaining(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html#forEachRemaining(java.util.function.Consumer%3C? super java.lang.Double%3E)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
            public void ForEachRemaining(Java.Util.Function.Consumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfDouble.html#forEachRemaining(java.util.function.DoubleConsumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.DoubleConsumer"/></param>
            public void ForEachRemaining(Java.Util.Function.DoubleConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OfInt
        public partial class OfInt
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Util.PrimitiveIterator.OfInt"/> to <see cref="Java.Util.PrimitiveIterator"/>
            /// </summary>
            public static implicit operator Java.Util.PrimitiveIterator(Java.Util.PrimitiveIterator.OfInt t) => t.Cast<Java.Util.PrimitiveIterator>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#nextInt()"/>
            /// </summary>
            
            /// <returns><see langword="int"/></returns>
            public int NextInt()
            {
                return IExecute<int>("nextInt");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#next()"/>
            /// </summary>
            
            /// <returns><see langword="object"/></returns>
            public object Next()
            {
                return IExecute("next");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#forEachRemaining(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#forEachRemaining(java.util.function.Consumer%3C? super java.lang.Integer%3E)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
            public void ForEachRemaining(Java.Util.Function.Consumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#forEachRemaining(java.util.function.IntConsumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.IntConsumer"/></param>
            public void ForEachRemaining(Java.Util.Function.IntConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OfLong
        public partial class OfLong
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Java.Util.PrimitiveIterator.OfLong"/> to <see cref="Java.Util.PrimitiveIterator"/>
            /// </summary>
            public static implicit operator Java.Util.PrimitiveIterator(Java.Util.PrimitiveIterator.OfLong t) => t.Cast<Java.Util.PrimitiveIterator>();
            
            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html#nextLong()"/>
            /// </summary>
            
            /// <returns><see langword="long"/></returns>
            public long NextLong()
            {
                return IExecute<long>("nextLong");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html#next()"/>
            /// </summary>
            
            /// <returns><see langword="object"/></returns>
            public object Next()
            {
                return IExecute("next");
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html#forEachRemaining(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            public void ForEachRemaining(object arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html#forEachRemaining(java.util.function.Consumer%3C? super java.lang.Long%3E)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
            public void ForEachRemaining(Java.Util.Function.Consumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            /// <summary>
            /// <see href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PrimitiveIterator.OfLong.html#forEachRemaining(java.util.function.LongConsumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Function.LongConsumer"/></param>
            public void ForEachRemaining(Java.Util.Function.LongConsumer arg0)
            {
                IExecute("forEachRemaining", arg0);
            }
            
            #endregion

            // TODO: complete the class
        }
        #endregion


        #endregion

        // TODO: complete the class
    }
    #endregion
}