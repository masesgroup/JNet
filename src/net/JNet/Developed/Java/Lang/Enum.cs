/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.2.0)
*  using java.* as reference
*/

using MASES.JCOBridge.C2JBridge;
using System;

namespace Java.Lang
{
    #region Enum implementation
    public partial class Enum : IEquatable<Enum>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <inheritdoc/>
        public bool Equals(Enum other)
        {
            if (ReferenceEquals(other, null))
                return false;
            if (ReferenceEquals(other, this))
                return true;

            return base.Equals(other);
        }
        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            return Equals(obj as Enum);
        }
        /// <inheritdoc/>
        public static bool operator ==(Enum left, Enum right)
        {
            return Equals(left, right);
        }
        /// <inheritdoc/>
        public static bool operator !=(Enum left, Enum right)
        {
            return !(left == right);
        }

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Enum<E> implementation
    public partial class Enum<E> : IEquatable<Enum<E>>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <inheritdoc/>
        public bool Equals(Enum<E> other)
        {
            if (ReferenceEquals(other, null))
                return false;
            if (ReferenceEquals(other, this))
                return true;

            return base.Equals(other);
        }
        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            return Equals(obj as Enum<E>);
        }
        /// <inheritdoc/>
        public static bool operator ==(Enum<E> left, Enum<E> right)
        {
            return Equals(left, right);
        }
        /// <inheritdoc/>
        public static bool operator !=(Enum<E> left, Enum<E> right)
        {
            return !(left == right);
        }
        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
 
        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}