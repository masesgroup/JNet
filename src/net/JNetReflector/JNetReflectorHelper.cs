/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.1.0)
*  using rt.jar as reference
*/

using Java.Lang;
using Java.Util;
using MASES.JCOBridge.C2JBridge;

namespace Org.Mases.Jnet
{
    /// <summary>
    /// An helper class to manage the Java class JNetReflectorHelper 
    /// </summary>
    public class JNetReflectorHelper : JVMBridgeBase<JNetReflectorHelper>
    {
        public override string ClassName => "org.mases.jnet.JNetReflectorHelper";

        /// <summary>
        /// Enable or disable logging
        /// </summary>
        public static bool EnableLogging
        {
            get { return SExecute<bool>("getLoggingState"); }
            set { SExecute("setLoggingState", value); }
        }
        /// <summary>
        /// Find all <see cref="Class"/>es in the classpath
        /// </summary>
        /// <returns><see cref="Collection{E}"/> of <see cref="Class"/></returns>
        public static Collection<Class> Find() => SExecute<Collection<Class>>("find");
        /// <summary>
        /// Find all <see cref="Class"/>es with <paramref name="packageOrModuleName"/>
        /// </summary>
        /// <param name="packageOrModuleName">Pattern to search</param>
        /// <param name="isModule"><see langword="true"/> for modules, otherwise <see langword="false"/></param>
        /// <returns><see cref="Collection{E}"/> of <see cref="Class"/></returns>
        public static Collection<Class> Find(string packageOrModuleName, bool isModule) => SExecute<Collection<Class>>("find", packageOrModuleName, isModule);
    }
}