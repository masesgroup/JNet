# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:
  
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# This workflow contains multiple jobs
jobs:
  ## Now run "build_macos_native"
  #build_macos_native:
  #  runs-on: macos-13
  #  # Steps represent a sequence of tasks that will be executed as part of the job
  #  steps:    
  #    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #    - uses: actions/checkout@v4
  #      with:
  #        fetch-depth: '1'
  #        submodules: 'true'
  #
  #    - name: Compile CreateVM
  #      run: |
  #        cd ${{ github.workspace }}/tests/native
  #        g++ -I $JAVA_HOME/include -I $JAVA_HOME/include/darwin -L $JAVA_HOME/lib/server -ljvm CreateVM.cpp -o CreateVM.out
  #
  #    - name: Export location
  #      shell: bash
  #      run: echo "DYLD_LIBRARY_PATH=$(echo $JAVA_HOME/lib/server)" >> $GITHUB_ENV
  #
  #    - name: Execute CreateVM
  #      shell: bash
  #      run: |
  #        export
  #        echo "GITHUB_ENV_LD_LIBRARY_PATH=$(echo $JAVA_HOME/lib/server)" >> $GITHUB_ENV
  #        export DYLD_LIBRARY_PATH=/Users/runner/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64/Contents/Home/lib/server
  #        export
  #        ${{ github.workspace }}/tests/native/CreateVM.out

  # Verify if a build is needed
  check_changes:
    #needs: build_macos_native
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/container/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/jvm/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "tests/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  build_container_jnet:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.x
            9.x

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/JNet/JNet.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars for JNet
        run: mvn --file ./src/jvm/jnet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/jnet

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          file: ./src/container/Dockerfile.linux
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          
      - name: Attest Docker Hub
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/jnet
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
        
  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNet\JNet.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars for JNet
        run: mvn --file ./src/jvm/jnet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile JNetCLI
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNetCLI\JNetCLI.csproj
 
      - name: Compile JNetReflector
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNetReflector\JNetReflector.csproj
 
      - name: Compile JNetPSCore
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNetPSCore\JNetPSCore.csproj
        
      - name: Compile JNetPS
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNetPS\JNetPS.csproj
 
      - uses: nuget/setup-nuget@v2.0.1
        with:
          nuget-version: '5.x'
          
      - run: nuget pack src\net\JNetCLI\JNetCLI.nuspec -OutputDirectory .\bin
      - run: nuget pack src\net\JNetReflector\JNetReflector.nuspec -OutputDirectory .\bin

      - name: Prepare PowerShell package
        run: |
          Copy-Item .\src\net\JNetPS\MASES.JNetPS.psd1 -Destination .\MASES.JNetPS\MASES.JNetPS.psd1 -Force
          Copy-Item .\src\net\JNetPS\MASES.JNetPS.psm1 -Destination .\MASES.JNetPS\MASES.JNetPS.psm1 -Force
        shell: pwsh
     
      - name: Create PowerShell package
        run: |
          $env:DOTNET_CLI_UI_LANGUAGE="en_US"
          Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted
          Publish-Module -Path .\MASES.JNetPS -Repository Local_Nuget_Feed -NuGetApiKey 'ABC123'
        shell: pwsh

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\JNet.sln

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: JNetNuGet
          path: .\bin\*nupkg

      - name: Create Jars for tests
        run: mvn --file ./tests/jvm/testclass/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile tests and templates
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" tests\net\JNetTest.sln
        env:
          GITHUB_TEST_PREPARATION: true

      - name: Prepare execution files
        run: |
          Copy-Item ${{ github.workspace }}\tests\scripts\JNetPSTest.ps1 -Destination bin\JNetPSTest.ps1 -Force

      - name: Save JNet bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: JNet_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}
          
      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: JNetBin
          path: .\bin\
          
  execute_tests:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ] # , 'macos-13' ] disable due to https://github.com/masesgroup/JNet/issues/518#issuecomment-2547271924
        framework: [ 'net462', 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle']
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - os: ubuntu-latest
            framework: net462
          - os: macos-latest
            framework: net462
          - os: macos-13
            framework: net462
          - jdk_vendor: oracle
            jdk_version: 11
        
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_DbgEnableMiniDump: 1
      DOTNET_DbgMiniDumpType: 3
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p
      DOTNET_CreateDumpDiagnostics: 1
      DOTNET_CreateDumpVerboseDiagnostics: 1
      DOTNET_EnableCrashReport: 1
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_5_19 }}
    
    steps:
      - name: Restore JNet bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JNet_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}

      - uses: actions/setup-dotnet@v4
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        with:
          dotnet-version: |
            6.x
            9.x

      - name: Download Procdump and prepare
        if: ${{ matrix.os == 'windows-latest' }} # see https://gist.github.com/Sedeniono/e6d6504e3bf0645937852ee5681ef9ee and https://learn.microsoft.com/it-it/sysinternals/downloads/procdump
        continue-on-error: true
        run: |
          C:\msys64\usr\bin\wget.exe https://download.sysinternals.com/files/Procdump.zip
          Expand-Archive -LiteralPath '${{ github.workspace }}\Procdump.zip' -DestinationPath ${{ github.workspace }}\Procdump -Force
          dir .\Procdump
          ${{ github.workspace }}\Procdump\procdump.exe -accepteula
          mkdir CrashDumpsDir
          ${{ github.workspace }}\Procdump\procdump.exe -ma -i ${{ github.workspace }}\CrashDumpsDir

      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13' || (matrix.os == 'windows-latest' && matrix.framework != 'net462') }} # for windows see https://github.com/masesgroup/JNet/issues/573#issuecomment-2550033900
        continue-on-error: true
        run: |
          dotnet ./bin/${{ matrix.framework }}/JNetTest.dll
          dotnet ./bin/${{ matrix.framework }}/JNetByteBufferTest.dll
          
      - if: ${{ matrix.os == 'windows-latest' && matrix.framework == 'net462' }}
        continue-on-error: true
        run: |
          .\bin\${{ matrix.framework }}\JNetTest.exe
          .\bin\${{ matrix.framework }}\JNetByteBufferTest.exe
          
      - if: ${{ matrix.os == 'windows-latest' && matrix.framework == 'net9.0' }}
        run: (Get-EventLog -LogName Application -Newest 5).Message

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_tests_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: .\CrashDumpsDir\*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_tests_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Crash_tests_hs_err__${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  execute_tests_powershell:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ] # , 'macos-13' ] disable due to https://github.com/masesgroup/JNet/issues/518#issuecomment-2547271924
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle']
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
     
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_CLI_UI_LANGUAGE: en_US
      DOTNET_DbgEnableMiniDump: 1
      DOTNET_DbgMiniDumpType: 3
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p
      DOTNET_CreateDumpDiagnostics: 1
      DOTNET_CreateDumpVerboseDiagnostics: 1
      DOTNET_EnableCrashReport: 1
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_5_19 }}

    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.x
            9.x

      - name: Download Procdump and prepare
        if: ${{ matrix.os == 'windows-latest' }} # see https://gist.github.com/Sedeniono/e6d6504e3bf0645937852ee5681ef9ee and https://learn.microsoft.com/it-it/sysinternals/downloads/procdump
        continue-on-error: true
        run: |
          C:\msys64\usr\bin\wget.exe https://download.sysinternals.com/files/Procdump.zip
          Expand-Archive -LiteralPath '${{ github.workspace }}\Procdump.zip' -DestinationPath ${{ github.workspace }}\Procdump -Force
          dir .\Procdump
          ${{ github.workspace }}\Procdump\procdump.exe -accepteula
          mkdir CrashDumpsDir
          ${{ github.workspace }}\Procdump\procdump.exe -ma -i ${{ github.workspace }}\CrashDumpsDir

      - name: Restore JNet bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JNet_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - shell: pwsh
        run: Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted

      - if: ${{ matrix.os != 'windows-latest' }}
        continue-on-error: true
        shell: pwsh
        run: |
          Install-Module MASES.JNetPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}/bin/JNetPSTest.ps1

      - if: ${{ matrix.os == 'windows-latest' }}
        continue-on-error: true
        shell: pwsh
        run: |
          Install-Module MASES.JNetPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}\bin\JNetPSTest.ps1

      - if: ${{ matrix.os == 'windows-latest' }}
        continue-on-error: true
        shell: powershell
        run: |
          Install-Module MASES.JNetPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}\bin\JNetPSTest.ps1
          
      - if: ${{ matrix.os == 'windows-latest' }}
        run: (Get-EventLog -LogName Application -Newest 5).Message

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_powershell_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: .\CrashDumpsDir\*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_powershell_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Crash_powershell_hs_err_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  final_cleanup:
    needs: [ execute_tests, execute_tests_powershell ]
    if: "always()"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'

      - name: Clear caches
        run: |
          gh extension install actions/gh-actions-cache
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list --key JNet_${{ github.run_number }}_${{ github.run_attempt }} | cut -f 1 )
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
